/*
OrdersService

Testing OrdersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_OrdersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersCountGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersExtendedGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersExtendedGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersOrderIdCalculatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersOrderIdCalculatePut(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersOrderIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersOrderIdDelete(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersOrderIdLinesCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersOrderIdLinesCountGet(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersOrderIdLinesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersOrderIdLinesGet(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersOrderIdLinesOrderLineIdCalculatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string
		var orderLineId string

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersOrderIdLinesOrderLineIdCalculatePut(context.Background(), orderId, orderLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersOrderIdLinesOrderLineIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string
		var orderLineId string

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersOrderIdLinesOrderLineIdDelete(context.Background(), orderId, orderLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersOrderIdLinesOrderLineIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string
		var orderLineId string

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersOrderIdLinesOrderLineIdGet(context.Background(), orderId, orderLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersOrderIdLinesOrderLineIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string
		var orderLineId string

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersOrderIdLinesOrderLineIdPut(context.Background(), orderId, orderLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersOrderIdLinesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersOrderIdLinesPost(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersOrderIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersOrderIdPut(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService ApiV2OrdersServiceOrdersSubmitCartPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersAPI.ApiV2OrdersServiceOrdersSubmitCartPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService GetOrderAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orderId string

		resp, httpRes, err := apiClient.OrdersAPI.GetOrderAsync(context.Background(), orderId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService GetOrdersAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersAPI.GetOrdersAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
