/*
GlobeService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CountryCallingCodeDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryCallingCodeDto{}

// CountryCallingCodeDto struct for CountryCallingCodeDto
type CountryCallingCodeDto struct {
	Id *int32 `json:"id,omitempty"`
	CallingCode NullableString `json:"callingCode,omitempty"`
	CountryID NullableString `json:"countryID,omitempty"`
}

// NewCountryCallingCodeDto instantiates a new CountryCallingCodeDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryCallingCodeDto() *CountryCallingCodeDto {
	this := CountryCallingCodeDto{}
	return &this
}

// NewCountryCallingCodeDtoWithDefaults instantiates a new CountryCallingCodeDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryCallingCodeDtoWithDefaults() *CountryCallingCodeDto {
	this := CountryCallingCodeDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CountryCallingCodeDto) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryCallingCodeDto) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CountryCallingCodeDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CountryCallingCodeDto) SetId(v int32) {
	o.Id = &v
}

// GetCallingCode returns the CallingCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryCallingCodeDto) GetCallingCode() string {
	if o == nil || IsNil(o.CallingCode.Get()) {
		var ret string
		return ret
	}
	return *o.CallingCode.Get()
}

// GetCallingCodeOk returns a tuple with the CallingCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryCallingCodeDto) GetCallingCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallingCode.Get(), o.CallingCode.IsSet()
}

// HasCallingCode returns a boolean if a field has been set.
func (o *CountryCallingCodeDto) HasCallingCode() bool {
	if o != nil && o.CallingCode.IsSet() {
		return true
	}

	return false
}

// SetCallingCode gets a reference to the given NullableString and assigns it to the CallingCode field.
func (o *CountryCallingCodeDto) SetCallingCode(v string) {
	o.CallingCode.Set(&v)
}
// SetCallingCodeNil sets the value for CallingCode to be an explicit nil
func (o *CountryCallingCodeDto) SetCallingCodeNil() {
	o.CallingCode.Set(nil)
}

// UnsetCallingCode ensures that no value is present for CallingCode, not even an explicit nil
func (o *CountryCallingCodeDto) UnsetCallingCode() {
	o.CallingCode.Unset()
}

// GetCountryID returns the CountryID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryCallingCodeDto) GetCountryID() string {
	if o == nil || IsNil(o.CountryID.Get()) {
		var ret string
		return ret
	}
	return *o.CountryID.Get()
}

// GetCountryIDOk returns a tuple with the CountryID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryCallingCodeDto) GetCountryIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryID.Get(), o.CountryID.IsSet()
}

// HasCountryID returns a boolean if a field has been set.
func (o *CountryCallingCodeDto) HasCountryID() bool {
	if o != nil && o.CountryID.IsSet() {
		return true
	}

	return false
}

// SetCountryID gets a reference to the given NullableString and assigns it to the CountryID field.
func (o *CountryCallingCodeDto) SetCountryID(v string) {
	o.CountryID.Set(&v)
}
// SetCountryIDNil sets the value for CountryID to be an explicit nil
func (o *CountryCallingCodeDto) SetCountryIDNil() {
	o.CountryID.Set(nil)
}

// UnsetCountryID ensures that no value is present for CountryID, not even an explicit nil
func (o *CountryCallingCodeDto) UnsetCountryID() {
	o.CountryID.Unset()
}

func (o CountryCallingCodeDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryCallingCodeDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.CallingCode.IsSet() {
		toSerialize["callingCode"] = o.CallingCode.Get()
	}
	if o.CountryID.IsSet() {
		toSerialize["countryID"] = o.CountryID.Get()
	}
	return toSerialize, nil
}

type NullableCountryCallingCodeDto struct {
	value *CountryCallingCodeDto
	isSet bool
}

func (v NullableCountryCallingCodeDto) Get() *CountryCallingCodeDto {
	return v.value
}

func (v *NullableCountryCallingCodeDto) Set(val *CountryCallingCodeDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryCallingCodeDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryCallingCodeDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryCallingCodeDto(val *CountryCallingCodeDto) *NullableCountryCallingCodeDto {
	return &NullableCountryCallingCodeDto{value: val, isSet: true}
}

func (v NullableCountryCallingCodeDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryCallingCodeDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


