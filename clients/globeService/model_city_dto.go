/*
GlobeService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CityDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CityDto{}

// CityDto struct for CityDto
type CityDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	Name NullableString `json:"name,omitempty"`
	ImageUrl NullableString `json:"imageUrl,omitempty"`
	StateID NullableString `json:"stateID,omitempty"`
	CountryID NullableString `json:"countryID,omitempty"`
	Latitude NullableString `json:"latitude,omitempty"`
	Longitude NullableString `json:"longitude,omitempty"`
}

// NewCityDto instantiates a new CityDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCityDto() *CityDto {
	this := CityDto{}
	return &this
}

// NewCityDtoWithDefaults instantiates a new CityDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCityDtoWithDefaults() *CityDto {
	this := CityDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CityDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CityDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CityDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CityDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CityDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CityDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CityDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CityDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CityDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *CityDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *CityDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *CityDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CityDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CityDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CityDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CityDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CityDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CityDto) UnsetName() {
	o.Name.Unset()
}

// GetImageUrl returns the ImageUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CityDto) GetImageUrl() string {
	if o == nil || IsNil(o.ImageUrl.Get()) {
		var ret string
		return ret
	}
	return *o.ImageUrl.Get()
}

// GetImageUrlOk returns a tuple with the ImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CityDto) GetImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageUrl.Get(), o.ImageUrl.IsSet()
}

// HasImageUrl returns a boolean if a field has been set.
func (o *CityDto) HasImageUrl() bool {
	if o != nil && o.ImageUrl.IsSet() {
		return true
	}

	return false
}

// SetImageUrl gets a reference to the given NullableString and assigns it to the ImageUrl field.
func (o *CityDto) SetImageUrl(v string) {
	o.ImageUrl.Set(&v)
}
// SetImageUrlNil sets the value for ImageUrl to be an explicit nil
func (o *CityDto) SetImageUrlNil() {
	o.ImageUrl.Set(nil)
}

// UnsetImageUrl ensures that no value is present for ImageUrl, not even an explicit nil
func (o *CityDto) UnsetImageUrl() {
	o.ImageUrl.Unset()
}

// GetStateID returns the StateID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CityDto) GetStateID() string {
	if o == nil || IsNil(o.StateID.Get()) {
		var ret string
		return ret
	}
	return *o.StateID.Get()
}

// GetStateIDOk returns a tuple with the StateID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CityDto) GetStateIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateID.Get(), o.StateID.IsSet()
}

// HasStateID returns a boolean if a field has been set.
func (o *CityDto) HasStateID() bool {
	if o != nil && o.StateID.IsSet() {
		return true
	}

	return false
}

// SetStateID gets a reference to the given NullableString and assigns it to the StateID field.
func (o *CityDto) SetStateID(v string) {
	o.StateID.Set(&v)
}
// SetStateIDNil sets the value for StateID to be an explicit nil
func (o *CityDto) SetStateIDNil() {
	o.StateID.Set(nil)
}

// UnsetStateID ensures that no value is present for StateID, not even an explicit nil
func (o *CityDto) UnsetStateID() {
	o.StateID.Unset()
}

// GetCountryID returns the CountryID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CityDto) GetCountryID() string {
	if o == nil || IsNil(o.CountryID.Get()) {
		var ret string
		return ret
	}
	return *o.CountryID.Get()
}

// GetCountryIDOk returns a tuple with the CountryID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CityDto) GetCountryIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryID.Get(), o.CountryID.IsSet()
}

// HasCountryID returns a boolean if a field has been set.
func (o *CityDto) HasCountryID() bool {
	if o != nil && o.CountryID.IsSet() {
		return true
	}

	return false
}

// SetCountryID gets a reference to the given NullableString and assigns it to the CountryID field.
func (o *CityDto) SetCountryID(v string) {
	o.CountryID.Set(&v)
}
// SetCountryIDNil sets the value for CountryID to be an explicit nil
func (o *CityDto) SetCountryIDNil() {
	o.CountryID.Set(nil)
}

// UnsetCountryID ensures that no value is present for CountryID, not even an explicit nil
func (o *CityDto) UnsetCountryID() {
	o.CountryID.Unset()
}

// GetLatitude returns the Latitude field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CityDto) GetLatitude() string {
	if o == nil || IsNil(o.Latitude.Get()) {
		var ret string
		return ret
	}
	return *o.Latitude.Get()
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CityDto) GetLatitudeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Latitude.Get(), o.Latitude.IsSet()
}

// HasLatitude returns a boolean if a field has been set.
func (o *CityDto) HasLatitude() bool {
	if o != nil && o.Latitude.IsSet() {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given NullableString and assigns it to the Latitude field.
func (o *CityDto) SetLatitude(v string) {
	o.Latitude.Set(&v)
}
// SetLatitudeNil sets the value for Latitude to be an explicit nil
func (o *CityDto) SetLatitudeNil() {
	o.Latitude.Set(nil)
}

// UnsetLatitude ensures that no value is present for Latitude, not even an explicit nil
func (o *CityDto) UnsetLatitude() {
	o.Latitude.Unset()
}

// GetLongitude returns the Longitude field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CityDto) GetLongitude() string {
	if o == nil || IsNil(o.Longitude.Get()) {
		var ret string
		return ret
	}
	return *o.Longitude.Get()
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CityDto) GetLongitudeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Longitude.Get(), o.Longitude.IsSet()
}

// HasLongitude returns a boolean if a field has been set.
func (o *CityDto) HasLongitude() bool {
	if o != nil && o.Longitude.IsSet() {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given NullableString and assigns it to the Longitude field.
func (o *CityDto) SetLongitude(v string) {
	o.Longitude.Set(&v)
}
// SetLongitudeNil sets the value for Longitude to be an explicit nil
func (o *CityDto) SetLongitudeNil() {
	o.Longitude.Set(nil)
}

// UnsetLongitude ensures that no value is present for Longitude, not even an explicit nil
func (o *CityDto) UnsetLongitude() {
	o.Longitude.Unset()
}

func (o CityDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CityDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ImageUrl.IsSet() {
		toSerialize["imageUrl"] = o.ImageUrl.Get()
	}
	if o.StateID.IsSet() {
		toSerialize["stateID"] = o.StateID.Get()
	}
	if o.CountryID.IsSet() {
		toSerialize["countryID"] = o.CountryID.Get()
	}
	if o.Latitude.IsSet() {
		toSerialize["latitude"] = o.Latitude.Get()
	}
	if o.Longitude.IsSet() {
		toSerialize["longitude"] = o.Longitude.Get()
	}
	return toSerialize, nil
}

type NullableCityDto struct {
	value *CityDto
	isSet bool
}

func (v NullableCityDto) Get() *CityDto {
	return v.value
}

func (v *NullableCityDto) Set(val *CityDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCityDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCityDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCityDto(val *CityDto) *NullableCityDto {
	return &NullableCityDto{value: val, isSet: true}
}

func (v NullableCityDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCityDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


