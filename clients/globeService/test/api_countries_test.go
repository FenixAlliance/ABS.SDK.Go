/*
GlobeService

Testing CountriesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_CountriesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CountriesAPIService ApiV2GlobeServiceCountriesCountryIdCallingCodesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryId string

		resp, httpRes, err := apiClient.CountriesAPI.ApiV2GlobeServiceCountriesCountryIdCallingCodesGet(context.Background(), countryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CountriesAPIService ApiV2GlobeServiceCountriesCountryIdCurrenciesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryId string

		resp, httpRes, err := apiClient.CountriesAPI.ApiV2GlobeServiceCountriesCountryIdCurrenciesGet(context.Background(), countryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CountriesAPIService ApiV2GlobeServiceCountriesCountryIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryId string

		resp, httpRes, err := apiClient.CountriesAPI.ApiV2GlobeServiceCountriesCountryIdGet(context.Background(), countryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CountriesAPIService ApiV2GlobeServiceCountriesCountryIdStatesCountryStateIdCitiesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryStateId string
		var countryId string

		resp, httpRes, err := apiClient.CountriesAPI.ApiV2GlobeServiceCountriesCountryIdStatesCountryStateIdCitiesGet(context.Background(), countryStateId, countryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CountriesAPIService ApiV2GlobeServiceCountriesCountryIdStatesCountryStateIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryStateId string
		var countryId string

		resp, httpRes, err := apiClient.CountriesAPI.ApiV2GlobeServiceCountriesCountryIdStatesCountryStateIdGet(context.Background(), countryStateId, countryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CountriesAPIService ApiV2GlobeServiceCountriesCountryIdStatesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryId string

		resp, httpRes, err := apiClient.CountriesAPI.ApiV2GlobeServiceCountriesCountryIdStatesGet(context.Background(), countryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CountriesAPIService ApiV2GlobeServiceCountriesCountryIdTimezonesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryId string

		resp, httpRes, err := apiClient.CountriesAPI.ApiV2GlobeServiceCountriesCountryIdTimezonesGet(context.Background(), countryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CountriesAPIService ApiV2GlobeServiceCountriesCountryIdTopLevelDomainsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var countryId string

		resp, httpRes, err := apiClient.CountriesAPI.ApiV2GlobeServiceCountriesCountryIdTopLevelDomainsGet(context.Background(), countryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CountriesAPIService ApiV2GlobeServiceCountriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CountriesAPI.ApiV2GlobeServiceCountriesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CountriesAPIService ApiV2GlobeServiceCountriesSearchGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CountriesAPI.ApiV2GlobeServiceCountriesSearchGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
