/*
GlobeService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CountryTopLevelDomainDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryTopLevelDomainDto{}

// CountryTopLevelDomainDto struct for CountryTopLevelDomainDto
type CountryTopLevelDomainDto struct {
	Id NullableString `json:"id,omitempty"`
	Domain NullableString `json:"domain,omitempty"`
	CountryID NullableString `json:"countryID,omitempty"`
}

// NewCountryTopLevelDomainDto instantiates a new CountryTopLevelDomainDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryTopLevelDomainDto() *CountryTopLevelDomainDto {
	this := CountryTopLevelDomainDto{}
	return &this
}

// NewCountryTopLevelDomainDtoWithDefaults instantiates a new CountryTopLevelDomainDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryTopLevelDomainDtoWithDefaults() *CountryTopLevelDomainDto {
	this := CountryTopLevelDomainDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryTopLevelDomainDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryTopLevelDomainDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CountryTopLevelDomainDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CountryTopLevelDomainDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CountryTopLevelDomainDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CountryTopLevelDomainDto) UnsetId() {
	o.Id.Unset()
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryTopLevelDomainDto) GetDomain() string {
	if o == nil || IsNil(o.Domain.Get()) {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryTopLevelDomainDto) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *CountryTopLevelDomainDto) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *CountryTopLevelDomainDto) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *CountryTopLevelDomainDto) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *CountryTopLevelDomainDto) UnsetDomain() {
	o.Domain.Unset()
}

// GetCountryID returns the CountryID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryTopLevelDomainDto) GetCountryID() string {
	if o == nil || IsNil(o.CountryID.Get()) {
		var ret string
		return ret
	}
	return *o.CountryID.Get()
}

// GetCountryIDOk returns a tuple with the CountryID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryTopLevelDomainDto) GetCountryIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryID.Get(), o.CountryID.IsSet()
}

// HasCountryID returns a boolean if a field has been set.
func (o *CountryTopLevelDomainDto) HasCountryID() bool {
	if o != nil && o.CountryID.IsSet() {
		return true
	}

	return false
}

// SetCountryID gets a reference to the given NullableString and assigns it to the CountryID field.
func (o *CountryTopLevelDomainDto) SetCountryID(v string) {
	o.CountryID.Set(&v)
}
// SetCountryIDNil sets the value for CountryID to be an explicit nil
func (o *CountryTopLevelDomainDto) SetCountryIDNil() {
	o.CountryID.Set(nil)
}

// UnsetCountryID ensures that no value is present for CountryID, not even an explicit nil
func (o *CountryTopLevelDomainDto) UnsetCountryID() {
	o.CountryID.Unset()
}

func (o CountryTopLevelDomainDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryTopLevelDomainDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.CountryID.IsSet() {
		toSerialize["countryID"] = o.CountryID.Get()
	}
	return toSerialize, nil
}

type NullableCountryTopLevelDomainDto struct {
	value *CountryTopLevelDomainDto
	isSet bool
}

func (v NullableCountryTopLevelDomainDto) Get() *CountryTopLevelDomainDto {
	return v.value
}

func (v *NullableCountryTopLevelDomainDto) Set(val *CountryTopLevelDomainDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryTopLevelDomainDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryTopLevelDomainDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryTopLevelDomainDto(val *CountryTopLevelDomainDto) *NullableCountryTopLevelDomainDto {
	return &NullableCountryTopLevelDomainDto{value: val, isSet: true}
}

func (v NullableCountryTopLevelDomainDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryTopLevelDomainDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


