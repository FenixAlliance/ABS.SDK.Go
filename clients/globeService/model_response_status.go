/*
GlobeService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ResponseStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseStatus{}

// ResponseStatus struct for ResponseStatus
type ResponseStatus struct {
	Success *bool `json:"success,omitempty"`
	Error *Error `json:"error,omitempty"`
	CorrelationID NullableString `json:"correlationID,omitempty"`
	UtcTimestamp *time.Time `json:"utcTimestamp,omitempty"`
}

// NewResponseStatus instantiates a new ResponseStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseStatus() *ResponseStatus {
	this := ResponseStatus{}
	return &this
}

// NewResponseStatusWithDefaults instantiates a new ResponseStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseStatusWithDefaults() *ResponseStatus {
	this := ResponseStatus{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *ResponseStatus) GetSuccess() bool {
	if o == nil || IsNil(o.Success) {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStatus) GetSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.Success) {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *ResponseStatus) HasSuccess() bool {
	if o != nil && !IsNil(o.Success) {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *ResponseStatus) SetSuccess(v bool) {
	o.Success = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ResponseStatus) GetError() Error {
	if o == nil || IsNil(o.Error) {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStatus) GetErrorOk() (*Error, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ResponseStatus) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *ResponseStatus) SetError(v Error) {
	o.Error = &v
}

// GetCorrelationID returns the CorrelationID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseStatus) GetCorrelationID() string {
	if o == nil || IsNil(o.CorrelationID.Get()) {
		var ret string
		return ret
	}
	return *o.CorrelationID.Get()
}

// GetCorrelationIDOk returns a tuple with the CorrelationID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseStatus) GetCorrelationIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CorrelationID.Get(), o.CorrelationID.IsSet()
}

// HasCorrelationID returns a boolean if a field has been set.
func (o *ResponseStatus) HasCorrelationID() bool {
	if o != nil && o.CorrelationID.IsSet() {
		return true
	}

	return false
}

// SetCorrelationID gets a reference to the given NullableString and assigns it to the CorrelationID field.
func (o *ResponseStatus) SetCorrelationID(v string) {
	o.CorrelationID.Set(&v)
}
// SetCorrelationIDNil sets the value for CorrelationID to be an explicit nil
func (o *ResponseStatus) SetCorrelationIDNil() {
	o.CorrelationID.Set(nil)
}

// UnsetCorrelationID ensures that no value is present for CorrelationID, not even an explicit nil
func (o *ResponseStatus) UnsetCorrelationID() {
	o.CorrelationID.Unset()
}

// GetUtcTimestamp returns the UtcTimestamp field value if set, zero value otherwise.
func (o *ResponseStatus) GetUtcTimestamp() time.Time {
	if o == nil || IsNil(o.UtcTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.UtcTimestamp
}

// GetUtcTimestampOk returns a tuple with the UtcTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseStatus) GetUtcTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UtcTimestamp) {
		return nil, false
	}
	return o.UtcTimestamp, true
}

// HasUtcTimestamp returns a boolean if a field has been set.
func (o *ResponseStatus) HasUtcTimestamp() bool {
	if o != nil && !IsNil(o.UtcTimestamp) {
		return true
	}

	return false
}

// SetUtcTimestamp gets a reference to the given time.Time and assigns it to the UtcTimestamp field.
func (o *ResponseStatus) SetUtcTimestamp(v time.Time) {
	o.UtcTimestamp = &v
}

func (o ResponseStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Success) {
		toSerialize["success"] = o.Success
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if o.CorrelationID.IsSet() {
		toSerialize["correlationID"] = o.CorrelationID.Get()
	}
	if !IsNil(o.UtcTimestamp) {
		toSerialize["utcTimestamp"] = o.UtcTimestamp
	}
	return toSerialize, nil
}

type NullableResponseStatus struct {
	value *ResponseStatus
	isSet bool
}

func (v NullableResponseStatus) Get() *ResponseStatus {
	return v.value
}

func (v *NullableResponseStatus) Set(val *ResponseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseStatus(val *ResponseStatus) *NullableResponseStatus {
	return &NullableResponseStatus{value: val, isSet: true}
}

func (v NullableResponseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


