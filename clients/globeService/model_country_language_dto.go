/*
GlobeService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CountryLanguageDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryLanguageDto{}

// CountryLanguageDto struct for CountryLanguageDto
type CountryLanguageDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	Iso6391 NullableString `json:"iso639_1,omitempty"`
	Iso6392 NullableString `json:"iso639_2,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Name NullableString `json:"name,omitempty"`
	LanguageNativeName NullableString `json:"languageNativeName,omitempty"`
}

// NewCountryLanguageDto instantiates a new CountryLanguageDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryLanguageDto() *CountryLanguageDto {
	this := CountryLanguageDto{}
	return &this
}

// NewCountryLanguageDtoWithDefaults instantiates a new CountryLanguageDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryLanguageDtoWithDefaults() *CountryLanguageDto {
	this := CountryLanguageDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryLanguageDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryLanguageDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CountryLanguageDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CountryLanguageDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CountryLanguageDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CountryLanguageDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryLanguageDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryLanguageDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CountryLanguageDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *CountryLanguageDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *CountryLanguageDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *CountryLanguageDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetIso6391 returns the Iso6391 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryLanguageDto) GetIso6391() string {
	if o == nil || IsNil(o.Iso6391.Get()) {
		var ret string
		return ret
	}
	return *o.Iso6391.Get()
}

// GetIso6391Ok returns a tuple with the Iso6391 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryLanguageDto) GetIso6391Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Iso6391.Get(), o.Iso6391.IsSet()
}

// HasIso6391 returns a boolean if a field has been set.
func (o *CountryLanguageDto) HasIso6391() bool {
	if o != nil && o.Iso6391.IsSet() {
		return true
	}

	return false
}

// SetIso6391 gets a reference to the given NullableString and assigns it to the Iso6391 field.
func (o *CountryLanguageDto) SetIso6391(v string) {
	o.Iso6391.Set(&v)
}
// SetIso6391Nil sets the value for Iso6391 to be an explicit nil
func (o *CountryLanguageDto) SetIso6391Nil() {
	o.Iso6391.Set(nil)
}

// UnsetIso6391 ensures that no value is present for Iso6391, not even an explicit nil
func (o *CountryLanguageDto) UnsetIso6391() {
	o.Iso6391.Unset()
}

// GetIso6392 returns the Iso6392 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryLanguageDto) GetIso6392() string {
	if o == nil || IsNil(o.Iso6392.Get()) {
		var ret string
		return ret
	}
	return *o.Iso6392.Get()
}

// GetIso6392Ok returns a tuple with the Iso6392 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryLanguageDto) GetIso6392Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Iso6392.Get(), o.Iso6392.IsSet()
}

// HasIso6392 returns a boolean if a field has been set.
func (o *CountryLanguageDto) HasIso6392() bool {
	if o != nil && o.Iso6392.IsSet() {
		return true
	}

	return false
}

// SetIso6392 gets a reference to the given NullableString and assigns it to the Iso6392 field.
func (o *CountryLanguageDto) SetIso6392(v string) {
	o.Iso6392.Set(&v)
}
// SetIso6392Nil sets the value for Iso6392 to be an explicit nil
func (o *CountryLanguageDto) SetIso6392Nil() {
	o.Iso6392.Set(nil)
}

// UnsetIso6392 ensures that no value is present for Iso6392, not even an explicit nil
func (o *CountryLanguageDto) UnsetIso6392() {
	o.Iso6392.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *CountryLanguageDto) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryLanguageDto) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *CountryLanguageDto) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *CountryLanguageDto) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryLanguageDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryLanguageDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CountryLanguageDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CountryLanguageDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CountryLanguageDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CountryLanguageDto) UnsetName() {
	o.Name.Unset()
}

// GetLanguageNativeName returns the LanguageNativeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryLanguageDto) GetLanguageNativeName() string {
	if o == nil || IsNil(o.LanguageNativeName.Get()) {
		var ret string
		return ret
	}
	return *o.LanguageNativeName.Get()
}

// GetLanguageNativeNameOk returns a tuple with the LanguageNativeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryLanguageDto) GetLanguageNativeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LanguageNativeName.Get(), o.LanguageNativeName.IsSet()
}

// HasLanguageNativeName returns a boolean if a field has been set.
func (o *CountryLanguageDto) HasLanguageNativeName() bool {
	if o != nil && o.LanguageNativeName.IsSet() {
		return true
	}

	return false
}

// SetLanguageNativeName gets a reference to the given NullableString and assigns it to the LanguageNativeName field.
func (o *CountryLanguageDto) SetLanguageNativeName(v string) {
	o.LanguageNativeName.Set(&v)
}
// SetLanguageNativeNameNil sets the value for LanguageNativeName to be an explicit nil
func (o *CountryLanguageDto) SetLanguageNativeNameNil() {
	o.LanguageNativeName.Set(nil)
}

// UnsetLanguageNativeName ensures that no value is present for LanguageNativeName, not even an explicit nil
func (o *CountryLanguageDto) UnsetLanguageNativeName() {
	o.LanguageNativeName.Unset()
}

func (o CountryLanguageDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryLanguageDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Iso6391.IsSet() {
		toSerialize["iso639_1"] = o.Iso6391.Get()
	}
	if o.Iso6392.IsSet() {
		toSerialize["iso639_2"] = o.Iso6392.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.LanguageNativeName.IsSet() {
		toSerialize["languageNativeName"] = o.LanguageNativeName.Get()
	}
	return toSerialize, nil
}

type NullableCountryLanguageDto struct {
	value *CountryLanguageDto
	isSet bool
}

func (v NullableCountryLanguageDto) Get() *CountryLanguageDto {
	return v.value
}

func (v *NullableCountryLanguageDto) Set(val *CountryLanguageDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryLanguageDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryLanguageDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryLanguageDto(val *CountryLanguageDto) *NullableCountryLanguageDto {
	return &NullableCountryLanguageDto{value: val, isSet: true}
}

func (v NullableCountryLanguageDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryLanguageDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


