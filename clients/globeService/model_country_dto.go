/*
GlobeService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the CountryDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryDto{}

// CountryDto struct for CountryDto
type CountryDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	Iso3 NullableString `json:"iso3,omitempty"`
	Iso2 NullableString `json:"iso2,omitempty"`
	Name NullableString `json:"name,omitempty"`
	NativeName NullableString `json:"nativeName,omitempty"`
	FlagUrl NullableString `json:"flagUrl,omitempty"`
}

// NewCountryDto instantiates a new CountryDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryDto() *CountryDto {
	this := CountryDto{}
	return &this
}

// NewCountryDtoWithDefaults instantiates a new CountryDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryDtoWithDefaults() *CountryDto {
	this := CountryDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CountryDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CountryDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CountryDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CountryDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CountryDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *CountryDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *CountryDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *CountryDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetIso3 returns the Iso3 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryDto) GetIso3() string {
	if o == nil || IsNil(o.Iso3.Get()) {
		var ret string
		return ret
	}
	return *o.Iso3.Get()
}

// GetIso3Ok returns a tuple with the Iso3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryDto) GetIso3Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Iso3.Get(), o.Iso3.IsSet()
}

// HasIso3 returns a boolean if a field has been set.
func (o *CountryDto) HasIso3() bool {
	if o != nil && o.Iso3.IsSet() {
		return true
	}

	return false
}

// SetIso3 gets a reference to the given NullableString and assigns it to the Iso3 field.
func (o *CountryDto) SetIso3(v string) {
	o.Iso3.Set(&v)
}
// SetIso3Nil sets the value for Iso3 to be an explicit nil
func (o *CountryDto) SetIso3Nil() {
	o.Iso3.Set(nil)
}

// UnsetIso3 ensures that no value is present for Iso3, not even an explicit nil
func (o *CountryDto) UnsetIso3() {
	o.Iso3.Unset()
}

// GetIso2 returns the Iso2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryDto) GetIso2() string {
	if o == nil || IsNil(o.Iso2.Get()) {
		var ret string
		return ret
	}
	return *o.Iso2.Get()
}

// GetIso2Ok returns a tuple with the Iso2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryDto) GetIso2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Iso2.Get(), o.Iso2.IsSet()
}

// HasIso2 returns a boolean if a field has been set.
func (o *CountryDto) HasIso2() bool {
	if o != nil && o.Iso2.IsSet() {
		return true
	}

	return false
}

// SetIso2 gets a reference to the given NullableString and assigns it to the Iso2 field.
func (o *CountryDto) SetIso2(v string) {
	o.Iso2.Set(&v)
}
// SetIso2Nil sets the value for Iso2 to be an explicit nil
func (o *CountryDto) SetIso2Nil() {
	o.Iso2.Set(nil)
}

// UnsetIso2 ensures that no value is present for Iso2, not even an explicit nil
func (o *CountryDto) UnsetIso2() {
	o.Iso2.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CountryDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CountryDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CountryDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CountryDto) UnsetName() {
	o.Name.Unset()
}

// GetNativeName returns the NativeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryDto) GetNativeName() string {
	if o == nil || IsNil(o.NativeName.Get()) {
		var ret string
		return ret
	}
	return *o.NativeName.Get()
}

// GetNativeNameOk returns a tuple with the NativeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryDto) GetNativeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NativeName.Get(), o.NativeName.IsSet()
}

// HasNativeName returns a boolean if a field has been set.
func (o *CountryDto) HasNativeName() bool {
	if o != nil && o.NativeName.IsSet() {
		return true
	}

	return false
}

// SetNativeName gets a reference to the given NullableString and assigns it to the NativeName field.
func (o *CountryDto) SetNativeName(v string) {
	o.NativeName.Set(&v)
}
// SetNativeNameNil sets the value for NativeName to be an explicit nil
func (o *CountryDto) SetNativeNameNil() {
	o.NativeName.Set(nil)
}

// UnsetNativeName ensures that no value is present for NativeName, not even an explicit nil
func (o *CountryDto) UnsetNativeName() {
	o.NativeName.Unset()
}

// GetFlagUrl returns the FlagUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CountryDto) GetFlagUrl() string {
	if o == nil || IsNil(o.FlagUrl.Get()) {
		var ret string
		return ret
	}
	return *o.FlagUrl.Get()
}

// GetFlagUrlOk returns a tuple with the FlagUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CountryDto) GetFlagUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlagUrl.Get(), o.FlagUrl.IsSet()
}

// HasFlagUrl returns a boolean if a field has been set.
func (o *CountryDto) HasFlagUrl() bool {
	if o != nil && o.FlagUrl.IsSet() {
		return true
	}

	return false
}

// SetFlagUrl gets a reference to the given NullableString and assigns it to the FlagUrl field.
func (o *CountryDto) SetFlagUrl(v string) {
	o.FlagUrl.Set(&v)
}
// SetFlagUrlNil sets the value for FlagUrl to be an explicit nil
func (o *CountryDto) SetFlagUrlNil() {
	o.FlagUrl.Set(nil)
}

// UnsetFlagUrl ensures that no value is present for FlagUrl, not even an explicit nil
func (o *CountryDto) UnsetFlagUrl() {
	o.FlagUrl.Unset()
}

func (o CountryDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Iso3.IsSet() {
		toSerialize["iso3"] = o.Iso3.Get()
	}
	if o.Iso2.IsSet() {
		toSerialize["iso2"] = o.Iso2.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NativeName.IsSet() {
		toSerialize["nativeName"] = o.NativeName.Get()
	}
	if o.FlagUrl.IsSet() {
		toSerialize["flagUrl"] = o.FlagUrl.Get()
	}
	return toSerialize, nil
}

type NullableCountryDto struct {
	value *CountryDto
	isSet bool
}

func (v NullableCountryDto) Get() *CountryDto {
	return v.value
}

func (v *NullableCountryDto) Set(val *CountryDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryDto(val *CountryDto) *NullableCountryDto {
	return &NullableCountryDto{value: val, isSet: true}
}

func (v NullableCountryDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


