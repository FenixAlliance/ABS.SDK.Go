/*
InvoicingService

Testing InvoicesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_InvoicesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesCountGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesDiscountsAggregatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesDiscountsAggregatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesExtendedCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesExtendedCountGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesExtendedGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesExtendedGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesGlobalSurchargesAggregatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsCountGet(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsGet(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceAdjustmentId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdDelete(context.Background(), invoiceId, invoiceAdjustmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceAdjustmentId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdGet(context.Background(), invoiceId, invoiceAdjustmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceAdjustmentId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsInvoiceAdjustmentIdPut(context.Background(), invoiceId, invoiceAdjustmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdAdjustmentsPost(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdCalculatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdCalculatePut(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdDelete(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdExtendedGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdExtendedGet(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdLinesCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdLinesCountGet(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdLinesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdLinesGet(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceLineId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdCalculatePut(context.Background(), invoiceId, invoiceLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceLineId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdDelete(context.Background(), invoiceId, invoiceLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceLineId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdGet(context.Background(), invoiceId, invoiceLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceLineId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdPut(context.Background(), invoiceId, invoiceLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceLineId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesCountGet(context.Background(), invoiceId, invoiceLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceLineId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesGet(context.Background(), invoiceId, invoiceLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceLineId string
		var invoiceLineTaxId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdDelete(context.Background(), invoiceId, invoiceLineId, invoiceLineTaxId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceLineId string
		var invoiceLineTaxId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesInvoiceLineTaxIdPut(context.Background(), invoiceId, invoiceLineId, invoiceLineTaxId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceLineId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdLinesInvoiceLineIdTaxesPost(context.Background(), invoiceId, invoiceLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdLinesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdLinesPost(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdPaymentsCountGet(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdPaymentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdPaymentsGet(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdPut(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdReferencesCountGet(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdReferencesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdReferencesGet(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceReferenceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdDelete(context.Background(), invoiceId, invoiceReferenceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceReferenceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdGet(context.Background(), invoiceId, invoiceReferenceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string
		var invoiceReferenceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdReferencesInvoiceReferenceIdPut(context.Background(), invoiceId, invoiceReferenceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesInvoiceIdReferencesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesInvoiceIdReferencesPost(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesTaxBasesAggregatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesTaxBasesAggregatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesTaxesAggregatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesTaxesAggregatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService ApiV2InvoicingServiceInvoicesTotalsAggregatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.InvoicesAPI.ApiV2InvoicingServiceInvoicesTotalsAggregatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InvoicesAPIService GetInvoiceAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var invoiceId string

		resp, httpRes, err := apiClient.InvoicesAPI.GetInvoiceAsync(context.Background(), invoiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
