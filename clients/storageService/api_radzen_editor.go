/*
StorageService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"os"
)


// RadzenEditorAPIService RadzenEditorAPI service
type RadzenEditorAPIService service

type ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest struct {
	ctx context.Context
	ApiService *RadzenEditorAPIService
	id int32
	tenantId *string
	apiVersion *string
	xApiVersion *string
	files []*os.File
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest) TenantId(tenantId string) ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest) ApiVersion(apiVersion string) ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest) XApiVersion(xApiVersion string) ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest) Files(files []*os.File) ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest {
	r.files = files
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV2StorageServiceRadzenEditorUploadsIdPostExecute(r)
}

/*
ApiV2StorageServiceRadzenEditorUploadsIdPost Method for ApiV2StorageServiceRadzenEditorUploadsIdPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest
*/
func (a *RadzenEditorAPIService) ApiV2StorageServiceRadzenEditorUploadsIdPost(ctx context.Context, id int32) ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest {
	return ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *RadzenEditorAPIService) ApiV2StorageServiceRadzenEditorUploadsIdPostExecute(r ApiApiV2StorageServiceRadzenEditorUploadsIdPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RadzenEditorAPIService.ApiV2StorageServiceRadzenEditorUploadsIdPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/StorageService/RadzenEditor/Uploads/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	var filesLocalVarFormFileName string
	var filesLocalVarFileName     string
	var filesLocalVarFileBytes    []byte

	filesLocalVarFormFileName = "files"
	filesLocalVarFile := r.files

	if filesLocalVarFile != nil {
		// loop through the array to prepare multiple files upload
		for _, filesLocalVarFileValue := range filesLocalVarFile {
			fbs, _ := io.ReadAll(filesLocalVarFileValue)

			filesLocalVarFileBytes = fbs
			filesLocalVarFileName = filesLocalVarFileValue.Name()
			filesLocalVarFileValue.Close()
			formFiles = append(formFiles, formFile{fileBytes: filesLocalVarFileBytes, fileName: filesLocalVarFileName, formFileName: filesLocalVarFormFileName})
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest struct {
	ctx context.Context
	ApiService *RadzenEditorAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
	file *os.File
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest) TenantId(tenantId string) ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest) ApiVersion(apiVersion string) ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest) XApiVersion(xApiVersion string) ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest) File(file *os.File) ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest {
	r.file = file
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV2StorageServiceRadzenEditorUploadsImagePostExecute(r)
}

/*
ApiV2StorageServiceRadzenEditorUploadsImagePost Method for ApiV2StorageServiceRadzenEditorUploadsImagePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest
*/
func (a *RadzenEditorAPIService) ApiV2StorageServiceRadzenEditorUploadsImagePost(ctx context.Context) ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest {
	return ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RadzenEditorAPIService) ApiV2StorageServiceRadzenEditorUploadsImagePostExecute(r ApiApiV2StorageServiceRadzenEditorUploadsImagePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RadzenEditorAPIService.ApiV2StorageServiceRadzenEditorUploadsImagePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/StorageService/RadzenEditor/Uploads/Image"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest struct {
	ctx context.Context
	ApiService *RadzenEditorAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
	files []*os.File
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest) TenantId(tenantId string) ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest) ApiVersion(apiVersion string) ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest) XApiVersion(xApiVersion string) ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest) Files(files []*os.File) ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest {
	r.files = files
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV2StorageServiceRadzenEditorUploadsMultiplePostExecute(r)
}

/*
ApiV2StorageServiceRadzenEditorUploadsMultiplePost Method for ApiV2StorageServiceRadzenEditorUploadsMultiplePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest
*/
func (a *RadzenEditorAPIService) ApiV2StorageServiceRadzenEditorUploadsMultiplePost(ctx context.Context) ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest {
	return ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RadzenEditorAPIService) ApiV2StorageServiceRadzenEditorUploadsMultiplePostExecute(r ApiApiV2StorageServiceRadzenEditorUploadsMultiplePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RadzenEditorAPIService.ApiV2StorageServiceRadzenEditorUploadsMultiplePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/StorageService/RadzenEditor/Uploads/Multiple"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	var filesLocalVarFormFileName string
	var filesLocalVarFileName     string
	var filesLocalVarFileBytes    []byte

	filesLocalVarFormFileName = "files"
	filesLocalVarFile := r.files

	if filesLocalVarFile != nil {
		// loop through the array to prepare multiple files upload
		for _, filesLocalVarFileValue := range filesLocalVarFile {
			fbs, _ := io.ReadAll(filesLocalVarFileValue)

			filesLocalVarFileBytes = fbs
			filesLocalVarFileName = filesLocalVarFileValue.Name()
			filesLocalVarFileValue.Close()
			formFiles = append(formFiles, formFile{fileBytes: filesLocalVarFileBytes, fileName: filesLocalVarFileName, formFileName: filesLocalVarFormFileName})
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest struct {
	ctx context.Context
	ApiService *RadzenEditorAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
	file *os.File
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest) TenantId(tenantId string) ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest) ApiVersion(apiVersion string) ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest) XApiVersion(xApiVersion string) ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest) File(file *os.File) ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest {
	r.file = file
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV2StorageServiceRadzenEditorUploadsSinglePostExecute(r)
}

/*
ApiV2StorageServiceRadzenEditorUploadsSinglePost Method for ApiV2StorageServiceRadzenEditorUploadsSinglePost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest
*/
func (a *RadzenEditorAPIService) ApiV2StorageServiceRadzenEditorUploadsSinglePost(ctx context.Context) ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest {
	return ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RadzenEditorAPIService) ApiV2StorageServiceRadzenEditorUploadsSinglePostExecute(r ApiApiV2StorageServiceRadzenEditorUploadsSinglePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RadzenEditorAPIService.ApiV2StorageServiceRadzenEditorUploadsSinglePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/StorageService/RadzenEditor/Uploads/Single"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest struct {
	ctx context.Context
	ApiService *RadzenEditorAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
	file *os.File
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest) TenantId(tenantId string) ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest) ApiVersion(apiVersion string) ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest) XApiVersion(xApiVersion string) ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest) File(file *os.File) ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest {
	r.file = file
	return r
}

func (r ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV2StorageServiceRadzenEditorUploadsSpecificPostExecute(r)
}

/*
ApiV2StorageServiceRadzenEditorUploadsSpecificPost Method for ApiV2StorageServiceRadzenEditorUploadsSpecificPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest
*/
func (a *RadzenEditorAPIService) ApiV2StorageServiceRadzenEditorUploadsSpecificPost(ctx context.Context) ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest {
	return ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *RadzenEditorAPIService) ApiV2StorageServiceRadzenEditorUploadsSpecificPostExecute(r ApiApiV2StorageServiceRadzenEditorUploadsSpecificPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RadzenEditorAPIService.ApiV2StorageServiceRadzenEditorUploadsSpecificPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/StorageService/RadzenEditor/Uploads/Specific"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
