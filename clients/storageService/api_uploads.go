/*
StorageService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"time"
)


// UploadsAPIService UploadsAPI service
type UploadsAPIService service

type ApiApiV2StorageServiceUploadsPostRequest struct {
	ctx context.Context
	ApiService *UploadsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
	notes *string
	title *string
	author *string
	isFolder *bool
	fileName *string
	abstract *string
	keyWords *string
	validResponse *bool
	parentFileUploadId *string
	filePath *string
	file *os.File
	iD *string
	timestamp *time.Time
}

func (r ApiApiV2StorageServiceUploadsPostRequest) TenantId(tenantId string) ApiApiV2StorageServiceUploadsPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) ApiVersion(apiVersion string) ApiApiV2StorageServiceUploadsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) XApiVersion(xApiVersion string) ApiApiV2StorageServiceUploadsPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) Notes(notes string) ApiApiV2StorageServiceUploadsPostRequest {
	r.notes = &notes
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) Title(title string) ApiApiV2StorageServiceUploadsPostRequest {
	r.title = &title
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) Author(author string) ApiApiV2StorageServiceUploadsPostRequest {
	r.author = &author
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) IsFolder(isFolder bool) ApiApiV2StorageServiceUploadsPostRequest {
	r.isFolder = &isFolder
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) FileName(fileName string) ApiApiV2StorageServiceUploadsPostRequest {
	r.fileName = &fileName
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) Abstract(abstract string) ApiApiV2StorageServiceUploadsPostRequest {
	r.abstract = &abstract
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) KeyWords(keyWords string) ApiApiV2StorageServiceUploadsPostRequest {
	r.keyWords = &keyWords
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) ValidResponse(validResponse bool) ApiApiV2StorageServiceUploadsPostRequest {
	r.validResponse = &validResponse
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) ParentFileUploadId(parentFileUploadId string) ApiApiV2StorageServiceUploadsPostRequest {
	r.parentFileUploadId = &parentFileUploadId
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) FilePath(filePath string) ApiApiV2StorageServiceUploadsPostRequest {
	r.filePath = &filePath
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) File(file *os.File) ApiApiV2StorageServiceUploadsPostRequest {
	r.file = file
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) ID(iD string) ApiApiV2StorageServiceUploadsPostRequest {
	r.iD = &iD
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) Timestamp(timestamp time.Time) ApiApiV2StorageServiceUploadsPostRequest {
	r.timestamp = &timestamp
	return r
}

func (r ApiApiV2StorageServiceUploadsPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2StorageServiceUploadsPostExecute(r)
}

/*
ApiV2StorageServiceUploadsPost Method for ApiV2StorageServiceUploadsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2StorageServiceUploadsPostRequest
*/
func (a *UploadsAPIService) ApiV2StorageServiceUploadsPost(ctx context.Context) ApiApiV2StorageServiceUploadsPostRequest {
	return ApiApiV2StorageServiceUploadsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *UploadsAPIService) ApiV2StorageServiceUploadsPostExecute(r ApiApiV2StorageServiceUploadsPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UploadsAPIService.ApiV2StorageServiceUploadsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/StorageService/Uploads"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.notes != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "notes", r.notes, "form", "")
	}
	if r.title != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "title", r.title, "form", "")
	}
	if r.author != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "author", r.author, "form", "")
	}
	if r.isFolder != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "isFolder", r.isFolder, "form", "")
	}
	if r.fileName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "fileName", r.fileName, "form", "")
	}
	if r.abstract != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "abstract", r.abstract, "form", "")
	}
	if r.keyWords != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "keyWords", r.keyWords, "form", "")
	}
	if r.validResponse != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "validResponse", r.validResponse, "form", "")
	}
	if r.parentFileUploadId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "parentFileUploadId", r.parentFileUploadId, "form", "")
	}
	if r.filePath != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "filePath", r.filePath, "form", "")
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.iD != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "iD", r.iD, "form", "")
	}
	if r.timestamp != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "timestamp", r.timestamp, "form", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
