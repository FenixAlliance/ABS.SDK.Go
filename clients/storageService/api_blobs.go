/*
StorageService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// BlobsAPIService BlobsAPI service
type BlobsAPIService service

type ApiGetBlobAsyncRequest struct {
	ctx context.Context
	ApiService *BlobsAPIService
	tenantId *string
	filePath *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiGetBlobAsyncRequest) TenantId(tenantId string) ApiGetBlobAsyncRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiGetBlobAsyncRequest) FilePath(filePath string) ApiGetBlobAsyncRequest {
	r.filePath = &filePath
	return r
}

func (r ApiGetBlobAsyncRequest) ApiVersion(apiVersion string) ApiGetBlobAsyncRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiGetBlobAsyncRequest) XApiVersion(xApiVersion string) ApiGetBlobAsyncRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiGetBlobAsyncRequest) Execute() (*BlobEnvelope, *http.Response, error) {
	return r.ApiService.GetBlobAsyncExecute(r)
}

/*
GetBlobAsync Method for GetBlobAsync

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBlobAsyncRequest
*/
func (a *BlobsAPIService) GetBlobAsync(ctx context.Context) ApiGetBlobAsyncRequest {
	return ApiGetBlobAsyncRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BlobEnvelope
func (a *BlobsAPIService) GetBlobAsyncExecute(r ApiGetBlobAsyncRequest) (*BlobEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlobEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlobsAPIService.GetBlobAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/StorageService/Blobs/Single"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.filePath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filePath", r.filePath, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "image/png"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetBlobsAsyncRequest struct {
	ctx context.Context
	ApiService *BlobsAPIService
	tenantId *string
	folderPath *string
	browseFilter *string
	filePrefix *string
	recurse *bool
	maxResults *int32
	includeAttributes *bool
	apiVersion *string
	xApiVersion *string
}

func (r ApiGetBlobsAsyncRequest) TenantId(tenantId string) ApiGetBlobsAsyncRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiGetBlobsAsyncRequest) FolderPath(folderPath string) ApiGetBlobsAsyncRequest {
	r.folderPath = &folderPath
	return r
}

func (r ApiGetBlobsAsyncRequest) BrowseFilter(browseFilter string) ApiGetBlobsAsyncRequest {
	r.browseFilter = &browseFilter
	return r
}

func (r ApiGetBlobsAsyncRequest) FilePrefix(filePrefix string) ApiGetBlobsAsyncRequest {
	r.filePrefix = &filePrefix
	return r
}

func (r ApiGetBlobsAsyncRequest) Recurse(recurse bool) ApiGetBlobsAsyncRequest {
	r.recurse = &recurse
	return r
}

func (r ApiGetBlobsAsyncRequest) MaxResults(maxResults int32) ApiGetBlobsAsyncRequest {
	r.maxResults = &maxResults
	return r
}

func (r ApiGetBlobsAsyncRequest) IncludeAttributes(includeAttributes bool) ApiGetBlobsAsyncRequest {
	r.includeAttributes = &includeAttributes
	return r
}

func (r ApiGetBlobsAsyncRequest) ApiVersion(apiVersion string) ApiGetBlobsAsyncRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiGetBlobsAsyncRequest) XApiVersion(xApiVersion string) ApiGetBlobsAsyncRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiGetBlobsAsyncRequest) Execute() (*BlobEnvelope, *http.Response, error) {
	return r.ApiService.GetBlobsAsyncExecute(r)
}

/*
GetBlobsAsync Method for GetBlobsAsync

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetBlobsAsyncRequest
*/
func (a *BlobsAPIService) GetBlobsAsync(ctx context.Context) ApiGetBlobsAsyncRequest {
	return ApiGetBlobsAsyncRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BlobEnvelope
func (a *BlobsAPIService) GetBlobsAsyncExecute(r ApiGetBlobsAsyncRequest) (*BlobEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BlobEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BlobsAPIService.GetBlobsAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/StorageService/Blobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.folderPath != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "folderPath", r.folderPath, "form", "")
	}
	if r.browseFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "browseFilter", r.browseFilter, "form", "")
	}
	if r.filePrefix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filePrefix", r.filePrefix, "form", "")
	}
	if r.recurse != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recurse", r.recurse, "form", "")
	}
	if r.maxResults != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "maxResults", r.maxResults, "form", "")
	}
	if r.includeAttributes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeAttributes", r.includeAttributes, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "image/png"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
