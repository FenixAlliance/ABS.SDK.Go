/*
StorageService

Testing AvatarsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_AvatarsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AvatarsAPIService GetAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var socialProfileId string

		resp, httpRes, err := apiClient.AvatarsAPI.GetAvatar(context.Background(), socialProfileId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsAPIService GetContactAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.AvatarsAPI.GetContactAvatar(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsAPIService GetCurrentUserAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AvatarsAPI.GetCurrentUserAvatar(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsAPIService GetTenantAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string

		resp, httpRes, err := apiClient.AvatarsAPI.GetTenantAvatar(context.Background(), tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsAPIService GetUserAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.AvatarsAPI.GetUserAvatar(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsAPIService UpdateContactAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.AvatarsAPI.UpdateContactAvatar(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsAPIService UpdateTenantAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string

		resp, httpRes, err := apiClient.AvatarsAPI.UpdateTenantAvatar(context.Background(), tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AvatarsAPIService UpdateUserAvatar", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AvatarsAPI.UpdateUserAvatar(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
