/*
MarketingService

Testing SocialPostBucketsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_SocialPostBucketsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SocialPostBucketsAPIService ApiV2MarketingServiceSocialPostBucketsCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SocialPostBucketsAPI.ApiV2MarketingServiceSocialPostBucketsCountGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SocialPostBucketsAPIService ApiV2MarketingServiceSocialPostBucketsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SocialPostBucketsAPI.ApiV2MarketingServiceSocialPostBucketsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SocialPostBucketsAPIService ApiV2MarketingServiceSocialPostBucketsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SocialPostBucketsAPI.ApiV2MarketingServiceSocialPostBucketsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SocialPostBucketsAPIService ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var socialpostbucketId string

		resp, httpRes, err := apiClient.SocialPostBucketsAPI.ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDelete(context.Background(), socialpostbucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SocialPostBucketsAPIService ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var socialpostbucketId string

		resp, httpRes, err := apiClient.SocialPostBucketsAPI.ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGet(context.Background(), socialpostbucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SocialPostBucketsAPIService ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var socialpostbucketId string

		resp, httpRes, err := apiClient.SocialPostBucketsAPI.ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPut(context.Background(), socialpostbucketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
