/*
MarketingService

Testing MarketingCampaignsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_MarketingCampaignsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MarketingCampaignsAPIService ApiV2MarketingServiceMarketingCampaignsCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MarketingCampaignsAPI.ApiV2MarketingServiceMarketingCampaignsCountGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingCampaignsAPIService ApiV2MarketingServiceMarketingCampaignsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.MarketingCampaignsAPI.ApiV2MarketingServiceMarketingCampaignsGet(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingCampaignsAPIService ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketingcampaignId string

		resp, httpRes, err := apiClient.MarketingCampaignsAPI.ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDelete(context.Background(), marketingcampaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingCampaignsAPIService ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketingcampaignId string

		resp, httpRes, err := apiClient.MarketingCampaignsAPI.ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGet(context.Background(), marketingcampaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingCampaignsAPIService ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var marketingcampaignId string

		resp, httpRes, err := apiClient.MarketingCampaignsAPI.ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPut(context.Background(), marketingcampaignId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MarketingCampaignsAPIService ApiV2MarketingServiceMarketingCampaignsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MarketingCampaignsAPI.ApiV2MarketingServiceMarketingCampaignsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
