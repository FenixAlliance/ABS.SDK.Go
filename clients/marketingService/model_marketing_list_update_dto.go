/*
MarketingService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the MarketingListUpdateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarketingListUpdateDto{}

// MarketingListUpdateDto struct for MarketingListUpdateDto
type MarketingListUpdateDto struct {
	Locked *bool `json:"locked,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Purpose NullableString `json:"purpose,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Source NullableString `json:"source,omitempty"`
	Cost *float64 `json:"cost,omitempty"`
	ModifiedOn *time.Time `json:"modifiedOn,omitempty"`
	LastUsedOn *time.Time `json:"lastUsedOn,omitempty"`
	CurrencyId NullableString `json:"currencyId,omitempty"`
	TenantId NullableString `json:"tenantId,omitempty"`
	EnrolmentId NullableString `json:"enrolmentId,omitempty"`
	MarketingListType *int32 `json:"marketingListType,omitempty"`
	MarketingListTarget *int32 `json:"marketingListTarget,omitempty"`
}

// NewMarketingListUpdateDto instantiates a new MarketingListUpdateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketingListUpdateDto() *MarketingListUpdateDto {
	this := MarketingListUpdateDto{}
	return &this
}

// NewMarketingListUpdateDtoWithDefaults instantiates a new MarketingListUpdateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketingListUpdateDtoWithDefaults() *MarketingListUpdateDto {
	this := MarketingListUpdateDto{}
	return &this
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *MarketingListUpdateDto) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketingListUpdateDto) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *MarketingListUpdateDto) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *MarketingListUpdateDto) SetLocked(v bool) {
	o.Locked = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MarketingListUpdateDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MarketingListUpdateDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MarketingListUpdateDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MarketingListUpdateDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MarketingListUpdateDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MarketingListUpdateDto) UnsetName() {
	o.Name.Unset()
}

// GetPurpose returns the Purpose field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MarketingListUpdateDto) GetPurpose() string {
	if o == nil || IsNil(o.Purpose.Get()) {
		var ret string
		return ret
	}
	return *o.Purpose.Get()
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MarketingListUpdateDto) GetPurposeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Purpose.Get(), o.Purpose.IsSet()
}

// HasPurpose returns a boolean if a field has been set.
func (o *MarketingListUpdateDto) HasPurpose() bool {
	if o != nil && o.Purpose.IsSet() {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given NullableString and assigns it to the Purpose field.
func (o *MarketingListUpdateDto) SetPurpose(v string) {
	o.Purpose.Set(&v)
}
// SetPurposeNil sets the value for Purpose to be an explicit nil
func (o *MarketingListUpdateDto) SetPurposeNil() {
	o.Purpose.Set(nil)
}

// UnsetPurpose ensures that no value is present for Purpose, not even an explicit nil
func (o *MarketingListUpdateDto) UnsetPurpose() {
	o.Purpose.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MarketingListUpdateDto) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MarketingListUpdateDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *MarketingListUpdateDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *MarketingListUpdateDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *MarketingListUpdateDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *MarketingListUpdateDto) UnsetDescription() {
	o.Description.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MarketingListUpdateDto) GetSource() string {
	if o == nil || IsNil(o.Source.Get()) {
		var ret string
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MarketingListUpdateDto) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *MarketingListUpdateDto) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableString and assigns it to the Source field.
func (o *MarketingListUpdateDto) SetSource(v string) {
	o.Source.Set(&v)
}
// SetSourceNil sets the value for Source to be an explicit nil
func (o *MarketingListUpdateDto) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *MarketingListUpdateDto) UnsetSource() {
	o.Source.Unset()
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *MarketingListUpdateDto) GetCost() float64 {
	if o == nil || IsNil(o.Cost) {
		var ret float64
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketingListUpdateDto) GetCostOk() (*float64, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *MarketingListUpdateDto) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given float64 and assigns it to the Cost field.
func (o *MarketingListUpdateDto) SetCost(v float64) {
	o.Cost = &v
}

// GetModifiedOn returns the ModifiedOn field value if set, zero value otherwise.
func (o *MarketingListUpdateDto) GetModifiedOn() time.Time {
	if o == nil || IsNil(o.ModifiedOn) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedOn
}

// GetModifiedOnOk returns a tuple with the ModifiedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketingListUpdateDto) GetModifiedOnOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModifiedOn) {
		return nil, false
	}
	return o.ModifiedOn, true
}

// HasModifiedOn returns a boolean if a field has been set.
func (o *MarketingListUpdateDto) HasModifiedOn() bool {
	if o != nil && !IsNil(o.ModifiedOn) {
		return true
	}

	return false
}

// SetModifiedOn gets a reference to the given time.Time and assigns it to the ModifiedOn field.
func (o *MarketingListUpdateDto) SetModifiedOn(v time.Time) {
	o.ModifiedOn = &v
}

// GetLastUsedOn returns the LastUsedOn field value if set, zero value otherwise.
func (o *MarketingListUpdateDto) GetLastUsedOn() time.Time {
	if o == nil || IsNil(o.LastUsedOn) {
		var ret time.Time
		return ret
	}
	return *o.LastUsedOn
}

// GetLastUsedOnOk returns a tuple with the LastUsedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketingListUpdateDto) GetLastUsedOnOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUsedOn) {
		return nil, false
	}
	return o.LastUsedOn, true
}

// HasLastUsedOn returns a boolean if a field has been set.
func (o *MarketingListUpdateDto) HasLastUsedOn() bool {
	if o != nil && !IsNil(o.LastUsedOn) {
		return true
	}

	return false
}

// SetLastUsedOn gets a reference to the given time.Time and assigns it to the LastUsedOn field.
func (o *MarketingListUpdateDto) SetLastUsedOn(v time.Time) {
	o.LastUsedOn = &v
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MarketingListUpdateDto) GetCurrencyId() string {
	if o == nil || IsNil(o.CurrencyId.Get()) {
		var ret string
		return ret
	}
	return *o.CurrencyId.Get()
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MarketingListUpdateDto) GetCurrencyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencyId.Get(), o.CurrencyId.IsSet()
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *MarketingListUpdateDto) HasCurrencyId() bool {
	if o != nil && o.CurrencyId.IsSet() {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given NullableString and assigns it to the CurrencyId field.
func (o *MarketingListUpdateDto) SetCurrencyId(v string) {
	o.CurrencyId.Set(&v)
}
// SetCurrencyIdNil sets the value for CurrencyId to be an explicit nil
func (o *MarketingListUpdateDto) SetCurrencyIdNil() {
	o.CurrencyId.Set(nil)
}

// UnsetCurrencyId ensures that no value is present for CurrencyId, not even an explicit nil
func (o *MarketingListUpdateDto) UnsetCurrencyId() {
	o.CurrencyId.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MarketingListUpdateDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MarketingListUpdateDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *MarketingListUpdateDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *MarketingListUpdateDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *MarketingListUpdateDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *MarketingListUpdateDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetEnrolmentId returns the EnrolmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MarketingListUpdateDto) GetEnrolmentId() string {
	if o == nil || IsNil(o.EnrolmentId.Get()) {
		var ret string
		return ret
	}
	return *o.EnrolmentId.Get()
}

// GetEnrolmentIdOk returns a tuple with the EnrolmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MarketingListUpdateDto) GetEnrolmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnrolmentId.Get(), o.EnrolmentId.IsSet()
}

// HasEnrolmentId returns a boolean if a field has been set.
func (o *MarketingListUpdateDto) HasEnrolmentId() bool {
	if o != nil && o.EnrolmentId.IsSet() {
		return true
	}

	return false
}

// SetEnrolmentId gets a reference to the given NullableString and assigns it to the EnrolmentId field.
func (o *MarketingListUpdateDto) SetEnrolmentId(v string) {
	o.EnrolmentId.Set(&v)
}
// SetEnrolmentIdNil sets the value for EnrolmentId to be an explicit nil
func (o *MarketingListUpdateDto) SetEnrolmentIdNil() {
	o.EnrolmentId.Set(nil)
}

// UnsetEnrolmentId ensures that no value is present for EnrolmentId, not even an explicit nil
func (o *MarketingListUpdateDto) UnsetEnrolmentId() {
	o.EnrolmentId.Unset()
}

// GetMarketingListType returns the MarketingListType field value if set, zero value otherwise.
func (o *MarketingListUpdateDto) GetMarketingListType() int32 {
	if o == nil || IsNil(o.MarketingListType) {
		var ret int32
		return ret
	}
	return *o.MarketingListType
}

// GetMarketingListTypeOk returns a tuple with the MarketingListType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketingListUpdateDto) GetMarketingListTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.MarketingListType) {
		return nil, false
	}
	return o.MarketingListType, true
}

// HasMarketingListType returns a boolean if a field has been set.
func (o *MarketingListUpdateDto) HasMarketingListType() bool {
	if o != nil && !IsNil(o.MarketingListType) {
		return true
	}

	return false
}

// SetMarketingListType gets a reference to the given int32 and assigns it to the MarketingListType field.
func (o *MarketingListUpdateDto) SetMarketingListType(v int32) {
	o.MarketingListType = &v
}

// GetMarketingListTarget returns the MarketingListTarget field value if set, zero value otherwise.
func (o *MarketingListUpdateDto) GetMarketingListTarget() int32 {
	if o == nil || IsNil(o.MarketingListTarget) {
		var ret int32
		return ret
	}
	return *o.MarketingListTarget
}

// GetMarketingListTargetOk returns a tuple with the MarketingListTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketingListUpdateDto) GetMarketingListTargetOk() (*int32, bool) {
	if o == nil || IsNil(o.MarketingListTarget) {
		return nil, false
	}
	return o.MarketingListTarget, true
}

// HasMarketingListTarget returns a boolean if a field has been set.
func (o *MarketingListUpdateDto) HasMarketingListTarget() bool {
	if o != nil && !IsNil(o.MarketingListTarget) {
		return true
	}

	return false
}

// SetMarketingListTarget gets a reference to the given int32 and assigns it to the MarketingListTarget field.
func (o *MarketingListUpdateDto) SetMarketingListTarget(v int32) {
	o.MarketingListTarget = &v
}

func (o MarketingListUpdateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarketingListUpdateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Purpose.IsSet() {
		toSerialize["purpose"] = o.Purpose.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Source.IsSet() {
		toSerialize["source"] = o.Source.Get()
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.ModifiedOn) {
		toSerialize["modifiedOn"] = o.ModifiedOn
	}
	if !IsNil(o.LastUsedOn) {
		toSerialize["lastUsedOn"] = o.LastUsedOn
	}
	if o.CurrencyId.IsSet() {
		toSerialize["currencyId"] = o.CurrencyId.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.EnrolmentId.IsSet() {
		toSerialize["enrolmentId"] = o.EnrolmentId.Get()
	}
	if !IsNil(o.MarketingListType) {
		toSerialize["marketingListType"] = o.MarketingListType
	}
	if !IsNil(o.MarketingListTarget) {
		toSerialize["marketingListTarget"] = o.MarketingListTarget
	}
	return toSerialize, nil
}

type NullableMarketingListUpdateDto struct {
	value *MarketingListUpdateDto
	isSet bool
}

func (v NullableMarketingListUpdateDto) Get() *MarketingListUpdateDto {
	return v.value
}

func (v *NullableMarketingListUpdateDto) Set(val *MarketingListUpdateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketingListUpdateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketingListUpdateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketingListUpdateDto(val *MarketingListUpdateDto) *NullableMarketingListUpdateDto {
	return &NullableMarketingListUpdateDto{value: val, isSet: true}
}

func (v NullableMarketingListUpdateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketingListUpdateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


