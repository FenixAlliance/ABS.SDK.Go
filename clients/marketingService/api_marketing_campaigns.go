/*
MarketingService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MarketingCampaignsAPIService MarketingCampaignsAPI service
type MarketingCampaignsAPIService service

type ApiApiV2MarketingServiceMarketingCampaignsCountGetRequest struct {
	ctx context.Context
	ApiService *MarketingCampaignsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceMarketingCampaignsCountGetRequest) TenantId(tenantId string) ApiApiV2MarketingServiceMarketingCampaignsCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsCountGetRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceMarketingCampaignsCountGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsCountGetRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceMarketingCampaignsCountGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceMarketingCampaignsCountGetExecute(r)
}

/*
ApiV2MarketingServiceMarketingCampaignsCountGet Method for ApiV2MarketingServiceMarketingCampaignsCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2MarketingServiceMarketingCampaignsCountGetRequest
*/
func (a *MarketingCampaignsAPIService) ApiV2MarketingServiceMarketingCampaignsCountGet(ctx context.Context) ApiApiV2MarketingServiceMarketingCampaignsCountGetRequest {
	return ApiApiV2MarketingServiceMarketingCampaignsCountGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *MarketingCampaignsAPIService) ApiV2MarketingServiceMarketingCampaignsCountGetExecute(r ApiApiV2MarketingServiceMarketingCampaignsCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingCampaignsAPIService.ApiV2MarketingServiceMarketingCampaignsCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/MarketingCampaigns/Count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceMarketingCampaignsGetRequest struct {
	ctx context.Context
	ApiService *MarketingCampaignsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceMarketingCampaignsGetRequest) TenantId(tenantId string) ApiApiV2MarketingServiceMarketingCampaignsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsGetRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceMarketingCampaignsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsGetRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceMarketingCampaignsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsGetRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceMarketingCampaignsGetExecute(r)
}

/*
ApiV2MarketingServiceMarketingCampaignsGet Method for ApiV2MarketingServiceMarketingCampaignsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2MarketingServiceMarketingCampaignsGetRequest
*/
func (a *MarketingCampaignsAPIService) ApiV2MarketingServiceMarketingCampaignsGet(ctx context.Context) ApiApiV2MarketingServiceMarketingCampaignsGetRequest {
	return ApiApiV2MarketingServiceMarketingCampaignsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MarketingCampaignsAPIService) ApiV2MarketingServiceMarketingCampaignsGetExecute(r ApiApiV2MarketingServiceMarketingCampaignsGetRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingCampaignsAPIService.ApiV2MarketingServiceMarketingCampaignsGet")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/MarketingCampaigns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteRequest struct {
	ctx context.Context
	ApiService *MarketingCampaignsAPIService
	tenantId *string
	marketingcampaignId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteRequest) TenantId(tenantId string) ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteExecute(r)
}

/*
ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDelete Method for ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param marketingcampaignId
 @return ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteRequest
*/
func (a *MarketingCampaignsAPIService) ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDelete(ctx context.Context, marketingcampaignId string) ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteRequest {
	return ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		marketingcampaignId: marketingcampaignId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *MarketingCampaignsAPIService) ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteExecute(r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingCampaignsAPIService.ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/MarketingCampaigns/{marketingcampaignId}"
	localVarPath = strings.Replace(localVarPath, "{"+"marketingcampaignId"+"}", url.PathEscape(parameterValueToString(r.marketingcampaignId, "marketingcampaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetRequest struct {
	ctx context.Context
	ApiService *MarketingCampaignsAPIService
	tenantId *string
	marketingcampaignId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetRequest) TenantId(tenantId string) ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetRequest) Execute() (*MarketingCampaignDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetExecute(r)
}

/*
ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGet Method for ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param marketingcampaignId
 @return ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetRequest
*/
func (a *MarketingCampaignsAPIService) ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGet(ctx context.Context, marketingcampaignId string) ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetRequest {
	return ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetRequest{
		ApiService: a,
		ctx: ctx,
		marketingcampaignId: marketingcampaignId,
	}
}

// Execute executes the request
//  @return MarketingCampaignDtoEnvelope
func (a *MarketingCampaignsAPIService) ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetExecute(r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGetRequest) (*MarketingCampaignDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarketingCampaignDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingCampaignsAPIService.ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/MarketingCampaigns/{marketingcampaignId}"
	localVarPath = strings.Replace(localVarPath, "{"+"marketingcampaignId"+"}", url.PathEscape(parameterValueToString(r.marketingcampaignId, "marketingcampaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest struct {
	ctx context.Context
	ApiService *MarketingCampaignsAPIService
	tenantId *string
	marketingcampaignId string
	marketingCampaignUpdateDto *MarketingCampaignUpdateDto
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest) TenantId(tenantId string) ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest) MarketingCampaignUpdateDto(marketingCampaignUpdateDto MarketingCampaignUpdateDto) ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest {
	r.marketingCampaignUpdateDto = &marketingCampaignUpdateDto
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutExecute(r)
}

/*
ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPut Method for ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param marketingcampaignId
 @return ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest
*/
func (a *MarketingCampaignsAPIService) ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPut(ctx context.Context, marketingcampaignId string) ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest {
	return ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest{
		ApiService: a,
		ctx: ctx,
		marketingcampaignId: marketingcampaignId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *MarketingCampaignsAPIService) ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutExecute(r ApiApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingCampaignsAPIService.ApiV2MarketingServiceMarketingCampaignsMarketingcampaignIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/MarketingCampaigns/{marketingcampaignId}"
	localVarPath = strings.Replace(localVarPath, "{"+"marketingcampaignId"+"}", url.PathEscape(parameterValueToString(r.marketingcampaignId, "marketingcampaignId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}
	if r.marketingCampaignUpdateDto == nil {
		return localVarReturnValue, nil, reportError("marketingCampaignUpdateDto is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.marketingCampaignUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceMarketingCampaignsPostRequest struct {
	ctx context.Context
	ApiService *MarketingCampaignsAPIService
	tenantId *string
	marketingCampaignCreateDto *MarketingCampaignCreateDto
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceMarketingCampaignsPostRequest) TenantId(tenantId string) ApiApiV2MarketingServiceMarketingCampaignsPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsPostRequest) MarketingCampaignCreateDto(marketingCampaignCreateDto MarketingCampaignCreateDto) ApiApiV2MarketingServiceMarketingCampaignsPostRequest {
	r.marketingCampaignCreateDto = &marketingCampaignCreateDto
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsPostRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceMarketingCampaignsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsPostRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceMarketingCampaignsPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceMarketingCampaignsPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceMarketingCampaignsPostExecute(r)
}

/*
ApiV2MarketingServiceMarketingCampaignsPost Method for ApiV2MarketingServiceMarketingCampaignsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2MarketingServiceMarketingCampaignsPostRequest
*/
func (a *MarketingCampaignsAPIService) ApiV2MarketingServiceMarketingCampaignsPost(ctx context.Context) ApiApiV2MarketingServiceMarketingCampaignsPostRequest {
	return ApiApiV2MarketingServiceMarketingCampaignsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *MarketingCampaignsAPIService) ApiV2MarketingServiceMarketingCampaignsPostExecute(r ApiApiV2MarketingServiceMarketingCampaignsPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingCampaignsAPIService.ApiV2MarketingServiceMarketingCampaignsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/MarketingCampaigns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}
	if r.marketingCampaignCreateDto == nil {
		return localVarReturnValue, nil, reportError("marketingCampaignCreateDto is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.marketingCampaignCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
