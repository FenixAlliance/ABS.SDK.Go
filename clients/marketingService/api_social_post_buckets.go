/*
MarketingService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SocialPostBucketsAPIService SocialPostBucketsAPI service
type SocialPostBucketsAPIService service

type ApiApiV2MarketingServiceSocialPostBucketsCountGetRequest struct {
	ctx context.Context
	ApiService *SocialPostBucketsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceSocialPostBucketsCountGetRequest) TenantId(tenantId string) ApiApiV2MarketingServiceSocialPostBucketsCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsCountGetRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceSocialPostBucketsCountGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsCountGetRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceSocialPostBucketsCountGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceSocialPostBucketsCountGetExecute(r)
}

/*
ApiV2MarketingServiceSocialPostBucketsCountGet Method for ApiV2MarketingServiceSocialPostBucketsCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2MarketingServiceSocialPostBucketsCountGetRequest
*/
func (a *SocialPostBucketsAPIService) ApiV2MarketingServiceSocialPostBucketsCountGet(ctx context.Context) ApiApiV2MarketingServiceSocialPostBucketsCountGetRequest {
	return ApiApiV2MarketingServiceSocialPostBucketsCountGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *SocialPostBucketsAPIService) ApiV2MarketingServiceSocialPostBucketsCountGetExecute(r ApiApiV2MarketingServiceSocialPostBucketsCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialPostBucketsAPIService.ApiV2MarketingServiceSocialPostBucketsCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/SocialPostBuckets/Count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceSocialPostBucketsGetRequest struct {
	ctx context.Context
	ApiService *SocialPostBucketsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceSocialPostBucketsGetRequest) TenantId(tenantId string) ApiApiV2MarketingServiceSocialPostBucketsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsGetRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceSocialPostBucketsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsGetRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceSocialPostBucketsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsGetRequest) Execute() (*SocialPostBucketDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceSocialPostBucketsGetExecute(r)
}

/*
ApiV2MarketingServiceSocialPostBucketsGet Method for ApiV2MarketingServiceSocialPostBucketsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2MarketingServiceSocialPostBucketsGetRequest
*/
func (a *SocialPostBucketsAPIService) ApiV2MarketingServiceSocialPostBucketsGet(ctx context.Context) ApiApiV2MarketingServiceSocialPostBucketsGetRequest {
	return ApiApiV2MarketingServiceSocialPostBucketsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SocialPostBucketDtoListEnvelope
func (a *SocialPostBucketsAPIService) ApiV2MarketingServiceSocialPostBucketsGetExecute(r ApiApiV2MarketingServiceSocialPostBucketsGetRequest) (*SocialPostBucketDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SocialPostBucketDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialPostBucketsAPIService.ApiV2MarketingServiceSocialPostBucketsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/SocialPostBuckets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceSocialPostBucketsPostRequest struct {
	ctx context.Context
	ApiService *SocialPostBucketsAPIService
	tenantId *string
	socialPostBucketCreateDto *SocialPostBucketCreateDto
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceSocialPostBucketsPostRequest) TenantId(tenantId string) ApiApiV2MarketingServiceSocialPostBucketsPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsPostRequest) SocialPostBucketCreateDto(socialPostBucketCreateDto SocialPostBucketCreateDto) ApiApiV2MarketingServiceSocialPostBucketsPostRequest {
	r.socialPostBucketCreateDto = &socialPostBucketCreateDto
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsPostRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceSocialPostBucketsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsPostRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceSocialPostBucketsPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceSocialPostBucketsPostExecute(r)
}

/*
ApiV2MarketingServiceSocialPostBucketsPost Method for ApiV2MarketingServiceSocialPostBucketsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2MarketingServiceSocialPostBucketsPostRequest
*/
func (a *SocialPostBucketsAPIService) ApiV2MarketingServiceSocialPostBucketsPost(ctx context.Context) ApiApiV2MarketingServiceSocialPostBucketsPostRequest {
	return ApiApiV2MarketingServiceSocialPostBucketsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SocialPostBucketsAPIService) ApiV2MarketingServiceSocialPostBucketsPostExecute(r ApiApiV2MarketingServiceSocialPostBucketsPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialPostBucketsAPIService.ApiV2MarketingServiceSocialPostBucketsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/SocialPostBuckets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}
	if r.socialPostBucketCreateDto == nil {
		return localVarReturnValue, nil, reportError("socialPostBucketCreateDto is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.socialPostBucketCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteRequest struct {
	ctx context.Context
	ApiService *SocialPostBucketsAPIService
	tenantId *string
	socialpostbucketId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteRequest) TenantId(tenantId string) ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteExecute(r)
}

/*
ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDelete Method for ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param socialpostbucketId
 @return ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteRequest
*/
func (a *SocialPostBucketsAPIService) ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDelete(ctx context.Context, socialpostbucketId string) ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteRequest {
	return ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		socialpostbucketId: socialpostbucketId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SocialPostBucketsAPIService) ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteExecute(r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialPostBucketsAPIService.ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/SocialPostBuckets/{socialpostbucketId}"
	localVarPath = strings.Replace(localVarPath, "{"+"socialpostbucketId"+"}", url.PathEscape(parameterValueToString(r.socialpostbucketId, "socialpostbucketId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetRequest struct {
	ctx context.Context
	ApiService *SocialPostBucketsAPIService
	tenantId *string
	socialpostbucketId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetRequest) TenantId(tenantId string) ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetRequest) Execute() (*SocialPostBucketDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetExecute(r)
}

/*
ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGet Method for ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param socialpostbucketId
 @return ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetRequest
*/
func (a *SocialPostBucketsAPIService) ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGet(ctx context.Context, socialpostbucketId string) ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetRequest {
	return ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetRequest{
		ApiService: a,
		ctx: ctx,
		socialpostbucketId: socialpostbucketId,
	}
}

// Execute executes the request
//  @return SocialPostBucketDtoEnvelope
func (a *SocialPostBucketsAPIService) ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetExecute(r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGetRequest) (*SocialPostBucketDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SocialPostBucketDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialPostBucketsAPIService.ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/SocialPostBuckets/{socialpostbucketId}"
	localVarPath = strings.Replace(localVarPath, "{"+"socialpostbucketId"+"}", url.PathEscape(parameterValueToString(r.socialpostbucketId, "socialpostbucketId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest struct {
	ctx context.Context
	ApiService *SocialPostBucketsAPIService
	tenantId *string
	socialpostbucketId string
	socialPostBucketUpdateDto *SocialPostBucketUpdateDto
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest) TenantId(tenantId string) ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest) SocialPostBucketUpdateDto(socialPostBucketUpdateDto SocialPostBucketUpdateDto) ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest {
	r.socialPostBucketUpdateDto = &socialPostBucketUpdateDto
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutExecute(r)
}

/*
ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPut Method for ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param socialpostbucketId
 @return ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest
*/
func (a *SocialPostBucketsAPIService) ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPut(ctx context.Context, socialpostbucketId string) ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest {
	return ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest{
		ApiService: a,
		ctx: ctx,
		socialpostbucketId: socialpostbucketId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SocialPostBucketsAPIService) ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutExecute(r ApiApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SocialPostBucketsAPIService.ApiV2MarketingServiceSocialPostBucketsSocialpostbucketIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/SocialPostBuckets/{socialpostbucketId}"
	localVarPath = strings.Replace(localVarPath, "{"+"socialpostbucketId"+"}", url.PathEscape(parameterValueToString(r.socialpostbucketId, "socialpostbucketId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}
	if r.socialPostBucketUpdateDto == nil {
		return localVarReturnValue, nil, reportError("socialPostBucketUpdateDto is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.socialPostBucketUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
