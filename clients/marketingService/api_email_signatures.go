/*
MarketingService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EmailSignaturesAPIService EmailSignaturesAPI service
type EmailSignaturesAPIService service

type ApiApiV2MarketingServiceEmailSignaturesCountGetRequest struct {
	ctx context.Context
	ApiService *EmailSignaturesAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceEmailSignaturesCountGetRequest) TenantId(tenantId string) ApiApiV2MarketingServiceEmailSignaturesCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesCountGetRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceEmailSignaturesCountGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesCountGetRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceEmailSignaturesCountGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceEmailSignaturesCountGetExecute(r)
}

/*
ApiV2MarketingServiceEmailSignaturesCountGet Method for ApiV2MarketingServiceEmailSignaturesCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2MarketingServiceEmailSignaturesCountGetRequest
*/
func (a *EmailSignaturesAPIService) ApiV2MarketingServiceEmailSignaturesCountGet(ctx context.Context) ApiApiV2MarketingServiceEmailSignaturesCountGetRequest {
	return ApiApiV2MarketingServiceEmailSignaturesCountGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *EmailSignaturesAPIService) ApiV2MarketingServiceEmailSignaturesCountGetExecute(r ApiApiV2MarketingServiceEmailSignaturesCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailSignaturesAPIService.ApiV2MarketingServiceEmailSignaturesCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/EmailSignatures/Count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteRequest struct {
	ctx context.Context
	ApiService *EmailSignaturesAPIService
	tenantId *string
	emailsignatureId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteRequest) TenantId(tenantId string) ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteExecute(r)
}

/*
ApiV2MarketingServiceEmailSignaturesEmailsignatureIdDelete Method for ApiV2MarketingServiceEmailSignaturesEmailsignatureIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailsignatureId
 @return ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteRequest
*/
func (a *EmailSignaturesAPIService) ApiV2MarketingServiceEmailSignaturesEmailsignatureIdDelete(ctx context.Context, emailsignatureId string) ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteRequest {
	return ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		emailsignatureId: emailsignatureId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *EmailSignaturesAPIService) ApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteExecute(r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailSignaturesAPIService.ApiV2MarketingServiceEmailSignaturesEmailsignatureIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/EmailSignatures/{emailsignatureId}"
	localVarPath = strings.Replace(localVarPath, "{"+"emailsignatureId"+"}", url.PathEscape(parameterValueToString(r.emailsignatureId, "emailsignatureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetRequest struct {
	ctx context.Context
	ApiService *EmailSignaturesAPIService
	tenantId *string
	emailsignatureId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetRequest) TenantId(tenantId string) ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetRequest) Execute() (*EmailSignatureDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetExecute(r)
}

/*
ApiV2MarketingServiceEmailSignaturesEmailsignatureIdGet Method for ApiV2MarketingServiceEmailSignaturesEmailsignatureIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailsignatureId
 @return ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetRequest
*/
func (a *EmailSignaturesAPIService) ApiV2MarketingServiceEmailSignaturesEmailsignatureIdGet(ctx context.Context, emailsignatureId string) ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetRequest {
	return ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetRequest{
		ApiService: a,
		ctx: ctx,
		emailsignatureId: emailsignatureId,
	}
}

// Execute executes the request
//  @return EmailSignatureDtoEnvelope
func (a *EmailSignaturesAPIService) ApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetExecute(r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdGetRequest) (*EmailSignatureDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailSignatureDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailSignaturesAPIService.ApiV2MarketingServiceEmailSignaturesEmailsignatureIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/EmailSignatures/{emailsignatureId}"
	localVarPath = strings.Replace(localVarPath, "{"+"emailsignatureId"+"}", url.PathEscape(parameterValueToString(r.emailsignatureId, "emailsignatureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest struct {
	ctx context.Context
	ApiService *EmailSignaturesAPIService
	tenantId *string
	emailsignatureId string
	emailSignatureUpdateDto *EmailSignatureUpdateDto
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest) TenantId(tenantId string) ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest) EmailSignatureUpdateDto(emailSignatureUpdateDto EmailSignatureUpdateDto) ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest {
	r.emailSignatureUpdateDto = &emailSignatureUpdateDto
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutExecute(r)
}

/*
ApiV2MarketingServiceEmailSignaturesEmailsignatureIdPut Method for ApiV2MarketingServiceEmailSignaturesEmailsignatureIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param emailsignatureId
 @return ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest
*/
func (a *EmailSignaturesAPIService) ApiV2MarketingServiceEmailSignaturesEmailsignatureIdPut(ctx context.Context, emailsignatureId string) ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest {
	return ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest{
		ApiService: a,
		ctx: ctx,
		emailsignatureId: emailsignatureId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *EmailSignaturesAPIService) ApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutExecute(r ApiApiV2MarketingServiceEmailSignaturesEmailsignatureIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailSignaturesAPIService.ApiV2MarketingServiceEmailSignaturesEmailsignatureIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/EmailSignatures/{emailsignatureId}"
	localVarPath = strings.Replace(localVarPath, "{"+"emailsignatureId"+"}", url.PathEscape(parameterValueToString(r.emailsignatureId, "emailsignatureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}
	if r.emailSignatureUpdateDto == nil {
		return localVarReturnValue, nil, reportError("emailSignatureUpdateDto is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.emailSignatureUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceEmailSignaturesGetRequest struct {
	ctx context.Context
	ApiService *EmailSignaturesAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceEmailSignaturesGetRequest) TenantId(tenantId string) ApiApiV2MarketingServiceEmailSignaturesGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesGetRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceEmailSignaturesGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesGetRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceEmailSignaturesGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesGetRequest) Execute() (*EmailSignatureDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceEmailSignaturesGetExecute(r)
}

/*
ApiV2MarketingServiceEmailSignaturesGet Method for ApiV2MarketingServiceEmailSignaturesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2MarketingServiceEmailSignaturesGetRequest
*/
func (a *EmailSignaturesAPIService) ApiV2MarketingServiceEmailSignaturesGet(ctx context.Context) ApiApiV2MarketingServiceEmailSignaturesGetRequest {
	return ApiApiV2MarketingServiceEmailSignaturesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmailSignatureDtoListEnvelope
func (a *EmailSignaturesAPIService) ApiV2MarketingServiceEmailSignaturesGetExecute(r ApiApiV2MarketingServiceEmailSignaturesGetRequest) (*EmailSignatureDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailSignatureDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailSignaturesAPIService.ApiV2MarketingServiceEmailSignaturesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/EmailSignatures"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2MarketingServiceEmailSignaturesPostRequest struct {
	ctx context.Context
	ApiService *EmailSignaturesAPIService
	tenantId *string
	emailSignatureCreateDto *EmailSignatureCreateDto
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2MarketingServiceEmailSignaturesPostRequest) TenantId(tenantId string) ApiApiV2MarketingServiceEmailSignaturesPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesPostRequest) EmailSignatureCreateDto(emailSignatureCreateDto EmailSignatureCreateDto) ApiApiV2MarketingServiceEmailSignaturesPostRequest {
	r.emailSignatureCreateDto = &emailSignatureCreateDto
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesPostRequest) ApiVersion(apiVersion string) ApiApiV2MarketingServiceEmailSignaturesPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesPostRequest) XApiVersion(xApiVersion string) ApiApiV2MarketingServiceEmailSignaturesPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2MarketingServiceEmailSignaturesPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2MarketingServiceEmailSignaturesPostExecute(r)
}

/*
ApiV2MarketingServiceEmailSignaturesPost Method for ApiV2MarketingServiceEmailSignaturesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2MarketingServiceEmailSignaturesPostRequest
*/
func (a *EmailSignaturesAPIService) ApiV2MarketingServiceEmailSignaturesPost(ctx context.Context) ApiApiV2MarketingServiceEmailSignaturesPostRequest {
	return ApiApiV2MarketingServiceEmailSignaturesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *EmailSignaturesAPIService) ApiV2MarketingServiceEmailSignaturesPostExecute(r ApiApiV2MarketingServiceEmailSignaturesPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailSignaturesAPIService.ApiV2MarketingServiceEmailSignaturesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/MarketingService/EmailSignatures"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}
	if r.emailSignatureCreateDto == nil {
		return localVarReturnValue, nil, reportError("emailSignatureCreateDto is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.emailSignatureCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
