/*
ProjectsService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ProjectTaskUpdateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectTaskUpdateDto{}

// ProjectTaskUpdateDto struct for ProjectTaskUpdateDto
type ProjectTaskUpdateDto struct {
	StartDate *time.Time `json:"startDate,omitempty"`
	DueLine *time.Time `json:"dueLine,omitempty"`
}

// NewProjectTaskUpdateDto instantiates a new ProjectTaskUpdateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectTaskUpdateDto() *ProjectTaskUpdateDto {
	this := ProjectTaskUpdateDto{}
	return &this
}

// NewProjectTaskUpdateDtoWithDefaults instantiates a new ProjectTaskUpdateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectTaskUpdateDtoWithDefaults() *ProjectTaskUpdateDto {
	this := ProjectTaskUpdateDto{}
	return &this
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ProjectTaskUpdateDto) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTaskUpdateDto) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ProjectTaskUpdateDto) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *ProjectTaskUpdateDto) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetDueLine returns the DueLine field value if set, zero value otherwise.
func (o *ProjectTaskUpdateDto) GetDueLine() time.Time {
	if o == nil || IsNil(o.DueLine) {
		var ret time.Time
		return ret
	}
	return *o.DueLine
}

// GetDueLineOk returns a tuple with the DueLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTaskUpdateDto) GetDueLineOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueLine) {
		return nil, false
	}
	return o.DueLine, true
}

// HasDueLine returns a boolean if a field has been set.
func (o *ProjectTaskUpdateDto) HasDueLine() bool {
	if o != nil && !IsNil(o.DueLine) {
		return true
	}

	return false
}

// SetDueLine gets a reference to the given time.Time and assigns it to the DueLine field.
func (o *ProjectTaskUpdateDto) SetDueLine(v time.Time) {
	o.DueLine = &v
}

func (o ProjectTaskUpdateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectTaskUpdateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.DueLine) {
		toSerialize["dueLine"] = o.DueLine
	}
	return toSerialize, nil
}

type NullableProjectTaskUpdateDto struct {
	value *ProjectTaskUpdateDto
	isSet bool
}

func (v NullableProjectTaskUpdateDto) Get() *ProjectTaskUpdateDto {
	return v.value
}

func (v *NullableProjectTaskUpdateDto) Set(val *ProjectTaskUpdateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectTaskUpdateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectTaskUpdateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectTaskUpdateDto(val *ProjectTaskUpdateDto) *NullableProjectTaskUpdateDto {
	return &NullableProjectTaskUpdateDto{value: val, isSet: true}
}

func (v NullableProjectTaskUpdateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectTaskUpdateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


