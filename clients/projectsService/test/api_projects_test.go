/*
ProjectsService

Testing ProjectsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ProjectsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsCountGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdDelete(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdPeriodsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdPeriodsGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdPeriodsProjectPeriodIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var projectPeriodId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdPeriodsProjectPeriodIdDelete(context.Background(), projectId, projectPeriodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdPeriodsProjectPeriodIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var projectPeriodId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdPeriodsProjectPeriodIdPut(context.Background(), projectId, projectPeriodId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdPut(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdTaskCategoriesCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdTaskCategoriesCountGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdTaskCategoriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdTaskCategoriesGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdTasksCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdTasksCountGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdTasksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdTasksGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdTasksPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdTasksPost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdTasksProjectTaskIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var projectTaskId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdTasksProjectTaskIdDelete(context.Background(), projectId, projectTaskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdTasksProjectTaskIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string
		var projectTaskId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdTasksProjectTaskIdPut(context.Background(), projectId, projectTaskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdTimeLogsCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdTimeLogsCountGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsAPIService ApiV2ProjectsServiceProjectsProjectIdTimeLogsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectsAPI.ApiV2ProjectsServiceProjectsProjectIdTimeLogsGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
