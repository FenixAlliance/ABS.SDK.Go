/*
ProjectsService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ProjectPeriodUpdateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectPeriodUpdateDto{}

// ProjectPeriodUpdateDto struct for ProjectPeriodUpdateDto
type ProjectPeriodUpdateDto struct {
	PeriodStartDate *time.Time `json:"periodStartDate,omitempty"`
	PeriodEndDate *time.Time `json:"periodEndDate,omitempty"`
}

// NewProjectPeriodUpdateDto instantiates a new ProjectPeriodUpdateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectPeriodUpdateDto() *ProjectPeriodUpdateDto {
	this := ProjectPeriodUpdateDto{}
	return &this
}

// NewProjectPeriodUpdateDtoWithDefaults instantiates a new ProjectPeriodUpdateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectPeriodUpdateDtoWithDefaults() *ProjectPeriodUpdateDto {
	this := ProjectPeriodUpdateDto{}
	return &this
}

// GetPeriodStartDate returns the PeriodStartDate field value if set, zero value otherwise.
func (o *ProjectPeriodUpdateDto) GetPeriodStartDate() time.Time {
	if o == nil || IsNil(o.PeriodStartDate) {
		var ret time.Time
		return ret
	}
	return *o.PeriodStartDate
}

// GetPeriodStartDateOk returns a tuple with the PeriodStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPeriodUpdateDto) GetPeriodStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PeriodStartDate) {
		return nil, false
	}
	return o.PeriodStartDate, true
}

// HasPeriodStartDate returns a boolean if a field has been set.
func (o *ProjectPeriodUpdateDto) HasPeriodStartDate() bool {
	if o != nil && !IsNil(o.PeriodStartDate) {
		return true
	}

	return false
}

// SetPeriodStartDate gets a reference to the given time.Time and assigns it to the PeriodStartDate field.
func (o *ProjectPeriodUpdateDto) SetPeriodStartDate(v time.Time) {
	o.PeriodStartDate = &v
}

// GetPeriodEndDate returns the PeriodEndDate field value if set, zero value otherwise.
func (o *ProjectPeriodUpdateDto) GetPeriodEndDate() time.Time {
	if o == nil || IsNil(o.PeriodEndDate) {
		var ret time.Time
		return ret
	}
	return *o.PeriodEndDate
}

// GetPeriodEndDateOk returns a tuple with the PeriodEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectPeriodUpdateDto) GetPeriodEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.PeriodEndDate) {
		return nil, false
	}
	return o.PeriodEndDate, true
}

// HasPeriodEndDate returns a boolean if a field has been set.
func (o *ProjectPeriodUpdateDto) HasPeriodEndDate() bool {
	if o != nil && !IsNil(o.PeriodEndDate) {
		return true
	}

	return false
}

// SetPeriodEndDate gets a reference to the given time.Time and assigns it to the PeriodEndDate field.
func (o *ProjectPeriodUpdateDto) SetPeriodEndDate(v time.Time) {
	o.PeriodEndDate = &v
}

func (o ProjectPeriodUpdateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectPeriodUpdateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PeriodStartDate) {
		toSerialize["periodStartDate"] = o.PeriodStartDate
	}
	if !IsNil(o.PeriodEndDate) {
		toSerialize["periodEndDate"] = o.PeriodEndDate
	}
	return toSerialize, nil
}

type NullableProjectPeriodUpdateDto struct {
	value *ProjectPeriodUpdateDto
	isSet bool
}

func (v NullableProjectPeriodUpdateDto) Get() *ProjectPeriodUpdateDto {
	return v.value
}

func (v *NullableProjectPeriodUpdateDto) Set(val *ProjectPeriodUpdateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectPeriodUpdateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectPeriodUpdateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectPeriodUpdateDto(val *ProjectPeriodUpdateDto) *NullableProjectPeriodUpdateDto {
	return &NullableProjectPeriodUpdateDto{value: val, isSet: true}
}

func (v NullableProjectPeriodUpdateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectPeriodUpdateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


