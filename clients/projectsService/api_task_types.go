/*
ProjectsService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TaskTypesAPIService TaskTypesAPI service
type TaskTypesAPIService service

type ApiApiV2ProjectsServiceTaskTypesPostRequest struct {
	ctx context.Context
	ApiService *TaskTypesAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
	taskTypeCreateDto *TaskTypeCreateDto
}

func (r ApiApiV2ProjectsServiceTaskTypesPostRequest) TenantId(tenantId string) ApiApiV2ProjectsServiceTaskTypesPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesPostRequest) ApiVersion(apiVersion string) ApiApiV2ProjectsServiceTaskTypesPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesPostRequest) XApiVersion(xApiVersion string) ApiApiV2ProjectsServiceTaskTypesPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesPostRequest) TaskTypeCreateDto(taskTypeCreateDto TaskTypeCreateDto) ApiApiV2ProjectsServiceTaskTypesPostRequest {
	r.taskTypeCreateDto = &taskTypeCreateDto
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesPostRequest) Execute() (*TaskTypeDto, *http.Response, error) {
	return r.ApiService.ApiV2ProjectsServiceTaskTypesPostExecute(r)
}

/*
ApiV2ProjectsServiceTaskTypesPost Method for ApiV2ProjectsServiceTaskTypesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2ProjectsServiceTaskTypesPostRequest
*/
func (a *TaskTypesAPIService) ApiV2ProjectsServiceTaskTypesPost(ctx context.Context) ApiApiV2ProjectsServiceTaskTypesPostRequest {
	return ApiApiV2ProjectsServiceTaskTypesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TaskTypeDto
func (a *TaskTypesAPIService) ApiV2ProjectsServiceTaskTypesPostExecute(r ApiApiV2ProjectsServiceTaskTypesPostRequest) (*TaskTypeDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskTypeDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskTypesAPIService.ApiV2ProjectsServiceTaskTypesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/ProjectsService/TaskTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.taskTypeCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteRequest struct {
	ctx context.Context
	ApiService *TaskTypesAPIService
	taskTypeId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteRequest) TenantId(tenantId string) ApiApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteRequest) Execute() (*TaskTypeDto, *http.Response, error) {
	return r.ApiService.ApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteExecute(r)
}

/*
ApiV2ProjectsServiceTaskTypesTaskTypeIdDelete Method for ApiV2ProjectsServiceTaskTypesTaskTypeIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskTypeId
 @return ApiApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteRequest
*/
func (a *TaskTypesAPIService) ApiV2ProjectsServiceTaskTypesTaskTypeIdDelete(ctx context.Context, taskTypeId string) ApiApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteRequest {
	return ApiApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		taskTypeId: taskTypeId,
	}
}

// Execute executes the request
//  @return TaskTypeDto
func (a *TaskTypesAPIService) ApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteExecute(r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdDeleteRequest) (*TaskTypeDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskTypeDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskTypesAPIService.ApiV2ProjectsServiceTaskTypesTaskTypeIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/ProjectsService/TaskTypes/{taskTypeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taskTypeId"+"}", url.PathEscape(parameterValueToString(r.taskTypeId, "taskTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2ProjectsServiceTaskTypesTaskTypeIdGetRequest struct {
	ctx context.Context
	ApiService *TaskTypesAPIService
	taskTypeId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdGetRequest) TenantId(tenantId string) ApiApiV2ProjectsServiceTaskTypesTaskTypeIdGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdGetRequest) ApiVersion(apiVersion string) ApiApiV2ProjectsServiceTaskTypesTaskTypeIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2ProjectsServiceTaskTypesTaskTypeIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdGetRequest) Execute() (*TaskTypeDto, *http.Response, error) {
	return r.ApiService.ApiV2ProjectsServiceTaskTypesTaskTypeIdGetExecute(r)
}

/*
ApiV2ProjectsServiceTaskTypesTaskTypeIdGet Method for ApiV2ProjectsServiceTaskTypesTaskTypeIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskTypeId
 @return ApiApiV2ProjectsServiceTaskTypesTaskTypeIdGetRequest
*/
func (a *TaskTypesAPIService) ApiV2ProjectsServiceTaskTypesTaskTypeIdGet(ctx context.Context, taskTypeId string) ApiApiV2ProjectsServiceTaskTypesTaskTypeIdGetRequest {
	return ApiApiV2ProjectsServiceTaskTypesTaskTypeIdGetRequest{
		ApiService: a,
		ctx: ctx,
		taskTypeId: taskTypeId,
	}
}

// Execute executes the request
//  @return TaskTypeDto
func (a *TaskTypesAPIService) ApiV2ProjectsServiceTaskTypesTaskTypeIdGetExecute(r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdGetRequest) (*TaskTypeDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskTypeDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskTypesAPIService.ApiV2ProjectsServiceTaskTypesTaskTypeIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/ProjectsService/TaskTypes/{taskTypeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taskTypeId"+"}", url.PathEscape(parameterValueToString(r.taskTypeId, "taskTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest struct {
	ctx context.Context
	ApiService *TaskTypesAPIService
	taskTypeId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
	taskTypeUpdateDto *TaskTypeUpdateDto
}

func (r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest) TenantId(tenantId string) ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest) ApiVersion(apiVersion string) ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest) TaskTypeUpdateDto(taskTypeUpdateDto TaskTypeUpdateDto) ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest {
	r.taskTypeUpdateDto = &taskTypeUpdateDto
	return r
}

func (r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest) Execute() (*TaskTypeDto, *http.Response, error) {
	return r.ApiService.ApiV2ProjectsServiceTaskTypesTaskTypeIdPutExecute(r)
}

/*
ApiV2ProjectsServiceTaskTypesTaskTypeIdPut Method for ApiV2ProjectsServiceTaskTypesTaskTypeIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskTypeId
 @return ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest
*/
func (a *TaskTypesAPIService) ApiV2ProjectsServiceTaskTypesTaskTypeIdPut(ctx context.Context, taskTypeId string) ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest {
	return ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest{
		ApiService: a,
		ctx: ctx,
		taskTypeId: taskTypeId,
	}
}

// Execute executes the request
//  @return TaskTypeDto
func (a *TaskTypesAPIService) ApiV2ProjectsServiceTaskTypesTaskTypeIdPutExecute(r ApiApiV2ProjectsServiceTaskTypesTaskTypeIdPutRequest) (*TaskTypeDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskTypeDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskTypesAPIService.ApiV2ProjectsServiceTaskTypesTaskTypeIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/ProjectsService/TaskTypes/{taskTypeId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taskTypeId"+"}", url.PathEscape(parameterValueToString(r.taskTypeId, "taskTypeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.taskTypeUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
