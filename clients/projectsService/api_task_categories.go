/*
ProjectsService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TaskCategoriesAPIService TaskCategoriesAPI service
type TaskCategoriesAPIService service

type ApiApiV2ProjectsServiceTaskCategoriesGetRequest struct {
	ctx context.Context
	ApiService *TaskCategoriesAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2ProjectsServiceTaskCategoriesGetRequest) TenantId(tenantId string) ApiApiV2ProjectsServiceTaskCategoriesGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesGetRequest) ApiVersion(apiVersion string) ApiApiV2ProjectsServiceTaskCategoriesGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesGetRequest) XApiVersion(xApiVersion string) ApiApiV2ProjectsServiceTaskCategoriesGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesGetRequest) Execute() (*TaskCategoryDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2ProjectsServiceTaskCategoriesGetExecute(r)
}

/*
ApiV2ProjectsServiceTaskCategoriesGet Method for ApiV2ProjectsServiceTaskCategoriesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2ProjectsServiceTaskCategoriesGetRequest
*/
func (a *TaskCategoriesAPIService) ApiV2ProjectsServiceTaskCategoriesGet(ctx context.Context) ApiApiV2ProjectsServiceTaskCategoriesGetRequest {
	return ApiApiV2ProjectsServiceTaskCategoriesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TaskCategoryDtoListEnvelope
func (a *TaskCategoriesAPIService) ApiV2ProjectsServiceTaskCategoriesGetExecute(r ApiApiV2ProjectsServiceTaskCategoriesGetRequest) (*TaskCategoryDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskCategoryDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskCategoriesAPIService.ApiV2ProjectsServiceTaskCategoriesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/ProjectsService/TaskCategories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2ProjectsServiceTaskCategoriesPostRequest struct {
	ctx context.Context
	ApiService *TaskCategoriesAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
	taskCategoryCreateDto *TaskCategoryCreateDto
}

func (r ApiApiV2ProjectsServiceTaskCategoriesPostRequest) TenantId(tenantId string) ApiApiV2ProjectsServiceTaskCategoriesPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesPostRequest) ApiVersion(apiVersion string) ApiApiV2ProjectsServiceTaskCategoriesPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesPostRequest) XApiVersion(xApiVersion string) ApiApiV2ProjectsServiceTaskCategoriesPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesPostRequest) TaskCategoryCreateDto(taskCategoryCreateDto TaskCategoryCreateDto) ApiApiV2ProjectsServiceTaskCategoriesPostRequest {
	r.taskCategoryCreateDto = &taskCategoryCreateDto
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesPostRequest) Execute() (*TaskCategoryDto, *http.Response, error) {
	return r.ApiService.ApiV2ProjectsServiceTaskCategoriesPostExecute(r)
}

/*
ApiV2ProjectsServiceTaskCategoriesPost Method for ApiV2ProjectsServiceTaskCategoriesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2ProjectsServiceTaskCategoriesPostRequest
*/
func (a *TaskCategoriesAPIService) ApiV2ProjectsServiceTaskCategoriesPost(ctx context.Context) ApiApiV2ProjectsServiceTaskCategoriesPostRequest {
	return ApiApiV2ProjectsServiceTaskCategoriesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TaskCategoryDto
func (a *TaskCategoriesAPIService) ApiV2ProjectsServiceTaskCategoriesPostExecute(r ApiApiV2ProjectsServiceTaskCategoriesPostRequest) (*TaskCategoryDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskCategoryDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskCategoriesAPIService.ApiV2ProjectsServiceTaskCategoriesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/ProjectsService/TaskCategories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.taskCategoryCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteRequest struct {
	ctx context.Context
	ApiService *TaskCategoriesAPIService
	taskCategoryId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteRequest) TenantId(tenantId string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteRequest) Execute() (*TaskCategoryDto, *http.Response, error) {
	return r.ApiService.ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteExecute(r)
}

/*
ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDelete Method for ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskCategoryId
 @return ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteRequest
*/
func (a *TaskCategoriesAPIService) ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDelete(ctx context.Context, taskCategoryId string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteRequest {
	return ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		taskCategoryId: taskCategoryId,
	}
}

// Execute executes the request
//  @return TaskCategoryDto
func (a *TaskCategoriesAPIService) ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteExecute(r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDeleteRequest) (*TaskCategoryDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskCategoryDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskCategoriesAPIService.ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/ProjectsService/TaskCategories/{taskCategoryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taskCategoryId"+"}", url.PathEscape(parameterValueToString(r.taskCategoryId, "taskCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetRequest struct {
	ctx context.Context
	ApiService *TaskCategoriesAPIService
	taskCategoryId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetRequest) TenantId(tenantId string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetRequest) ApiVersion(apiVersion string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetRequest) Execute() (*TaskCategoryDto, *http.Response, error) {
	return r.ApiService.ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetExecute(r)
}

/*
ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGet Method for ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskCategoryId
 @return ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetRequest
*/
func (a *TaskCategoriesAPIService) ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGet(ctx context.Context, taskCategoryId string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetRequest {
	return ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetRequest{
		ApiService: a,
		ctx: ctx,
		taskCategoryId: taskCategoryId,
	}
}

// Execute executes the request
//  @return TaskCategoryDto
func (a *TaskCategoriesAPIService) ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetExecute(r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGetRequest) (*TaskCategoryDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskCategoryDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskCategoriesAPIService.ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/ProjectsService/TaskCategories/{taskCategoryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taskCategoryId"+"}", url.PathEscape(parameterValueToString(r.taskCategoryId, "taskCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest struct {
	ctx context.Context
	ApiService *TaskCategoriesAPIService
	taskCategoryId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
	taskCategoryUpdateDto *TaskCategoryUpdateDto
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest) TenantId(tenantId string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest) ApiVersion(apiVersion string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest) TaskCategoryUpdateDto(taskCategoryUpdateDto TaskCategoryUpdateDto) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest {
	r.taskCategoryUpdateDto = &taskCategoryUpdateDto
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest) Execute() (*TaskCategoryDto, *http.Response, error) {
	return r.ApiService.ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutExecute(r)
}

/*
ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPut Method for ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskCategoryId
 @return ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest
*/
func (a *TaskCategoriesAPIService) ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPut(ctx context.Context, taskCategoryId string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest {
	return ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest{
		ApiService: a,
		ctx: ctx,
		taskCategoryId: taskCategoryId,
	}
}

// Execute executes the request
//  @return TaskCategoryDto
func (a *TaskCategoriesAPIService) ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutExecute(r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPutRequest) (*TaskCategoryDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskCategoryDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskCategoriesAPIService.ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/ProjectsService/TaskCategories/{taskCategoryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"taskCategoryId"+"}", url.PathEscape(parameterValueToString(r.taskCategoryId, "taskCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.taskCategoryUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetRequest struct {
	ctx context.Context
	ApiService *TaskCategoriesAPIService
	taskCategoryId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetRequest) TenantId(tenantId string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetRequest) ApiVersion(apiVersion string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetRequest) XApiVersion(xApiVersion string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetRequest) Execute() (*TaskCategoryDto, *http.Response, error) {
	return r.ApiService.ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetExecute(r)
}

/*
ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGet Method for ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taskCategoryId
 @return ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetRequest
*/
func (a *TaskCategoriesAPIService) ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGet(ctx context.Context, taskCategoryId string) ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetRequest {
	return ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetRequest{
		ApiService: a,
		ctx: ctx,
		taskCategoryId: taskCategoryId,
	}
}

// Execute executes the request
//  @return TaskCategoryDto
func (a *TaskCategoriesAPIService) ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetExecute(r ApiApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGetRequest) (*TaskCategoryDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaskCategoryDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskCategoriesAPIService.ApiV2ProjectsServiceTaskCategoriesTaskCategoryIdTypesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/ProjectsService/TaskCategories/{taskCategoryId}/Types"
	localVarPath = strings.Replace(localVarPath, "{"+"taskCategoryId"+"}", url.PathEscape(parameterValueToString(r.taskCategoryId, "taskCategoryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
