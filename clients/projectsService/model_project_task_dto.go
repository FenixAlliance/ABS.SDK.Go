/*
ProjectsService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ProjectTaskDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectTaskDto{}

// ProjectTaskDto struct for ProjectTaskDto
type ProjectTaskDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	StartDate *time.Time `json:"startDate,omitempty"`
	DueLine *time.Time `json:"dueLine,omitempty"`
	ProjectID NullableString `json:"projectID,omitempty"`
	ProjectTaskBucketID NullableString `json:"projectTaskBucketID,omitempty"`
}

// NewProjectTaskDto instantiates a new ProjectTaskDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectTaskDto() *ProjectTaskDto {
	this := ProjectTaskDto{}
	return &this
}

// NewProjectTaskDtoWithDefaults instantiates a new ProjectTaskDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectTaskDtoWithDefaults() *ProjectTaskDto {
	this := ProjectTaskDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTaskDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTaskDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ProjectTaskDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ProjectTaskDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ProjectTaskDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ProjectTaskDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTaskDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTaskDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ProjectTaskDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *ProjectTaskDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *ProjectTaskDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *ProjectTaskDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ProjectTaskDto) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTaskDto) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ProjectTaskDto) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *ProjectTaskDto) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetDueLine returns the DueLine field value if set, zero value otherwise.
func (o *ProjectTaskDto) GetDueLine() time.Time {
	if o == nil || IsNil(o.DueLine) {
		var ret time.Time
		return ret
	}
	return *o.DueLine
}

// GetDueLineOk returns a tuple with the DueLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTaskDto) GetDueLineOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueLine) {
		return nil, false
	}
	return o.DueLine, true
}

// HasDueLine returns a boolean if a field has been set.
func (o *ProjectTaskDto) HasDueLine() bool {
	if o != nil && !IsNil(o.DueLine) {
		return true
	}

	return false
}

// SetDueLine gets a reference to the given time.Time and assigns it to the DueLine field.
func (o *ProjectTaskDto) SetDueLine(v time.Time) {
	o.DueLine = &v
}

// GetProjectID returns the ProjectID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTaskDto) GetProjectID() string {
	if o == nil || IsNil(o.ProjectID.Get()) {
		var ret string
		return ret
	}
	return *o.ProjectID.Get()
}

// GetProjectIDOk returns a tuple with the ProjectID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTaskDto) GetProjectIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectID.Get(), o.ProjectID.IsSet()
}

// HasProjectID returns a boolean if a field has been set.
func (o *ProjectTaskDto) HasProjectID() bool {
	if o != nil && o.ProjectID.IsSet() {
		return true
	}

	return false
}

// SetProjectID gets a reference to the given NullableString and assigns it to the ProjectID field.
func (o *ProjectTaskDto) SetProjectID(v string) {
	o.ProjectID.Set(&v)
}
// SetProjectIDNil sets the value for ProjectID to be an explicit nil
func (o *ProjectTaskDto) SetProjectIDNil() {
	o.ProjectID.Set(nil)
}

// UnsetProjectID ensures that no value is present for ProjectID, not even an explicit nil
func (o *ProjectTaskDto) UnsetProjectID() {
	o.ProjectID.Unset()
}

// GetProjectTaskBucketID returns the ProjectTaskBucketID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTaskDto) GetProjectTaskBucketID() string {
	if o == nil || IsNil(o.ProjectTaskBucketID.Get()) {
		var ret string
		return ret
	}
	return *o.ProjectTaskBucketID.Get()
}

// GetProjectTaskBucketIDOk returns a tuple with the ProjectTaskBucketID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTaskDto) GetProjectTaskBucketIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectTaskBucketID.Get(), o.ProjectTaskBucketID.IsSet()
}

// HasProjectTaskBucketID returns a boolean if a field has been set.
func (o *ProjectTaskDto) HasProjectTaskBucketID() bool {
	if o != nil && o.ProjectTaskBucketID.IsSet() {
		return true
	}

	return false
}

// SetProjectTaskBucketID gets a reference to the given NullableString and assigns it to the ProjectTaskBucketID field.
func (o *ProjectTaskDto) SetProjectTaskBucketID(v string) {
	o.ProjectTaskBucketID.Set(&v)
}
// SetProjectTaskBucketIDNil sets the value for ProjectTaskBucketID to be an explicit nil
func (o *ProjectTaskDto) SetProjectTaskBucketIDNil() {
	o.ProjectTaskBucketID.Set(nil)
}

// UnsetProjectTaskBucketID ensures that no value is present for ProjectTaskBucketID, not even an explicit nil
func (o *ProjectTaskDto) UnsetProjectTaskBucketID() {
	o.ProjectTaskBucketID.Unset()
}

func (o ProjectTaskDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectTaskDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.DueLine) {
		toSerialize["dueLine"] = o.DueLine
	}
	if o.ProjectID.IsSet() {
		toSerialize["projectID"] = o.ProjectID.Get()
	}
	if o.ProjectTaskBucketID.IsSet() {
		toSerialize["projectTaskBucketID"] = o.ProjectTaskBucketID.Get()
	}
	return toSerialize, nil
}

type NullableProjectTaskDto struct {
	value *ProjectTaskDto
	isSet bool
}

func (v NullableProjectTaskDto) Get() *ProjectTaskDto {
	return v.value
}

func (v *NullableProjectTaskDto) Set(val *ProjectTaskDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectTaskDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectTaskDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectTaskDto(val *ProjectTaskDto) *NullableProjectTaskDto {
	return &NullableProjectTaskDto{value: val, isSet: true}
}

func (v NullableProjectTaskDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectTaskDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


