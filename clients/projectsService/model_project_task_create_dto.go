/*
ProjectsService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ProjectTaskCreateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectTaskCreateDto{}

// ProjectTaskCreateDto struct for ProjectTaskCreateDto
type ProjectTaskCreateDto struct {
	Id *string `json:"id,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Title NullableString `json:"title,omitempty"`
	Description NullableString `json:"description,omitempty"`
	StartDate *time.Time `json:"startDate,omitempty"`
	DueLine *time.Time `json:"dueLine,omitempty"`
	ProjectID NullableString `json:"projectID,omitempty"`
}

// NewProjectTaskCreateDto instantiates a new ProjectTaskCreateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectTaskCreateDto() *ProjectTaskCreateDto {
	this := ProjectTaskCreateDto{}
	return &this
}

// NewProjectTaskCreateDtoWithDefaults instantiates a new ProjectTaskCreateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectTaskCreateDtoWithDefaults() *ProjectTaskCreateDto {
	this := ProjectTaskCreateDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProjectTaskCreateDto) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTaskCreateDto) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProjectTaskCreateDto) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProjectTaskCreateDto) SetId(v string) {
	o.Id = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ProjectTaskCreateDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTaskCreateDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ProjectTaskCreateDto) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *ProjectTaskCreateDto) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTaskCreateDto) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTaskCreateDto) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *ProjectTaskCreateDto) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *ProjectTaskCreateDto) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *ProjectTaskCreateDto) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *ProjectTaskCreateDto) UnsetTitle() {
	o.Title.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTaskCreateDto) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTaskCreateDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ProjectTaskCreateDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ProjectTaskCreateDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ProjectTaskCreateDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ProjectTaskCreateDto) UnsetDescription() {
	o.Description.Unset()
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ProjectTaskCreateDto) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTaskCreateDto) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ProjectTaskCreateDto) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *ProjectTaskCreateDto) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetDueLine returns the DueLine field value if set, zero value otherwise.
func (o *ProjectTaskCreateDto) GetDueLine() time.Time {
	if o == nil || IsNil(o.DueLine) {
		var ret time.Time
		return ret
	}
	return *o.DueLine
}

// GetDueLineOk returns a tuple with the DueLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectTaskCreateDto) GetDueLineOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DueLine) {
		return nil, false
	}
	return o.DueLine, true
}

// HasDueLine returns a boolean if a field has been set.
func (o *ProjectTaskCreateDto) HasDueLine() bool {
	if o != nil && !IsNil(o.DueLine) {
		return true
	}

	return false
}

// SetDueLine gets a reference to the given time.Time and assigns it to the DueLine field.
func (o *ProjectTaskCreateDto) SetDueLine(v time.Time) {
	o.DueLine = &v
}

// GetProjectID returns the ProjectID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProjectTaskCreateDto) GetProjectID() string {
	if o == nil || IsNil(o.ProjectID.Get()) {
		var ret string
		return ret
	}
	return *o.ProjectID.Get()
}

// GetProjectIDOk returns a tuple with the ProjectID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProjectTaskCreateDto) GetProjectIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectID.Get(), o.ProjectID.IsSet()
}

// HasProjectID returns a boolean if a field has been set.
func (o *ProjectTaskCreateDto) HasProjectID() bool {
	if o != nil && o.ProjectID.IsSet() {
		return true
	}

	return false
}

// SetProjectID gets a reference to the given NullableString and assigns it to the ProjectID field.
func (o *ProjectTaskCreateDto) SetProjectID(v string) {
	o.ProjectID.Set(&v)
}
// SetProjectIDNil sets the value for ProjectID to be an explicit nil
func (o *ProjectTaskCreateDto) SetProjectIDNil() {
	o.ProjectID.Set(nil)
}

// UnsetProjectID ensures that no value is present for ProjectID, not even an explicit nil
func (o *ProjectTaskCreateDto) UnsetProjectID() {
	o.ProjectID.Unset()
}

func (o ProjectTaskCreateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectTaskCreateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.DueLine) {
		toSerialize["dueLine"] = o.DueLine
	}
	if o.ProjectID.IsSet() {
		toSerialize["projectID"] = o.ProjectID.Get()
	}
	return toSerialize, nil
}

type NullableProjectTaskCreateDto struct {
	value *ProjectTaskCreateDto
	isSet bool
}

func (v NullableProjectTaskCreateDto) Get() *ProjectTaskCreateDto {
	return v.value
}

func (v *NullableProjectTaskCreateDto) Set(val *ProjectTaskCreateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectTaskCreateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectTaskCreateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectTaskCreateDto(val *ProjectTaskCreateDto) *NullableProjectTaskCreateDto {
	return &NullableProjectTaskCreateDto{value: val, isSet: true}
}

func (v NullableProjectTaskCreateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectTaskCreateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


