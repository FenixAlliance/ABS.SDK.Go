/*
QuotesService

Testing QuotesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_QuotesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesCountGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesExtendedGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesExtendedGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesQuoteIdCalculatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var quoteId string

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesQuoteIdCalculatePut(context.Background(), quoteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesQuoteIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var quoteId string

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesQuoteIdDelete(context.Background(), quoteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesQuoteIdLinesCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var quoteId string

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesQuoteIdLinesCountGet(context.Background(), quoteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesQuoteIdLinesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var quoteId string

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesQuoteIdLinesGet(context.Background(), quoteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesQuoteIdLinesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var quoteId string

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesQuoteIdLinesPost(context.Background(), quoteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var quoteId string
		var quoteLineId string

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdCalculatePut(context.Background(), quoteId, quoteLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var quoteId string
		var quoteLineId string

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdDelete(context.Background(), quoteId, quoteLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var quoteId string
		var quoteLineId string

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdGet(context.Background(), quoteId, quoteLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var quoteId string
		var quoteLineId string

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesQuoteIdLinesQuoteLineIdPut(context.Background(), quoteId, quoteLineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService ApiV2QuotesServiceQuotesQuoteIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var quoteId string

		resp, httpRes, err := apiClient.QuotesAPI.ApiV2QuotesServiceQuotesQuoteIdPut(context.Background(), quoteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QuotesAPIService GetQuoteAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var quoteId string

		resp, httpRes, err := apiClient.QuotesAPI.GetQuoteAsync(context.Background(), quoteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
