/*
HolderService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FollowRecordDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FollowRecordDto{}

// FollowRecordDto struct for FollowRecordDto
type FollowRecordDto struct {
	Id NullableString `json:"id,omitempty"`
	Type NullableString `json:"type,omitempty"`
	FollowerID NullableString `json:"followerID,omitempty"`
	FollowedID NullableString `json:"followedID,omitempty"`
	Alerts *bool `json:"alerts,omitempty"`
}

// NewFollowRecordDto instantiates a new FollowRecordDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFollowRecordDto() *FollowRecordDto {
	this := FollowRecordDto{}
	return &this
}

// NewFollowRecordDtoWithDefaults instantiates a new FollowRecordDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFollowRecordDtoWithDefaults() *FollowRecordDto {
	this := FollowRecordDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FollowRecordDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FollowRecordDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *FollowRecordDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *FollowRecordDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *FollowRecordDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *FollowRecordDto) UnsetId() {
	o.Id.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FollowRecordDto) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FollowRecordDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *FollowRecordDto) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *FollowRecordDto) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *FollowRecordDto) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *FollowRecordDto) UnsetType() {
	o.Type.Unset()
}

// GetFollowerID returns the FollowerID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FollowRecordDto) GetFollowerID() string {
	if o == nil || IsNil(o.FollowerID.Get()) {
		var ret string
		return ret
	}
	return *o.FollowerID.Get()
}

// GetFollowerIDOk returns a tuple with the FollowerID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FollowRecordDto) GetFollowerIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FollowerID.Get(), o.FollowerID.IsSet()
}

// HasFollowerID returns a boolean if a field has been set.
func (o *FollowRecordDto) HasFollowerID() bool {
	if o != nil && o.FollowerID.IsSet() {
		return true
	}

	return false
}

// SetFollowerID gets a reference to the given NullableString and assigns it to the FollowerID field.
func (o *FollowRecordDto) SetFollowerID(v string) {
	o.FollowerID.Set(&v)
}
// SetFollowerIDNil sets the value for FollowerID to be an explicit nil
func (o *FollowRecordDto) SetFollowerIDNil() {
	o.FollowerID.Set(nil)
}

// UnsetFollowerID ensures that no value is present for FollowerID, not even an explicit nil
func (o *FollowRecordDto) UnsetFollowerID() {
	o.FollowerID.Unset()
}

// GetFollowedID returns the FollowedID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FollowRecordDto) GetFollowedID() string {
	if o == nil || IsNil(o.FollowedID.Get()) {
		var ret string
		return ret
	}
	return *o.FollowedID.Get()
}

// GetFollowedIDOk returns a tuple with the FollowedID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FollowRecordDto) GetFollowedIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FollowedID.Get(), o.FollowedID.IsSet()
}

// HasFollowedID returns a boolean if a field has been set.
func (o *FollowRecordDto) HasFollowedID() bool {
	if o != nil && o.FollowedID.IsSet() {
		return true
	}

	return false
}

// SetFollowedID gets a reference to the given NullableString and assigns it to the FollowedID field.
func (o *FollowRecordDto) SetFollowedID(v string) {
	o.FollowedID.Set(&v)
}
// SetFollowedIDNil sets the value for FollowedID to be an explicit nil
func (o *FollowRecordDto) SetFollowedIDNil() {
	o.FollowedID.Set(nil)
}

// UnsetFollowedID ensures that no value is present for FollowedID, not even an explicit nil
func (o *FollowRecordDto) UnsetFollowedID() {
	o.FollowedID.Unset()
}

// GetAlerts returns the Alerts field value if set, zero value otherwise.
func (o *FollowRecordDto) GetAlerts() bool {
	if o == nil || IsNil(o.Alerts) {
		var ret bool
		return ret
	}
	return *o.Alerts
}

// GetAlertsOk returns a tuple with the Alerts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FollowRecordDto) GetAlertsOk() (*bool, bool) {
	if o == nil || IsNil(o.Alerts) {
		return nil, false
	}
	return o.Alerts, true
}

// HasAlerts returns a boolean if a field has been set.
func (o *FollowRecordDto) HasAlerts() bool {
	if o != nil && !IsNil(o.Alerts) {
		return true
	}

	return false
}

// SetAlerts gets a reference to the given bool and assigns it to the Alerts field.
func (o *FollowRecordDto) SetAlerts(v bool) {
	o.Alerts = &v
}

func (o FollowRecordDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FollowRecordDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.FollowerID.IsSet() {
		toSerialize["followerID"] = o.FollowerID.Get()
	}
	if o.FollowedID.IsSet() {
		toSerialize["followedID"] = o.FollowedID.Get()
	}
	if !IsNil(o.Alerts) {
		toSerialize["alerts"] = o.Alerts
	}
	return toSerialize, nil
}

type NullableFollowRecordDto struct {
	value *FollowRecordDto
	isSet bool
}

func (v NullableFollowRecordDto) Get() *FollowRecordDto {
	return v.value
}

func (v *NullableFollowRecordDto) Set(val *FollowRecordDto) {
	v.value = val
	v.isSet = true
}

func (v NullableFollowRecordDto) IsSet() bool {
	return v.isSet
}

func (v *NullableFollowRecordDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFollowRecordDto(val *FollowRecordDto) *NullableFollowRecordDto {
	return &NullableFollowRecordDto{value: val, isSet: true}
}

func (v NullableFollowRecordDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFollowRecordDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


