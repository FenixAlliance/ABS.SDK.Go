/*
HolderService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ExtendedTenantEnrolmentDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtendedTenantEnrolmentDto{}

// ExtendedTenantEnrolmentDto struct for ExtendedTenantEnrolmentDto
type ExtendedTenantEnrolmentDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	TenantId NullableString `json:"tenantId,omitempty"`
	UserId NullableString `json:"userId,omitempty"`
	IsRoot *bool `json:"isRoot,omitempty"`
	IsOwner *bool `json:"isOwner,omitempty"`
	IsAdmin *bool `json:"isAdmin,omitempty"`
	IsDisabled *bool `json:"isDisabled,omitempty"`
	Tenant *TenantDto `json:"tenant,omitempty"`
	User *UserDto `json:"user,omitempty"`
}

// NewExtendedTenantEnrolmentDto instantiates a new ExtendedTenantEnrolmentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtendedTenantEnrolmentDto() *ExtendedTenantEnrolmentDto {
	this := ExtendedTenantEnrolmentDto{}
	return &this
}

// NewExtendedTenantEnrolmentDtoWithDefaults instantiates a new ExtendedTenantEnrolmentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtendedTenantEnrolmentDtoWithDefaults() *ExtendedTenantEnrolmentDto {
	this := ExtendedTenantEnrolmentDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedTenantEnrolmentDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedTenantEnrolmentDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ExtendedTenantEnrolmentDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ExtendedTenantEnrolmentDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ExtendedTenantEnrolmentDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ExtendedTenantEnrolmentDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedTenantEnrolmentDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedTenantEnrolmentDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ExtendedTenantEnrolmentDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *ExtendedTenantEnrolmentDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *ExtendedTenantEnrolmentDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *ExtendedTenantEnrolmentDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedTenantEnrolmentDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedTenantEnrolmentDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *ExtendedTenantEnrolmentDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *ExtendedTenantEnrolmentDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *ExtendedTenantEnrolmentDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *ExtendedTenantEnrolmentDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedTenantEnrolmentDto) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedTenantEnrolmentDto) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *ExtendedTenantEnrolmentDto) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *ExtendedTenantEnrolmentDto) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *ExtendedTenantEnrolmentDto) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *ExtendedTenantEnrolmentDto) UnsetUserId() {
	o.UserId.Unset()
}

// GetIsRoot returns the IsRoot field value if set, zero value otherwise.
func (o *ExtendedTenantEnrolmentDto) GetIsRoot() bool {
	if o == nil || IsNil(o.IsRoot) {
		var ret bool
		return ret
	}
	return *o.IsRoot
}

// GetIsRootOk returns a tuple with the IsRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTenantEnrolmentDto) GetIsRootOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRoot) {
		return nil, false
	}
	return o.IsRoot, true
}

// HasIsRoot returns a boolean if a field has been set.
func (o *ExtendedTenantEnrolmentDto) HasIsRoot() bool {
	if o != nil && !IsNil(o.IsRoot) {
		return true
	}

	return false
}

// SetIsRoot gets a reference to the given bool and assigns it to the IsRoot field.
func (o *ExtendedTenantEnrolmentDto) SetIsRoot(v bool) {
	o.IsRoot = &v
}

// GetIsOwner returns the IsOwner field value if set, zero value otherwise.
func (o *ExtendedTenantEnrolmentDto) GetIsOwner() bool {
	if o == nil || IsNil(o.IsOwner) {
		var ret bool
		return ret
	}
	return *o.IsOwner
}

// GetIsOwnerOk returns a tuple with the IsOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTenantEnrolmentDto) GetIsOwnerOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOwner) {
		return nil, false
	}
	return o.IsOwner, true
}

// HasIsOwner returns a boolean if a field has been set.
func (o *ExtendedTenantEnrolmentDto) HasIsOwner() bool {
	if o != nil && !IsNil(o.IsOwner) {
		return true
	}

	return false
}

// SetIsOwner gets a reference to the given bool and assigns it to the IsOwner field.
func (o *ExtendedTenantEnrolmentDto) SetIsOwner(v bool) {
	o.IsOwner = &v
}

// GetIsAdmin returns the IsAdmin field value if set, zero value otherwise.
func (o *ExtendedTenantEnrolmentDto) GetIsAdmin() bool {
	if o == nil || IsNil(o.IsAdmin) {
		var ret bool
		return ret
	}
	return *o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTenantEnrolmentDto) GetIsAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAdmin) {
		return nil, false
	}
	return o.IsAdmin, true
}

// HasIsAdmin returns a boolean if a field has been set.
func (o *ExtendedTenantEnrolmentDto) HasIsAdmin() bool {
	if o != nil && !IsNil(o.IsAdmin) {
		return true
	}

	return false
}

// SetIsAdmin gets a reference to the given bool and assigns it to the IsAdmin field.
func (o *ExtendedTenantEnrolmentDto) SetIsAdmin(v bool) {
	o.IsAdmin = &v
}

// GetIsDisabled returns the IsDisabled field value if set, zero value otherwise.
func (o *ExtendedTenantEnrolmentDto) GetIsDisabled() bool {
	if o == nil || IsNil(o.IsDisabled) {
		var ret bool
		return ret
	}
	return *o.IsDisabled
}

// GetIsDisabledOk returns a tuple with the IsDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTenantEnrolmentDto) GetIsDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDisabled) {
		return nil, false
	}
	return o.IsDisabled, true
}

// HasIsDisabled returns a boolean if a field has been set.
func (o *ExtendedTenantEnrolmentDto) HasIsDisabled() bool {
	if o != nil && !IsNil(o.IsDisabled) {
		return true
	}

	return false
}

// SetIsDisabled gets a reference to the given bool and assigns it to the IsDisabled field.
func (o *ExtendedTenantEnrolmentDto) SetIsDisabled(v bool) {
	o.IsDisabled = &v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *ExtendedTenantEnrolmentDto) GetTenant() TenantDto {
	if o == nil || IsNil(o.Tenant) {
		var ret TenantDto
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTenantEnrolmentDto) GetTenantOk() (*TenantDto, bool) {
	if o == nil || IsNil(o.Tenant) {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *ExtendedTenantEnrolmentDto) HasTenant() bool {
	if o != nil && !IsNil(o.Tenant) {
		return true
	}

	return false
}

// SetTenant gets a reference to the given TenantDto and assigns it to the Tenant field.
func (o *ExtendedTenantEnrolmentDto) SetTenant(v TenantDto) {
	o.Tenant = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ExtendedTenantEnrolmentDto) GetUser() UserDto {
	if o == nil || IsNil(o.User) {
		var ret UserDto
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedTenantEnrolmentDto) GetUserOk() (*UserDto, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ExtendedTenantEnrolmentDto) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserDto and assigns it to the User field.
func (o *ExtendedTenantEnrolmentDto) SetUser(v UserDto) {
	o.User = &v
}

func (o ExtendedTenantEnrolmentDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtendedTenantEnrolmentDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	if !IsNil(o.IsRoot) {
		toSerialize["isRoot"] = o.IsRoot
	}
	if !IsNil(o.IsOwner) {
		toSerialize["isOwner"] = o.IsOwner
	}
	if !IsNil(o.IsAdmin) {
		toSerialize["isAdmin"] = o.IsAdmin
	}
	if !IsNil(o.IsDisabled) {
		toSerialize["isDisabled"] = o.IsDisabled
	}
	if !IsNil(o.Tenant) {
		toSerialize["tenant"] = o.Tenant
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableExtendedTenantEnrolmentDto struct {
	value *ExtendedTenantEnrolmentDto
	isSet bool
}

func (v NullableExtendedTenantEnrolmentDto) Get() *ExtendedTenantEnrolmentDto {
	return v.value
}

func (v *NullableExtendedTenantEnrolmentDto) Set(val *ExtendedTenantEnrolmentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExtendedTenantEnrolmentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExtendedTenantEnrolmentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtendedTenantEnrolmentDto(val *ExtendedTenantEnrolmentDto) *NullableExtendedTenantEnrolmentDto {
	return &NullableExtendedTenantEnrolmentDto{value: val, isSet: true}
}

func (v NullableExtendedTenantEnrolmentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtendedTenantEnrolmentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


