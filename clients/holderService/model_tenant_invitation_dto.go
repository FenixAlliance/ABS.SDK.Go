/*
HolderService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the TenantInvitationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantInvitationDto{}

// TenantInvitationDto struct for TenantInvitationDto
type TenantInvitationDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	TenantId NullableString `json:"tenantId,omitempty"`
	Revoked *bool `json:"revoked,omitempty"`
	Redeemed *bool `json:"redeemed,omitempty"`
	RedeemedTimestamp NullableTime `json:"redeemedTimestamp,omitempty"`
	UserEmail NullableString `json:"userEmail,omitempty"`
	CreatorEnrollmentId NullableString `json:"creatorEnrollmentId,omitempty"`
	RelatedEnrollmentId NullableString `json:"relatedEnrollmentId,omitempty"`
}

// NewTenantInvitationDto instantiates a new TenantInvitationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantInvitationDto() *TenantInvitationDto {
	this := TenantInvitationDto{}
	return &this
}

// NewTenantInvitationDtoWithDefaults instantiates a new TenantInvitationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantInvitationDtoWithDefaults() *TenantInvitationDto {
	this := TenantInvitationDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantInvitationDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantInvitationDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *TenantInvitationDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *TenantInvitationDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *TenantInvitationDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *TenantInvitationDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantInvitationDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantInvitationDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *TenantInvitationDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *TenantInvitationDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *TenantInvitationDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *TenantInvitationDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantInvitationDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantInvitationDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *TenantInvitationDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *TenantInvitationDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *TenantInvitationDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *TenantInvitationDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetRevoked returns the Revoked field value if set, zero value otherwise.
func (o *TenantInvitationDto) GetRevoked() bool {
	if o == nil || IsNil(o.Revoked) {
		var ret bool
		return ret
	}
	return *o.Revoked
}

// GetRevokedOk returns a tuple with the Revoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInvitationDto) GetRevokedOk() (*bool, bool) {
	if o == nil || IsNil(o.Revoked) {
		return nil, false
	}
	return o.Revoked, true
}

// HasRevoked returns a boolean if a field has been set.
func (o *TenantInvitationDto) HasRevoked() bool {
	if o != nil && !IsNil(o.Revoked) {
		return true
	}

	return false
}

// SetRevoked gets a reference to the given bool and assigns it to the Revoked field.
func (o *TenantInvitationDto) SetRevoked(v bool) {
	o.Revoked = &v
}

// GetRedeemed returns the Redeemed field value if set, zero value otherwise.
func (o *TenantInvitationDto) GetRedeemed() bool {
	if o == nil || IsNil(o.Redeemed) {
		var ret bool
		return ret
	}
	return *o.Redeemed
}

// GetRedeemedOk returns a tuple with the Redeemed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInvitationDto) GetRedeemedOk() (*bool, bool) {
	if o == nil || IsNil(o.Redeemed) {
		return nil, false
	}
	return o.Redeemed, true
}

// HasRedeemed returns a boolean if a field has been set.
func (o *TenantInvitationDto) HasRedeemed() bool {
	if o != nil && !IsNil(o.Redeemed) {
		return true
	}

	return false
}

// SetRedeemed gets a reference to the given bool and assigns it to the Redeemed field.
func (o *TenantInvitationDto) SetRedeemed(v bool) {
	o.Redeemed = &v
}

// GetRedeemedTimestamp returns the RedeemedTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantInvitationDto) GetRedeemedTimestamp() time.Time {
	if o == nil || IsNil(o.RedeemedTimestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.RedeemedTimestamp.Get()
}

// GetRedeemedTimestampOk returns a tuple with the RedeemedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantInvitationDto) GetRedeemedTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedeemedTimestamp.Get(), o.RedeemedTimestamp.IsSet()
}

// HasRedeemedTimestamp returns a boolean if a field has been set.
func (o *TenantInvitationDto) HasRedeemedTimestamp() bool {
	if o != nil && o.RedeemedTimestamp.IsSet() {
		return true
	}

	return false
}

// SetRedeemedTimestamp gets a reference to the given NullableTime and assigns it to the RedeemedTimestamp field.
func (o *TenantInvitationDto) SetRedeemedTimestamp(v time.Time) {
	o.RedeemedTimestamp.Set(&v)
}
// SetRedeemedTimestampNil sets the value for RedeemedTimestamp to be an explicit nil
func (o *TenantInvitationDto) SetRedeemedTimestampNil() {
	o.RedeemedTimestamp.Set(nil)
}

// UnsetRedeemedTimestamp ensures that no value is present for RedeemedTimestamp, not even an explicit nil
func (o *TenantInvitationDto) UnsetRedeemedTimestamp() {
	o.RedeemedTimestamp.Unset()
}

// GetUserEmail returns the UserEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantInvitationDto) GetUserEmail() string {
	if o == nil || IsNil(o.UserEmail.Get()) {
		var ret string
		return ret
	}
	return *o.UserEmail.Get()
}

// GetUserEmailOk returns a tuple with the UserEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantInvitationDto) GetUserEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserEmail.Get(), o.UserEmail.IsSet()
}

// HasUserEmail returns a boolean if a field has been set.
func (o *TenantInvitationDto) HasUserEmail() bool {
	if o != nil && o.UserEmail.IsSet() {
		return true
	}

	return false
}

// SetUserEmail gets a reference to the given NullableString and assigns it to the UserEmail field.
func (o *TenantInvitationDto) SetUserEmail(v string) {
	o.UserEmail.Set(&v)
}
// SetUserEmailNil sets the value for UserEmail to be an explicit nil
func (o *TenantInvitationDto) SetUserEmailNil() {
	o.UserEmail.Set(nil)
}

// UnsetUserEmail ensures that no value is present for UserEmail, not even an explicit nil
func (o *TenantInvitationDto) UnsetUserEmail() {
	o.UserEmail.Unset()
}

// GetCreatorEnrollmentId returns the CreatorEnrollmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantInvitationDto) GetCreatorEnrollmentId() string {
	if o == nil || IsNil(o.CreatorEnrollmentId.Get()) {
		var ret string
		return ret
	}
	return *o.CreatorEnrollmentId.Get()
}

// GetCreatorEnrollmentIdOk returns a tuple with the CreatorEnrollmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantInvitationDto) GetCreatorEnrollmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatorEnrollmentId.Get(), o.CreatorEnrollmentId.IsSet()
}

// HasCreatorEnrollmentId returns a boolean if a field has been set.
func (o *TenantInvitationDto) HasCreatorEnrollmentId() bool {
	if o != nil && o.CreatorEnrollmentId.IsSet() {
		return true
	}

	return false
}

// SetCreatorEnrollmentId gets a reference to the given NullableString and assigns it to the CreatorEnrollmentId field.
func (o *TenantInvitationDto) SetCreatorEnrollmentId(v string) {
	o.CreatorEnrollmentId.Set(&v)
}
// SetCreatorEnrollmentIdNil sets the value for CreatorEnrollmentId to be an explicit nil
func (o *TenantInvitationDto) SetCreatorEnrollmentIdNil() {
	o.CreatorEnrollmentId.Set(nil)
}

// UnsetCreatorEnrollmentId ensures that no value is present for CreatorEnrollmentId, not even an explicit nil
func (o *TenantInvitationDto) UnsetCreatorEnrollmentId() {
	o.CreatorEnrollmentId.Unset()
}

// GetRelatedEnrollmentId returns the RelatedEnrollmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantInvitationDto) GetRelatedEnrollmentId() string {
	if o == nil || IsNil(o.RelatedEnrollmentId.Get()) {
		var ret string
		return ret
	}
	return *o.RelatedEnrollmentId.Get()
}

// GetRelatedEnrollmentIdOk returns a tuple with the RelatedEnrollmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantInvitationDto) GetRelatedEnrollmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelatedEnrollmentId.Get(), o.RelatedEnrollmentId.IsSet()
}

// HasRelatedEnrollmentId returns a boolean if a field has been set.
func (o *TenantInvitationDto) HasRelatedEnrollmentId() bool {
	if o != nil && o.RelatedEnrollmentId.IsSet() {
		return true
	}

	return false
}

// SetRelatedEnrollmentId gets a reference to the given NullableString and assigns it to the RelatedEnrollmentId field.
func (o *TenantInvitationDto) SetRelatedEnrollmentId(v string) {
	o.RelatedEnrollmentId.Set(&v)
}
// SetRelatedEnrollmentIdNil sets the value for RelatedEnrollmentId to be an explicit nil
func (o *TenantInvitationDto) SetRelatedEnrollmentIdNil() {
	o.RelatedEnrollmentId.Set(nil)
}

// UnsetRelatedEnrollmentId ensures that no value is present for RelatedEnrollmentId, not even an explicit nil
func (o *TenantInvitationDto) UnsetRelatedEnrollmentId() {
	o.RelatedEnrollmentId.Unset()
}

func (o TenantInvitationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantInvitationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if !IsNil(o.Revoked) {
		toSerialize["revoked"] = o.Revoked
	}
	if !IsNil(o.Redeemed) {
		toSerialize["redeemed"] = o.Redeemed
	}
	if o.RedeemedTimestamp.IsSet() {
		toSerialize["redeemedTimestamp"] = o.RedeemedTimestamp.Get()
	}
	if o.UserEmail.IsSet() {
		toSerialize["userEmail"] = o.UserEmail.Get()
	}
	if o.CreatorEnrollmentId.IsSet() {
		toSerialize["creatorEnrollmentId"] = o.CreatorEnrollmentId.Get()
	}
	if o.RelatedEnrollmentId.IsSet() {
		toSerialize["relatedEnrollmentId"] = o.RelatedEnrollmentId.Get()
	}
	return toSerialize, nil
}

type NullableTenantInvitationDto struct {
	value *TenantInvitationDto
	isSet bool
}

func (v NullableTenantInvitationDto) Get() *TenantInvitationDto {
	return v.value
}

func (v *NullableTenantInvitationDto) Set(val *TenantInvitationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantInvitationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantInvitationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantInvitationDto(val *TenantInvitationDto) *NullableTenantInvitationDto {
	return &NullableTenantInvitationDto{value: val, isSet: true}
}

func (v NullableTenantInvitationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantInvitationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


