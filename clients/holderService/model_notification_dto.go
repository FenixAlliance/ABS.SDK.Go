/*
HolderService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the NotificationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationDto{}

// NotificationDto struct for NotificationDto
type NotificationDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	Read *bool `json:"read,omitempty"`
	Icon NullableString `json:"icon,omitempty"`
	Message NullableString `json:"message,omitempty"`
	RedirectUrl NullableString `json:"redirectUrl,omitempty"`
	SocialProfileID NullableString `json:"socialProfileID,omitempty"`
	ReadTimestamp *time.Time `json:"readTimestamp,omitempty"`
	IssuedTimestamp *time.Time `json:"issuedTimestamp,omitempty"`
}

// NewNotificationDto instantiates a new NotificationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationDto() *NotificationDto {
	this := NotificationDto{}
	return &this
}

// NewNotificationDtoWithDefaults instantiates a new NotificationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationDtoWithDefaults() *NotificationDto {
	this := NotificationDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *NotificationDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *NotificationDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *NotificationDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *NotificationDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *NotificationDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *NotificationDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *NotificationDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *NotificationDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *NotificationDto) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDto) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *NotificationDto) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *NotificationDto) SetRead(v bool) {
	o.Read = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationDto) GetIcon() string {
	if o == nil || IsNil(o.Icon.Get()) {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationDto) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *NotificationDto) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *NotificationDto) SetIcon(v string) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *NotificationDto) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *NotificationDto) UnsetIcon() {
	o.Icon.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationDto) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationDto) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *NotificationDto) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *NotificationDto) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *NotificationDto) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *NotificationDto) UnsetMessage() {
	o.Message.Unset()
}

// GetRedirectUrl returns the RedirectUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationDto) GetRedirectUrl() string {
	if o == nil || IsNil(o.RedirectUrl.Get()) {
		var ret string
		return ret
	}
	return *o.RedirectUrl.Get()
}

// GetRedirectUrlOk returns a tuple with the RedirectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationDto) GetRedirectUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RedirectUrl.Get(), o.RedirectUrl.IsSet()
}

// HasRedirectUrl returns a boolean if a field has been set.
func (o *NotificationDto) HasRedirectUrl() bool {
	if o != nil && o.RedirectUrl.IsSet() {
		return true
	}

	return false
}

// SetRedirectUrl gets a reference to the given NullableString and assigns it to the RedirectUrl field.
func (o *NotificationDto) SetRedirectUrl(v string) {
	o.RedirectUrl.Set(&v)
}
// SetRedirectUrlNil sets the value for RedirectUrl to be an explicit nil
func (o *NotificationDto) SetRedirectUrlNil() {
	o.RedirectUrl.Set(nil)
}

// UnsetRedirectUrl ensures that no value is present for RedirectUrl, not even an explicit nil
func (o *NotificationDto) UnsetRedirectUrl() {
	o.RedirectUrl.Unset()
}

// GetSocialProfileID returns the SocialProfileID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationDto) GetSocialProfileID() string {
	if o == nil || IsNil(o.SocialProfileID.Get()) {
		var ret string
		return ret
	}
	return *o.SocialProfileID.Get()
}

// GetSocialProfileIDOk returns a tuple with the SocialProfileID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationDto) GetSocialProfileIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SocialProfileID.Get(), o.SocialProfileID.IsSet()
}

// HasSocialProfileID returns a boolean if a field has been set.
func (o *NotificationDto) HasSocialProfileID() bool {
	if o != nil && o.SocialProfileID.IsSet() {
		return true
	}

	return false
}

// SetSocialProfileID gets a reference to the given NullableString and assigns it to the SocialProfileID field.
func (o *NotificationDto) SetSocialProfileID(v string) {
	o.SocialProfileID.Set(&v)
}
// SetSocialProfileIDNil sets the value for SocialProfileID to be an explicit nil
func (o *NotificationDto) SetSocialProfileIDNil() {
	o.SocialProfileID.Set(nil)
}

// UnsetSocialProfileID ensures that no value is present for SocialProfileID, not even an explicit nil
func (o *NotificationDto) UnsetSocialProfileID() {
	o.SocialProfileID.Unset()
}

// GetReadTimestamp returns the ReadTimestamp field value if set, zero value otherwise.
func (o *NotificationDto) GetReadTimestamp() time.Time {
	if o == nil || IsNil(o.ReadTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.ReadTimestamp
}

// GetReadTimestampOk returns a tuple with the ReadTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDto) GetReadTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ReadTimestamp) {
		return nil, false
	}
	return o.ReadTimestamp, true
}

// HasReadTimestamp returns a boolean if a field has been set.
func (o *NotificationDto) HasReadTimestamp() bool {
	if o != nil && !IsNil(o.ReadTimestamp) {
		return true
	}

	return false
}

// SetReadTimestamp gets a reference to the given time.Time and assigns it to the ReadTimestamp field.
func (o *NotificationDto) SetReadTimestamp(v time.Time) {
	o.ReadTimestamp = &v
}

// GetIssuedTimestamp returns the IssuedTimestamp field value if set, zero value otherwise.
func (o *NotificationDto) GetIssuedTimestamp() time.Time {
	if o == nil || IsNil(o.IssuedTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.IssuedTimestamp
}

// GetIssuedTimestampOk returns a tuple with the IssuedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationDto) GetIssuedTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.IssuedTimestamp) {
		return nil, false
	}
	return o.IssuedTimestamp, true
}

// HasIssuedTimestamp returns a boolean if a field has been set.
func (o *NotificationDto) HasIssuedTimestamp() bool {
	if o != nil && !IsNil(o.IssuedTimestamp) {
		return true
	}

	return false
}

// SetIssuedTimestamp gets a reference to the given time.Time and assigns it to the IssuedTimestamp field.
func (o *NotificationDto) SetIssuedTimestamp(v time.Time) {
	o.IssuedTimestamp = &v
}

func (o NotificationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.RedirectUrl.IsSet() {
		toSerialize["redirectUrl"] = o.RedirectUrl.Get()
	}
	if o.SocialProfileID.IsSet() {
		toSerialize["socialProfileID"] = o.SocialProfileID.Get()
	}
	if !IsNil(o.ReadTimestamp) {
		toSerialize["readTimestamp"] = o.ReadTimestamp
	}
	if !IsNil(o.IssuedTimestamp) {
		toSerialize["issuedTimestamp"] = o.IssuedTimestamp
	}
	return toSerialize, nil
}

type NullableNotificationDto struct {
	value *NotificationDto
	isSet bool
}

func (v NullableNotificationDto) Get() *NotificationDto {
	return v.value
}

func (v *NullableNotificationDto) Set(val *NotificationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationDto(val *NotificationDto) *NullableNotificationDto {
	return &NullableNotificationDto{value: val, isSet: true}
}

func (v NullableNotificationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


