/*
PricingService

Testing DiscountListsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DiscountListsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DiscountListsAPIService ApiV2PricingServiceDiscountListsCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DiscountListsAPI.ApiV2PricingServiceDiscountListsCountGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscountListsAPIService ApiV2PricingServiceDiscountListsDiscountListIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var discountListId string

		resp, httpRes, err := apiClient.DiscountListsAPI.ApiV2PricingServiceDiscountListsDiscountListIdDelete(context.Background(), discountListId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscountListsAPIService ApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var discountListId string

		resp, httpRes, err := apiClient.DiscountListsAPI.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGet(context.Background(), discountListId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscountListsAPIService ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var discountListId string
		var discountListEntryId string

		resp, httpRes, err := apiClient.DiscountListsAPI.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDelete(context.Background(), discountListId, discountListEntryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscountListsAPIService ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var discountListId string
		var discountListEntryId string

		resp, httpRes, err := apiClient.DiscountListsAPI.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPut(context.Background(), discountListId, discountListEntryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscountListsAPIService ApiV2PricingServiceDiscountListsDiscountListIdDiscountsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var discountListId string

		resp, httpRes, err := apiClient.DiscountListsAPI.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsGet(context.Background(), discountListId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscountListsAPIService ApiV2PricingServiceDiscountListsDiscountListIdDiscountsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var discountListId string

		resp, httpRes, err := apiClient.DiscountListsAPI.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsPost(context.Background(), discountListId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscountListsAPIService ApiV2PricingServiceDiscountListsDiscountListIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var discountListId string

		resp, httpRes, err := apiClient.DiscountListsAPI.ApiV2PricingServiceDiscountListsDiscountListIdGet(context.Background(), discountListId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscountListsAPIService ApiV2PricingServiceDiscountListsDiscountListIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var discountListId string

		resp, httpRes, err := apiClient.DiscountListsAPI.ApiV2PricingServiceDiscountListsDiscountListIdPut(context.Background(), discountListId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscountListsAPIService ApiV2PricingServiceDiscountListsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DiscountListsAPI.ApiV2PricingServiceDiscountListsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscountListsAPIService ApiV2PricingServiceDiscountListsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DiscountListsAPI.ApiV2PricingServiceDiscountListsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DiscountListsAPIService GetDiscountListEntry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var discountListId string
		var discountListEntryId string

		resp, httpRes, err := apiClient.DiscountListsAPI.GetDiscountListEntry(context.Background(), discountListId, discountListEntryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
