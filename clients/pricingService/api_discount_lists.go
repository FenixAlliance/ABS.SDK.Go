/*
PricingService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DiscountListsAPIService DiscountListsAPI service
type DiscountListsAPIService service

type ApiApiV2PricingServiceDiscountListsCountGetRequest struct {
	ctx context.Context
	ApiService *DiscountListsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2PricingServiceDiscountListsCountGetRequest) TenantId(tenantId string) ApiApiV2PricingServiceDiscountListsCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2PricingServiceDiscountListsCountGetRequest) ApiVersion(apiVersion string) ApiApiV2PricingServiceDiscountListsCountGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsCountGetRequest) XApiVersion(xApiVersion string) ApiApiV2PricingServiceDiscountListsCountGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2PricingServiceDiscountListsCountGetExecute(r)
}

/*
ApiV2PricingServiceDiscountListsCountGet Method for ApiV2PricingServiceDiscountListsCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2PricingServiceDiscountListsCountGetRequest
*/
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsCountGet(ctx context.Context) ApiApiV2PricingServiceDiscountListsCountGetRequest {
	return ApiApiV2PricingServiceDiscountListsCountGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsCountGetExecute(r ApiApiV2PricingServiceDiscountListsCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountListsAPIService.ApiV2PricingServiceDiscountListsCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/PricingService/DiscountLists/Count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2PricingServiceDiscountListsDiscountListIdDeleteRequest struct {
	ctx context.Context
	ApiService *DiscountListsAPIService
	tenantId *string
	discountListId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDeleteRequest) TenantId(tenantId string) ApiApiV2PricingServiceDiscountListsDiscountListIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2PricingServiceDiscountListsDiscountListIdDeleteExecute(r)
}

/*
ApiV2PricingServiceDiscountListsDiscountListIdDelete Method for ApiV2PricingServiceDiscountListsDiscountListIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param discountListId
 @return ApiApiV2PricingServiceDiscountListsDiscountListIdDeleteRequest
*/
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdDelete(ctx context.Context, discountListId string) ApiApiV2PricingServiceDiscountListsDiscountListIdDeleteRequest {
	return ApiApiV2PricingServiceDiscountListsDiscountListIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		discountListId: discountListId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdDeleteExecute(r ApiApiV2PricingServiceDiscountListsDiscountListIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountListsAPIService.ApiV2PricingServiceDiscountListsDiscountListIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/PricingService/DiscountLists/{discountListId}"
	localVarPath = strings.Replace(localVarPath, "{"+"discountListId"+"}", url.PathEscape(parameterValueToString(r.discountListId, "discountListId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetRequest struct {
	ctx context.Context
	ApiService *DiscountListsAPIService
	tenantId *string
	discountListId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetRequest) TenantId(tenantId string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetRequest) ApiVersion(apiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetRequest) XApiVersion(xApiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetExecute(r)
}

/*
ApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGet Method for ApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param discountListId
 @return ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetRequest
*/
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGet(ctx context.Context, discountListId string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetRequest {
	return ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetRequest{
		ApiService: a,
		ctx: ctx,
		discountListId: discountListId,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetExecute(r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountListsAPIService.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/PricingService/DiscountLists/{discountListId}/Discounts/Count"
	localVarPath = strings.Replace(localVarPath, "{"+"discountListId"+"}", url.PathEscape(parameterValueToString(r.discountListId, "discountListId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteRequest struct {
	ctx context.Context
	ApiService *DiscountListsAPIService
	tenantId *string
	discountListId string
	discountListEntryId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteRequest) TenantId(tenantId string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteExecute(r)
}

/*
ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDelete Method for ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param discountListId
 @param discountListEntryId
 @return ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteRequest
*/
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDelete(ctx context.Context, discountListId string, discountListEntryId string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteRequest {
	return ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		discountListId: discountListId,
		discountListEntryId: discountListEntryId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteExecute(r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountListsAPIService.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/PricingService/DiscountLists/{discountListId}/Discounts/{discountListEntryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"discountListId"+"}", url.PathEscape(parameterValueToString(r.discountListId, "discountListId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"discountListEntryId"+"}", url.PathEscape(parameterValueToString(r.discountListEntryId, "discountListEntryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest struct {
	ctx context.Context
	ApiService *DiscountListsAPIService
	tenantId *string
	discountListId string
	discountListEntryId string
	apiVersion *string
	xApiVersion *string
	discountUpdateDto *DiscountUpdateDto
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest) TenantId(tenantId string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest) ApiVersion(apiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest) DiscountUpdateDto(discountUpdateDto DiscountUpdateDto) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest {
	r.discountUpdateDto = &discountUpdateDto
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutExecute(r)
}

/*
ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPut Method for ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param discountListId
 @param discountListEntryId
 @return ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest
*/
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPut(ctx context.Context, discountListId string, discountListEntryId string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest {
	return ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest{
		ApiService: a,
		ctx: ctx,
		discountListId: discountListId,
		discountListEntryId: discountListEntryId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutExecute(r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountListsAPIService.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsDiscountListEntryIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/PricingService/DiscountLists/{discountListId}/Discounts/{discountListEntryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"discountListId"+"}", url.PathEscape(parameterValueToString(r.discountListId, "discountListId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"discountListEntryId"+"}", url.PathEscape(parameterValueToString(r.discountListEntryId, "discountListEntryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.discountUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetRequest struct {
	ctx context.Context
	ApiService *DiscountListsAPIService
	tenantId *string
	discountListId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetRequest) TenantId(tenantId string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetRequest) ApiVersion(apiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetRequest) XApiVersion(xApiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetRequest) Execute() (*DiscountDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetExecute(r)
}

/*
ApiV2PricingServiceDiscountListsDiscountListIdDiscountsGet Method for ApiV2PricingServiceDiscountListsDiscountListIdDiscountsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param discountListId
 @return ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetRequest
*/
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdDiscountsGet(ctx context.Context, discountListId string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetRequest {
	return ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetRequest{
		ApiService: a,
		ctx: ctx,
		discountListId: discountListId,
	}
}

// Execute executes the request
//  @return DiscountDtoListEnvelope
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetExecute(r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsGetRequest) (*DiscountDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DiscountDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountListsAPIService.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/PricingService/DiscountLists/{discountListId}/Discounts"
	localVarPath = strings.Replace(localVarPath, "{"+"discountListId"+"}", url.PathEscape(parameterValueToString(r.discountListId, "discountListId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest struct {
	ctx context.Context
	ApiService *DiscountListsAPIService
	tenantId *string
	discountListId string
	apiVersion *string
	xApiVersion *string
	discountCreateDto *DiscountCreateDto
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest) TenantId(tenantId string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest) ApiVersion(apiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest) XApiVersion(xApiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest) DiscountCreateDto(discountCreateDto DiscountCreateDto) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest {
	r.discountCreateDto = &discountCreateDto
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostExecute(r)
}

/*
ApiV2PricingServiceDiscountListsDiscountListIdDiscountsPost Method for ApiV2PricingServiceDiscountListsDiscountListIdDiscountsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param discountListId
 @return ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest
*/
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdDiscountsPost(ctx context.Context, discountListId string) ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest {
	return ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest{
		ApiService: a,
		ctx: ctx,
		discountListId: discountListId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostExecute(r ApiApiV2PricingServiceDiscountListsDiscountListIdDiscountsPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountListsAPIService.ApiV2PricingServiceDiscountListsDiscountListIdDiscountsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/PricingService/DiscountLists/{discountListId}/Discounts"
	localVarPath = strings.Replace(localVarPath, "{"+"discountListId"+"}", url.PathEscape(parameterValueToString(r.discountListId, "discountListId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.discountCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2PricingServiceDiscountListsDiscountListIdGetRequest struct {
	ctx context.Context
	ApiService *DiscountListsAPIService
	tenantId *string
	discountListId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdGetRequest) TenantId(tenantId string) ApiApiV2PricingServiceDiscountListsDiscountListIdGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdGetRequest) ApiVersion(apiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdGetRequest) Execute() (*DiscountListDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2PricingServiceDiscountListsDiscountListIdGetExecute(r)
}

/*
ApiV2PricingServiceDiscountListsDiscountListIdGet Method for ApiV2PricingServiceDiscountListsDiscountListIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param discountListId
 @return ApiApiV2PricingServiceDiscountListsDiscountListIdGetRequest
*/
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdGet(ctx context.Context, discountListId string) ApiApiV2PricingServiceDiscountListsDiscountListIdGetRequest {
	return ApiApiV2PricingServiceDiscountListsDiscountListIdGetRequest{
		ApiService: a,
		ctx: ctx,
		discountListId: discountListId,
	}
}

// Execute executes the request
//  @return DiscountListDtoEnvelope
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdGetExecute(r ApiApiV2PricingServiceDiscountListsDiscountListIdGetRequest) (*DiscountListDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DiscountListDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountListsAPIService.ApiV2PricingServiceDiscountListsDiscountListIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/PricingService/DiscountLists/{discountListId}"
	localVarPath = strings.Replace(localVarPath, "{"+"discountListId"+"}", url.PathEscape(parameterValueToString(r.discountListId, "discountListId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest struct {
	ctx context.Context
	ApiService *DiscountListsAPIService
	tenantId *string
	discountListId string
	apiVersion *string
	xApiVersion *string
	discountListUpdateDto *DiscountListUpdateDto
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest) TenantId(tenantId string) ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest) ApiVersion(apiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest) DiscountListUpdateDto(discountListUpdateDto DiscountListUpdateDto) ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest {
	r.discountListUpdateDto = &discountListUpdateDto
	return r
}

func (r ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2PricingServiceDiscountListsDiscountListIdPutExecute(r)
}

/*
ApiV2PricingServiceDiscountListsDiscountListIdPut Method for ApiV2PricingServiceDiscountListsDiscountListIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param discountListId
 @return ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest
*/
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdPut(ctx context.Context, discountListId string) ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest {
	return ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest{
		ApiService: a,
		ctx: ctx,
		discountListId: discountListId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsDiscountListIdPutExecute(r ApiApiV2PricingServiceDiscountListsDiscountListIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountListsAPIService.ApiV2PricingServiceDiscountListsDiscountListIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/PricingService/DiscountLists/{discountListId}"
	localVarPath = strings.Replace(localVarPath, "{"+"discountListId"+"}", url.PathEscape(parameterValueToString(r.discountListId, "discountListId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.discountListUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2PricingServiceDiscountListsGetRequest struct {
	ctx context.Context
	ApiService *DiscountListsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2PricingServiceDiscountListsGetRequest) TenantId(tenantId string) ApiApiV2PricingServiceDiscountListsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2PricingServiceDiscountListsGetRequest) ApiVersion(apiVersion string) ApiApiV2PricingServiceDiscountListsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsGetRequest) XApiVersion(xApiVersion string) ApiApiV2PricingServiceDiscountListsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsGetRequest) Execute() (*DiscountListDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2PricingServiceDiscountListsGetExecute(r)
}

/*
ApiV2PricingServiceDiscountListsGet Method for ApiV2PricingServiceDiscountListsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2PricingServiceDiscountListsGetRequest
*/
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsGet(ctx context.Context) ApiApiV2PricingServiceDiscountListsGetRequest {
	return ApiApiV2PricingServiceDiscountListsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DiscountListDtoListEnvelope
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsGetExecute(r ApiApiV2PricingServiceDiscountListsGetRequest) (*DiscountListDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DiscountListDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountListsAPIService.ApiV2PricingServiceDiscountListsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/PricingService/DiscountLists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2PricingServiceDiscountListsPostRequest struct {
	ctx context.Context
	ApiService *DiscountListsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
	discountListCreateDto *DiscountListCreateDto
}

func (r ApiApiV2PricingServiceDiscountListsPostRequest) TenantId(tenantId string) ApiApiV2PricingServiceDiscountListsPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2PricingServiceDiscountListsPostRequest) ApiVersion(apiVersion string) ApiApiV2PricingServiceDiscountListsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsPostRequest) XApiVersion(xApiVersion string) ApiApiV2PricingServiceDiscountListsPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2PricingServiceDiscountListsPostRequest) DiscountListCreateDto(discountListCreateDto DiscountListCreateDto) ApiApiV2PricingServiceDiscountListsPostRequest {
	r.discountListCreateDto = &discountListCreateDto
	return r
}

func (r ApiApiV2PricingServiceDiscountListsPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2PricingServiceDiscountListsPostExecute(r)
}

/*
ApiV2PricingServiceDiscountListsPost Method for ApiV2PricingServiceDiscountListsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2PricingServiceDiscountListsPostRequest
*/
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsPost(ctx context.Context) ApiApiV2PricingServiceDiscountListsPostRequest {
	return ApiApiV2PricingServiceDiscountListsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DiscountListsAPIService) ApiV2PricingServiceDiscountListsPostExecute(r ApiApiV2PricingServiceDiscountListsPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountListsAPIService.ApiV2PricingServiceDiscountListsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/PricingService/DiscountLists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.discountListCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDiscountListEntryRequest struct {
	ctx context.Context
	ApiService *DiscountListsAPIService
	tenantId *string
	discountListId string
	discountListEntryId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiGetDiscountListEntryRequest) TenantId(tenantId string) ApiGetDiscountListEntryRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiGetDiscountListEntryRequest) ApiVersion(apiVersion string) ApiGetDiscountListEntryRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiGetDiscountListEntryRequest) XApiVersion(xApiVersion string) ApiGetDiscountListEntryRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiGetDiscountListEntryRequest) Execute() (*DiscountDtoEnvelope, *http.Response, error) {
	return r.ApiService.GetDiscountListEntryExecute(r)
}

/*
GetDiscountListEntry Method for GetDiscountListEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param discountListId
 @param discountListEntryId
 @return ApiGetDiscountListEntryRequest
*/
func (a *DiscountListsAPIService) GetDiscountListEntry(ctx context.Context, discountListId string, discountListEntryId string) ApiGetDiscountListEntryRequest {
	return ApiGetDiscountListEntryRequest{
		ApiService: a,
		ctx: ctx,
		discountListId: discountListId,
		discountListEntryId: discountListEntryId,
	}
}

// Execute executes the request
//  @return DiscountDtoEnvelope
func (a *DiscountListsAPIService) GetDiscountListEntryExecute(r ApiGetDiscountListEntryRequest) (*DiscountDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DiscountDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DiscountListsAPIService.GetDiscountListEntry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/PricingService/DiscountLists/{discountListId}/Discounts/{discountListEntryId}"
	localVarPath = strings.Replace(localVarPath, "{"+"discountListId"+"}", url.PathEscape(parameterValueToString(r.discountListId, "discountListId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"discountListEntryId"+"}", url.PathEscape(parameterValueToString(r.discountListEntryId, "discountListEntryId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
