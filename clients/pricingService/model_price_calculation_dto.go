/*
PricingService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PriceCalculationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceCalculationDto{}

// PriceCalculationDto struct for PriceCalculationDto
type PriceCalculationDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	ItemId NullableString `json:"itemId,omitempty"`
	UnitId NullableString `json:"unitId,omitempty"`
	UnitGroupId NullableString `json:"unitGroupId,omitempty"`
	PriceId NullableString `json:"priceId,omitempty"`
	PriceListId NullableString `json:"priceListId,omitempty"`
	DiscountId NullableString `json:"discountId,omitempty"`
	DiscountListId NullableString `json:"discountListId,omitempty"`
	TenantId NullableString `json:"tenantId,omitempty"`
	EnrollmentId NullableString `json:"enrollmentId,omitempty"`
	RoundingPolicyId NullableString `json:"roundingPolicyId,omitempty"`
	EffectiveDiscountPercent *float64 `json:"effectiveDiscountPercent,omitempty"`
	CurrencyId NullableString `json:"currencyId,omitempty"`
	TotalBaseAmount *Money `json:"totalBaseAmount,omitempty"`
	TotalDiscountsAmount *Money `json:"totalDiscountsAmount,omitempty"`
	TotalSurchargesAmount *Money `json:"totalSurchargesAmount,omitempty"`
	TotalShippingAmount *Money `json:"totalShippingAmount,omitempty"`
	TotalShippingTaxAmount *Money `json:"totalShippingTaxAmount,omitempty"`
	TotalTaxAmount *Money `json:"totalTaxAmount,omitempty"`
	TotalAmount *Money `json:"totalAmount,omitempty"`
}

// NewPriceCalculationDto instantiates a new PriceCalculationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceCalculationDto() *PriceCalculationDto {
	this := PriceCalculationDto{}
	return &this
}

// NewPriceCalculationDtoWithDefaults instantiates a new PriceCalculationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceCalculationDtoWithDefaults() *PriceCalculationDto {
	this := PriceCalculationDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceCalculationDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceCalculationDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *PriceCalculationDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PriceCalculationDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PriceCalculationDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceCalculationDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceCalculationDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *PriceCalculationDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *PriceCalculationDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *PriceCalculationDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetItemId returns the ItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceCalculationDto) GetItemId() string {
	if o == nil || IsNil(o.ItemId.Get()) {
		var ret string
		return ret
	}
	return *o.ItemId.Get()
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceCalculationDto) GetItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemId.Get(), o.ItemId.IsSet()
}

// HasItemId returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasItemId() bool {
	if o != nil && o.ItemId.IsSet() {
		return true
	}

	return false
}

// SetItemId gets a reference to the given NullableString and assigns it to the ItemId field.
func (o *PriceCalculationDto) SetItemId(v string) {
	o.ItemId.Set(&v)
}
// SetItemIdNil sets the value for ItemId to be an explicit nil
func (o *PriceCalculationDto) SetItemIdNil() {
	o.ItemId.Set(nil)
}

// UnsetItemId ensures that no value is present for ItemId, not even an explicit nil
func (o *PriceCalculationDto) UnsetItemId() {
	o.ItemId.Unset()
}

// GetUnitId returns the UnitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceCalculationDto) GetUnitId() string {
	if o == nil || IsNil(o.UnitId.Get()) {
		var ret string
		return ret
	}
	return *o.UnitId.Get()
}

// GetUnitIdOk returns a tuple with the UnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceCalculationDto) GetUnitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitId.Get(), o.UnitId.IsSet()
}

// HasUnitId returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasUnitId() bool {
	if o != nil && o.UnitId.IsSet() {
		return true
	}

	return false
}

// SetUnitId gets a reference to the given NullableString and assigns it to the UnitId field.
func (o *PriceCalculationDto) SetUnitId(v string) {
	o.UnitId.Set(&v)
}
// SetUnitIdNil sets the value for UnitId to be an explicit nil
func (o *PriceCalculationDto) SetUnitIdNil() {
	o.UnitId.Set(nil)
}

// UnsetUnitId ensures that no value is present for UnitId, not even an explicit nil
func (o *PriceCalculationDto) UnsetUnitId() {
	o.UnitId.Unset()
}

// GetUnitGroupId returns the UnitGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceCalculationDto) GetUnitGroupId() string {
	if o == nil || IsNil(o.UnitGroupId.Get()) {
		var ret string
		return ret
	}
	return *o.UnitGroupId.Get()
}

// GetUnitGroupIdOk returns a tuple with the UnitGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceCalculationDto) GetUnitGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitGroupId.Get(), o.UnitGroupId.IsSet()
}

// HasUnitGroupId returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasUnitGroupId() bool {
	if o != nil && o.UnitGroupId.IsSet() {
		return true
	}

	return false
}

// SetUnitGroupId gets a reference to the given NullableString and assigns it to the UnitGroupId field.
func (o *PriceCalculationDto) SetUnitGroupId(v string) {
	o.UnitGroupId.Set(&v)
}
// SetUnitGroupIdNil sets the value for UnitGroupId to be an explicit nil
func (o *PriceCalculationDto) SetUnitGroupIdNil() {
	o.UnitGroupId.Set(nil)
}

// UnsetUnitGroupId ensures that no value is present for UnitGroupId, not even an explicit nil
func (o *PriceCalculationDto) UnsetUnitGroupId() {
	o.UnitGroupId.Unset()
}

// GetPriceId returns the PriceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceCalculationDto) GetPriceId() string {
	if o == nil || IsNil(o.PriceId.Get()) {
		var ret string
		return ret
	}
	return *o.PriceId.Get()
}

// GetPriceIdOk returns a tuple with the PriceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceCalculationDto) GetPriceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceId.Get(), o.PriceId.IsSet()
}

// HasPriceId returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasPriceId() bool {
	if o != nil && o.PriceId.IsSet() {
		return true
	}

	return false
}

// SetPriceId gets a reference to the given NullableString and assigns it to the PriceId field.
func (o *PriceCalculationDto) SetPriceId(v string) {
	o.PriceId.Set(&v)
}
// SetPriceIdNil sets the value for PriceId to be an explicit nil
func (o *PriceCalculationDto) SetPriceIdNil() {
	o.PriceId.Set(nil)
}

// UnsetPriceId ensures that no value is present for PriceId, not even an explicit nil
func (o *PriceCalculationDto) UnsetPriceId() {
	o.PriceId.Unset()
}

// GetPriceListId returns the PriceListId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceCalculationDto) GetPriceListId() string {
	if o == nil || IsNil(o.PriceListId.Get()) {
		var ret string
		return ret
	}
	return *o.PriceListId.Get()
}

// GetPriceListIdOk returns a tuple with the PriceListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceCalculationDto) GetPriceListIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceListId.Get(), o.PriceListId.IsSet()
}

// HasPriceListId returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasPriceListId() bool {
	if o != nil && o.PriceListId.IsSet() {
		return true
	}

	return false
}

// SetPriceListId gets a reference to the given NullableString and assigns it to the PriceListId field.
func (o *PriceCalculationDto) SetPriceListId(v string) {
	o.PriceListId.Set(&v)
}
// SetPriceListIdNil sets the value for PriceListId to be an explicit nil
func (o *PriceCalculationDto) SetPriceListIdNil() {
	o.PriceListId.Set(nil)
}

// UnsetPriceListId ensures that no value is present for PriceListId, not even an explicit nil
func (o *PriceCalculationDto) UnsetPriceListId() {
	o.PriceListId.Unset()
}

// GetDiscountId returns the DiscountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceCalculationDto) GetDiscountId() string {
	if o == nil || IsNil(o.DiscountId.Get()) {
		var ret string
		return ret
	}
	return *o.DiscountId.Get()
}

// GetDiscountIdOk returns a tuple with the DiscountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceCalculationDto) GetDiscountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscountId.Get(), o.DiscountId.IsSet()
}

// HasDiscountId returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasDiscountId() bool {
	if o != nil && o.DiscountId.IsSet() {
		return true
	}

	return false
}

// SetDiscountId gets a reference to the given NullableString and assigns it to the DiscountId field.
func (o *PriceCalculationDto) SetDiscountId(v string) {
	o.DiscountId.Set(&v)
}
// SetDiscountIdNil sets the value for DiscountId to be an explicit nil
func (o *PriceCalculationDto) SetDiscountIdNil() {
	o.DiscountId.Set(nil)
}

// UnsetDiscountId ensures that no value is present for DiscountId, not even an explicit nil
func (o *PriceCalculationDto) UnsetDiscountId() {
	o.DiscountId.Unset()
}

// GetDiscountListId returns the DiscountListId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceCalculationDto) GetDiscountListId() string {
	if o == nil || IsNil(o.DiscountListId.Get()) {
		var ret string
		return ret
	}
	return *o.DiscountListId.Get()
}

// GetDiscountListIdOk returns a tuple with the DiscountListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceCalculationDto) GetDiscountListIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscountListId.Get(), o.DiscountListId.IsSet()
}

// HasDiscountListId returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasDiscountListId() bool {
	if o != nil && o.DiscountListId.IsSet() {
		return true
	}

	return false
}

// SetDiscountListId gets a reference to the given NullableString and assigns it to the DiscountListId field.
func (o *PriceCalculationDto) SetDiscountListId(v string) {
	o.DiscountListId.Set(&v)
}
// SetDiscountListIdNil sets the value for DiscountListId to be an explicit nil
func (o *PriceCalculationDto) SetDiscountListIdNil() {
	o.DiscountListId.Set(nil)
}

// UnsetDiscountListId ensures that no value is present for DiscountListId, not even an explicit nil
func (o *PriceCalculationDto) UnsetDiscountListId() {
	o.DiscountListId.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceCalculationDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceCalculationDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *PriceCalculationDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *PriceCalculationDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *PriceCalculationDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetEnrollmentId returns the EnrollmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceCalculationDto) GetEnrollmentId() string {
	if o == nil || IsNil(o.EnrollmentId.Get()) {
		var ret string
		return ret
	}
	return *o.EnrollmentId.Get()
}

// GetEnrollmentIdOk returns a tuple with the EnrollmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceCalculationDto) GetEnrollmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnrollmentId.Get(), o.EnrollmentId.IsSet()
}

// HasEnrollmentId returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasEnrollmentId() bool {
	if o != nil && o.EnrollmentId.IsSet() {
		return true
	}

	return false
}

// SetEnrollmentId gets a reference to the given NullableString and assigns it to the EnrollmentId field.
func (o *PriceCalculationDto) SetEnrollmentId(v string) {
	o.EnrollmentId.Set(&v)
}
// SetEnrollmentIdNil sets the value for EnrollmentId to be an explicit nil
func (o *PriceCalculationDto) SetEnrollmentIdNil() {
	o.EnrollmentId.Set(nil)
}

// UnsetEnrollmentId ensures that no value is present for EnrollmentId, not even an explicit nil
func (o *PriceCalculationDto) UnsetEnrollmentId() {
	o.EnrollmentId.Unset()
}

// GetRoundingPolicyId returns the RoundingPolicyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceCalculationDto) GetRoundingPolicyId() string {
	if o == nil || IsNil(o.RoundingPolicyId.Get()) {
		var ret string
		return ret
	}
	return *o.RoundingPolicyId.Get()
}

// GetRoundingPolicyIdOk returns a tuple with the RoundingPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceCalculationDto) GetRoundingPolicyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoundingPolicyId.Get(), o.RoundingPolicyId.IsSet()
}

// HasRoundingPolicyId returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasRoundingPolicyId() bool {
	if o != nil && o.RoundingPolicyId.IsSet() {
		return true
	}

	return false
}

// SetRoundingPolicyId gets a reference to the given NullableString and assigns it to the RoundingPolicyId field.
func (o *PriceCalculationDto) SetRoundingPolicyId(v string) {
	o.RoundingPolicyId.Set(&v)
}
// SetRoundingPolicyIdNil sets the value for RoundingPolicyId to be an explicit nil
func (o *PriceCalculationDto) SetRoundingPolicyIdNil() {
	o.RoundingPolicyId.Set(nil)
}

// UnsetRoundingPolicyId ensures that no value is present for RoundingPolicyId, not even an explicit nil
func (o *PriceCalculationDto) UnsetRoundingPolicyId() {
	o.RoundingPolicyId.Unset()
}

// GetEffectiveDiscountPercent returns the EffectiveDiscountPercent field value if set, zero value otherwise.
func (o *PriceCalculationDto) GetEffectiveDiscountPercent() float64 {
	if o == nil || IsNil(o.EffectiveDiscountPercent) {
		var ret float64
		return ret
	}
	return *o.EffectiveDiscountPercent
}

// GetEffectiveDiscountPercentOk returns a tuple with the EffectiveDiscountPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCalculationDto) GetEffectiveDiscountPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.EffectiveDiscountPercent) {
		return nil, false
	}
	return o.EffectiveDiscountPercent, true
}

// HasEffectiveDiscountPercent returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasEffectiveDiscountPercent() bool {
	if o != nil && !IsNil(o.EffectiveDiscountPercent) {
		return true
	}

	return false
}

// SetEffectiveDiscountPercent gets a reference to the given float64 and assigns it to the EffectiveDiscountPercent field.
func (o *PriceCalculationDto) SetEffectiveDiscountPercent(v float64) {
	o.EffectiveDiscountPercent = &v
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceCalculationDto) GetCurrencyId() string {
	if o == nil || IsNil(o.CurrencyId.Get()) {
		var ret string
		return ret
	}
	return *o.CurrencyId.Get()
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceCalculationDto) GetCurrencyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencyId.Get(), o.CurrencyId.IsSet()
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasCurrencyId() bool {
	if o != nil && o.CurrencyId.IsSet() {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given NullableString and assigns it to the CurrencyId field.
func (o *PriceCalculationDto) SetCurrencyId(v string) {
	o.CurrencyId.Set(&v)
}
// SetCurrencyIdNil sets the value for CurrencyId to be an explicit nil
func (o *PriceCalculationDto) SetCurrencyIdNil() {
	o.CurrencyId.Set(nil)
}

// UnsetCurrencyId ensures that no value is present for CurrencyId, not even an explicit nil
func (o *PriceCalculationDto) UnsetCurrencyId() {
	o.CurrencyId.Unset()
}

// GetTotalBaseAmount returns the TotalBaseAmount field value if set, zero value otherwise.
func (o *PriceCalculationDto) GetTotalBaseAmount() Money {
	if o == nil || IsNil(o.TotalBaseAmount) {
		var ret Money
		return ret
	}
	return *o.TotalBaseAmount
}

// GetTotalBaseAmountOk returns a tuple with the TotalBaseAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCalculationDto) GetTotalBaseAmountOk() (*Money, bool) {
	if o == nil || IsNil(o.TotalBaseAmount) {
		return nil, false
	}
	return o.TotalBaseAmount, true
}

// HasTotalBaseAmount returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasTotalBaseAmount() bool {
	if o != nil && !IsNil(o.TotalBaseAmount) {
		return true
	}

	return false
}

// SetTotalBaseAmount gets a reference to the given Money and assigns it to the TotalBaseAmount field.
func (o *PriceCalculationDto) SetTotalBaseAmount(v Money) {
	o.TotalBaseAmount = &v
}

// GetTotalDiscountsAmount returns the TotalDiscountsAmount field value if set, zero value otherwise.
func (o *PriceCalculationDto) GetTotalDiscountsAmount() Money {
	if o == nil || IsNil(o.TotalDiscountsAmount) {
		var ret Money
		return ret
	}
	return *o.TotalDiscountsAmount
}

// GetTotalDiscountsAmountOk returns a tuple with the TotalDiscountsAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCalculationDto) GetTotalDiscountsAmountOk() (*Money, bool) {
	if o == nil || IsNil(o.TotalDiscountsAmount) {
		return nil, false
	}
	return o.TotalDiscountsAmount, true
}

// HasTotalDiscountsAmount returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasTotalDiscountsAmount() bool {
	if o != nil && !IsNil(o.TotalDiscountsAmount) {
		return true
	}

	return false
}

// SetTotalDiscountsAmount gets a reference to the given Money and assigns it to the TotalDiscountsAmount field.
func (o *PriceCalculationDto) SetTotalDiscountsAmount(v Money) {
	o.TotalDiscountsAmount = &v
}

// GetTotalSurchargesAmount returns the TotalSurchargesAmount field value if set, zero value otherwise.
func (o *PriceCalculationDto) GetTotalSurchargesAmount() Money {
	if o == nil || IsNil(o.TotalSurchargesAmount) {
		var ret Money
		return ret
	}
	return *o.TotalSurchargesAmount
}

// GetTotalSurchargesAmountOk returns a tuple with the TotalSurchargesAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCalculationDto) GetTotalSurchargesAmountOk() (*Money, bool) {
	if o == nil || IsNil(o.TotalSurchargesAmount) {
		return nil, false
	}
	return o.TotalSurchargesAmount, true
}

// HasTotalSurchargesAmount returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasTotalSurchargesAmount() bool {
	if o != nil && !IsNil(o.TotalSurchargesAmount) {
		return true
	}

	return false
}

// SetTotalSurchargesAmount gets a reference to the given Money and assigns it to the TotalSurchargesAmount field.
func (o *PriceCalculationDto) SetTotalSurchargesAmount(v Money) {
	o.TotalSurchargesAmount = &v
}

// GetTotalShippingAmount returns the TotalShippingAmount field value if set, zero value otherwise.
func (o *PriceCalculationDto) GetTotalShippingAmount() Money {
	if o == nil || IsNil(o.TotalShippingAmount) {
		var ret Money
		return ret
	}
	return *o.TotalShippingAmount
}

// GetTotalShippingAmountOk returns a tuple with the TotalShippingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCalculationDto) GetTotalShippingAmountOk() (*Money, bool) {
	if o == nil || IsNil(o.TotalShippingAmount) {
		return nil, false
	}
	return o.TotalShippingAmount, true
}

// HasTotalShippingAmount returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasTotalShippingAmount() bool {
	if o != nil && !IsNil(o.TotalShippingAmount) {
		return true
	}

	return false
}

// SetTotalShippingAmount gets a reference to the given Money and assigns it to the TotalShippingAmount field.
func (o *PriceCalculationDto) SetTotalShippingAmount(v Money) {
	o.TotalShippingAmount = &v
}

// GetTotalShippingTaxAmount returns the TotalShippingTaxAmount field value if set, zero value otherwise.
func (o *PriceCalculationDto) GetTotalShippingTaxAmount() Money {
	if o == nil || IsNil(o.TotalShippingTaxAmount) {
		var ret Money
		return ret
	}
	return *o.TotalShippingTaxAmount
}

// GetTotalShippingTaxAmountOk returns a tuple with the TotalShippingTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCalculationDto) GetTotalShippingTaxAmountOk() (*Money, bool) {
	if o == nil || IsNil(o.TotalShippingTaxAmount) {
		return nil, false
	}
	return o.TotalShippingTaxAmount, true
}

// HasTotalShippingTaxAmount returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasTotalShippingTaxAmount() bool {
	if o != nil && !IsNil(o.TotalShippingTaxAmount) {
		return true
	}

	return false
}

// SetTotalShippingTaxAmount gets a reference to the given Money and assigns it to the TotalShippingTaxAmount field.
func (o *PriceCalculationDto) SetTotalShippingTaxAmount(v Money) {
	o.TotalShippingTaxAmount = &v
}

// GetTotalTaxAmount returns the TotalTaxAmount field value if set, zero value otherwise.
func (o *PriceCalculationDto) GetTotalTaxAmount() Money {
	if o == nil || IsNil(o.TotalTaxAmount) {
		var ret Money
		return ret
	}
	return *o.TotalTaxAmount
}

// GetTotalTaxAmountOk returns a tuple with the TotalTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCalculationDto) GetTotalTaxAmountOk() (*Money, bool) {
	if o == nil || IsNil(o.TotalTaxAmount) {
		return nil, false
	}
	return o.TotalTaxAmount, true
}

// HasTotalTaxAmount returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasTotalTaxAmount() bool {
	if o != nil && !IsNil(o.TotalTaxAmount) {
		return true
	}

	return false
}

// SetTotalTaxAmount gets a reference to the given Money and assigns it to the TotalTaxAmount field.
func (o *PriceCalculationDto) SetTotalTaxAmount(v Money) {
	o.TotalTaxAmount = &v
}

// GetTotalAmount returns the TotalAmount field value if set, zero value otherwise.
func (o *PriceCalculationDto) GetTotalAmount() Money {
	if o == nil || IsNil(o.TotalAmount) {
		var ret Money
		return ret
	}
	return *o.TotalAmount
}

// GetTotalAmountOk returns a tuple with the TotalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceCalculationDto) GetTotalAmountOk() (*Money, bool) {
	if o == nil || IsNil(o.TotalAmount) {
		return nil, false
	}
	return o.TotalAmount, true
}

// HasTotalAmount returns a boolean if a field has been set.
func (o *PriceCalculationDto) HasTotalAmount() bool {
	if o != nil && !IsNil(o.TotalAmount) {
		return true
	}

	return false
}

// SetTotalAmount gets a reference to the given Money and assigns it to the TotalAmount field.
func (o *PriceCalculationDto) SetTotalAmount(v Money) {
	o.TotalAmount = &v
}

func (o PriceCalculationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceCalculationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.ItemId.IsSet() {
		toSerialize["itemId"] = o.ItemId.Get()
	}
	if o.UnitId.IsSet() {
		toSerialize["unitId"] = o.UnitId.Get()
	}
	if o.UnitGroupId.IsSet() {
		toSerialize["unitGroupId"] = o.UnitGroupId.Get()
	}
	if o.PriceId.IsSet() {
		toSerialize["priceId"] = o.PriceId.Get()
	}
	if o.PriceListId.IsSet() {
		toSerialize["priceListId"] = o.PriceListId.Get()
	}
	if o.DiscountId.IsSet() {
		toSerialize["discountId"] = o.DiscountId.Get()
	}
	if o.DiscountListId.IsSet() {
		toSerialize["discountListId"] = o.DiscountListId.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.EnrollmentId.IsSet() {
		toSerialize["enrollmentId"] = o.EnrollmentId.Get()
	}
	if o.RoundingPolicyId.IsSet() {
		toSerialize["roundingPolicyId"] = o.RoundingPolicyId.Get()
	}
	if !IsNil(o.EffectiveDiscountPercent) {
		toSerialize["effectiveDiscountPercent"] = o.EffectiveDiscountPercent
	}
	if o.CurrencyId.IsSet() {
		toSerialize["currencyId"] = o.CurrencyId.Get()
	}
	if !IsNil(o.TotalBaseAmount) {
		toSerialize["totalBaseAmount"] = o.TotalBaseAmount
	}
	if !IsNil(o.TotalDiscountsAmount) {
		toSerialize["totalDiscountsAmount"] = o.TotalDiscountsAmount
	}
	if !IsNil(o.TotalSurchargesAmount) {
		toSerialize["totalSurchargesAmount"] = o.TotalSurchargesAmount
	}
	if !IsNil(o.TotalShippingAmount) {
		toSerialize["totalShippingAmount"] = o.TotalShippingAmount
	}
	if !IsNil(o.TotalShippingTaxAmount) {
		toSerialize["totalShippingTaxAmount"] = o.TotalShippingTaxAmount
	}
	if !IsNil(o.TotalTaxAmount) {
		toSerialize["totalTaxAmount"] = o.TotalTaxAmount
	}
	if !IsNil(o.TotalAmount) {
		toSerialize["totalAmount"] = o.TotalAmount
	}
	return toSerialize, nil
}

type NullablePriceCalculationDto struct {
	value *PriceCalculationDto
	isSet bool
}

func (v NullablePriceCalculationDto) Get() *PriceCalculationDto {
	return v.value
}

func (v *NullablePriceCalculationDto) Set(val *PriceCalculationDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceCalculationDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceCalculationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceCalculationDto(val *PriceCalculationDto) *NullablePriceCalculationDto {
	return &NullablePriceCalculationDto{value: val, isSet: true}
}

func (v NullablePriceCalculationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceCalculationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


