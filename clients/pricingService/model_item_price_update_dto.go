/*
PricingService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ItemPriceUpdateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemPriceUpdateDto{}

// ItemPriceUpdateDto struct for ItemPriceUpdateDto
type ItemPriceUpdateDto struct {
	Price *float64 `json:"price,omitempty"`
	ItemId NullableString `json:"itemId,omitempty"`
	UnitId NullableString `json:"unitId,omitempty"`
	Percent *float64 `json:"percent,omitempty"`
	UnitGroupId NullableString `json:"unitGroupId,omitempty"`
	CurrencyId NullableString `json:"currencyId,omitempty"`
	DiscountListId NullableString `json:"discountListId,omitempty"`
	RoundingPolicyId NullableString `json:"roundingPolicyId,omitempty"`
}

// NewItemPriceUpdateDto instantiates a new ItemPriceUpdateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemPriceUpdateDto() *ItemPriceUpdateDto {
	this := ItemPriceUpdateDto{}
	return &this
}

// NewItemPriceUpdateDtoWithDefaults instantiates a new ItemPriceUpdateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemPriceUpdateDtoWithDefaults() *ItemPriceUpdateDto {
	this := ItemPriceUpdateDto{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ItemPriceUpdateDto) GetPrice() float64 {
	if o == nil || IsNil(o.Price) {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemPriceUpdateDto) GetPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ItemPriceUpdateDto) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *ItemPriceUpdateDto) SetPrice(v float64) {
	o.Price = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPriceUpdateDto) GetItemId() string {
	if o == nil || IsNil(o.ItemId.Get()) {
		var ret string
		return ret
	}
	return *o.ItemId.Get()
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPriceUpdateDto) GetItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemId.Get(), o.ItemId.IsSet()
}

// HasItemId returns a boolean if a field has been set.
func (o *ItemPriceUpdateDto) HasItemId() bool {
	if o != nil && o.ItemId.IsSet() {
		return true
	}

	return false
}

// SetItemId gets a reference to the given NullableString and assigns it to the ItemId field.
func (o *ItemPriceUpdateDto) SetItemId(v string) {
	o.ItemId.Set(&v)
}
// SetItemIdNil sets the value for ItemId to be an explicit nil
func (o *ItemPriceUpdateDto) SetItemIdNil() {
	o.ItemId.Set(nil)
}

// UnsetItemId ensures that no value is present for ItemId, not even an explicit nil
func (o *ItemPriceUpdateDto) UnsetItemId() {
	o.ItemId.Unset()
}

// GetUnitId returns the UnitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPriceUpdateDto) GetUnitId() string {
	if o == nil || IsNil(o.UnitId.Get()) {
		var ret string
		return ret
	}
	return *o.UnitId.Get()
}

// GetUnitIdOk returns a tuple with the UnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPriceUpdateDto) GetUnitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitId.Get(), o.UnitId.IsSet()
}

// HasUnitId returns a boolean if a field has been set.
func (o *ItemPriceUpdateDto) HasUnitId() bool {
	if o != nil && o.UnitId.IsSet() {
		return true
	}

	return false
}

// SetUnitId gets a reference to the given NullableString and assigns it to the UnitId field.
func (o *ItemPriceUpdateDto) SetUnitId(v string) {
	o.UnitId.Set(&v)
}
// SetUnitIdNil sets the value for UnitId to be an explicit nil
func (o *ItemPriceUpdateDto) SetUnitIdNil() {
	o.UnitId.Set(nil)
}

// UnsetUnitId ensures that no value is present for UnitId, not even an explicit nil
func (o *ItemPriceUpdateDto) UnsetUnitId() {
	o.UnitId.Unset()
}

// GetPercent returns the Percent field value if set, zero value otherwise.
func (o *ItemPriceUpdateDto) GetPercent() float64 {
	if o == nil || IsNil(o.Percent) {
		var ret float64
		return ret
	}
	return *o.Percent
}

// GetPercentOk returns a tuple with the Percent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ItemPriceUpdateDto) GetPercentOk() (*float64, bool) {
	if o == nil || IsNil(o.Percent) {
		return nil, false
	}
	return o.Percent, true
}

// HasPercent returns a boolean if a field has been set.
func (o *ItemPriceUpdateDto) HasPercent() bool {
	if o != nil && !IsNil(o.Percent) {
		return true
	}

	return false
}

// SetPercent gets a reference to the given float64 and assigns it to the Percent field.
func (o *ItemPriceUpdateDto) SetPercent(v float64) {
	o.Percent = &v
}

// GetUnitGroupId returns the UnitGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPriceUpdateDto) GetUnitGroupId() string {
	if o == nil || IsNil(o.UnitGroupId.Get()) {
		var ret string
		return ret
	}
	return *o.UnitGroupId.Get()
}

// GetUnitGroupIdOk returns a tuple with the UnitGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPriceUpdateDto) GetUnitGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitGroupId.Get(), o.UnitGroupId.IsSet()
}

// HasUnitGroupId returns a boolean if a field has been set.
func (o *ItemPriceUpdateDto) HasUnitGroupId() bool {
	if o != nil && o.UnitGroupId.IsSet() {
		return true
	}

	return false
}

// SetUnitGroupId gets a reference to the given NullableString and assigns it to the UnitGroupId field.
func (o *ItemPriceUpdateDto) SetUnitGroupId(v string) {
	o.UnitGroupId.Set(&v)
}
// SetUnitGroupIdNil sets the value for UnitGroupId to be an explicit nil
func (o *ItemPriceUpdateDto) SetUnitGroupIdNil() {
	o.UnitGroupId.Set(nil)
}

// UnsetUnitGroupId ensures that no value is present for UnitGroupId, not even an explicit nil
func (o *ItemPriceUpdateDto) UnsetUnitGroupId() {
	o.UnitGroupId.Unset()
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPriceUpdateDto) GetCurrencyId() string {
	if o == nil || IsNil(o.CurrencyId.Get()) {
		var ret string
		return ret
	}
	return *o.CurrencyId.Get()
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPriceUpdateDto) GetCurrencyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencyId.Get(), o.CurrencyId.IsSet()
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *ItemPriceUpdateDto) HasCurrencyId() bool {
	if o != nil && o.CurrencyId.IsSet() {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given NullableString and assigns it to the CurrencyId field.
func (o *ItemPriceUpdateDto) SetCurrencyId(v string) {
	o.CurrencyId.Set(&v)
}
// SetCurrencyIdNil sets the value for CurrencyId to be an explicit nil
func (o *ItemPriceUpdateDto) SetCurrencyIdNil() {
	o.CurrencyId.Set(nil)
}

// UnsetCurrencyId ensures that no value is present for CurrencyId, not even an explicit nil
func (o *ItemPriceUpdateDto) UnsetCurrencyId() {
	o.CurrencyId.Unset()
}

// GetDiscountListId returns the DiscountListId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPriceUpdateDto) GetDiscountListId() string {
	if o == nil || IsNil(o.DiscountListId.Get()) {
		var ret string
		return ret
	}
	return *o.DiscountListId.Get()
}

// GetDiscountListIdOk returns a tuple with the DiscountListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPriceUpdateDto) GetDiscountListIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscountListId.Get(), o.DiscountListId.IsSet()
}

// HasDiscountListId returns a boolean if a field has been set.
func (o *ItemPriceUpdateDto) HasDiscountListId() bool {
	if o != nil && o.DiscountListId.IsSet() {
		return true
	}

	return false
}

// SetDiscountListId gets a reference to the given NullableString and assigns it to the DiscountListId field.
func (o *ItemPriceUpdateDto) SetDiscountListId(v string) {
	o.DiscountListId.Set(&v)
}
// SetDiscountListIdNil sets the value for DiscountListId to be an explicit nil
func (o *ItemPriceUpdateDto) SetDiscountListIdNil() {
	o.DiscountListId.Set(nil)
}

// UnsetDiscountListId ensures that no value is present for DiscountListId, not even an explicit nil
func (o *ItemPriceUpdateDto) UnsetDiscountListId() {
	o.DiscountListId.Unset()
}

// GetRoundingPolicyId returns the RoundingPolicyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ItemPriceUpdateDto) GetRoundingPolicyId() string {
	if o == nil || IsNil(o.RoundingPolicyId.Get()) {
		var ret string
		return ret
	}
	return *o.RoundingPolicyId.Get()
}

// GetRoundingPolicyIdOk returns a tuple with the RoundingPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ItemPriceUpdateDto) GetRoundingPolicyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoundingPolicyId.Get(), o.RoundingPolicyId.IsSet()
}

// HasRoundingPolicyId returns a boolean if a field has been set.
func (o *ItemPriceUpdateDto) HasRoundingPolicyId() bool {
	if o != nil && o.RoundingPolicyId.IsSet() {
		return true
	}

	return false
}

// SetRoundingPolicyId gets a reference to the given NullableString and assigns it to the RoundingPolicyId field.
func (o *ItemPriceUpdateDto) SetRoundingPolicyId(v string) {
	o.RoundingPolicyId.Set(&v)
}
// SetRoundingPolicyIdNil sets the value for RoundingPolicyId to be an explicit nil
func (o *ItemPriceUpdateDto) SetRoundingPolicyIdNil() {
	o.RoundingPolicyId.Set(nil)
}

// UnsetRoundingPolicyId ensures that no value is present for RoundingPolicyId, not even an explicit nil
func (o *ItemPriceUpdateDto) UnsetRoundingPolicyId() {
	o.RoundingPolicyId.Unset()
}

func (o ItemPriceUpdateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemPriceUpdateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if o.ItemId.IsSet() {
		toSerialize["itemId"] = o.ItemId.Get()
	}
	if o.UnitId.IsSet() {
		toSerialize["unitId"] = o.UnitId.Get()
	}
	if !IsNil(o.Percent) {
		toSerialize["percent"] = o.Percent
	}
	if o.UnitGroupId.IsSet() {
		toSerialize["unitGroupId"] = o.UnitGroupId.Get()
	}
	if o.CurrencyId.IsSet() {
		toSerialize["currencyId"] = o.CurrencyId.Get()
	}
	if o.DiscountListId.IsSet() {
		toSerialize["discountListId"] = o.DiscountListId.Get()
	}
	if o.RoundingPolicyId.IsSet() {
		toSerialize["roundingPolicyId"] = o.RoundingPolicyId.Get()
	}
	return toSerialize, nil
}

type NullableItemPriceUpdateDto struct {
	value *ItemPriceUpdateDto
	isSet bool
}

func (v NullableItemPriceUpdateDto) Get() *ItemPriceUpdateDto {
	return v.value
}

func (v *NullableItemPriceUpdateDto) Set(val *ItemPriceUpdateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableItemPriceUpdateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableItemPriceUpdateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemPriceUpdateDto(val *ItemPriceUpdateDto) *NullableItemPriceUpdateDto {
	return &NullableItemPriceUpdateDto{value: val, isSet: true}
}

func (v NullableItemPriceUpdateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemPriceUpdateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


