/*
PricingService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PriceListDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PriceListDto{}

// PriceListDto struct for PriceListDto
type PriceListDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	Name NullableString `json:"name,omitempty"`
	StartDate *time.Time `json:"startDate,omitempty"`
	EndDate *time.Time `json:"endDate,omitempty"`
	Description NullableString `json:"description,omitempty"`
	CurrencyId NullableString `json:"currencyId,omitempty"`
	TenantId NullableString `json:"tenantId,omitempty"`
	UnitId NullableString `json:"unitId,omitempty"`
	UnitGroupId NullableString `json:"unitGroupId,omitempty"`
	PartnerVisible *bool `json:"partnerVisible,omitempty"`
	UnitOfMeasureDependant *bool `json:"unitOfMeasureDependant,omitempty"`
	EnrolmentId NullableString `json:"enrolmentId,omitempty"`
}

// NewPriceListDto instantiates a new PriceListDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceListDto() *PriceListDto {
	this := PriceListDto{}
	return &this
}

// NewPriceListDtoWithDefaults instantiates a new PriceListDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceListDtoWithDefaults() *PriceListDto {
	this := PriceListDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceListDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceListDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PriceListDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *PriceListDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PriceListDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PriceListDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceListDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceListDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *PriceListDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *PriceListDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *PriceListDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *PriceListDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceListDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceListDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *PriceListDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *PriceListDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *PriceListDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *PriceListDto) UnsetName() {
	o.Name.Unset()
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *PriceListDto) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceListDto) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *PriceListDto) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *PriceListDto) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *PriceListDto) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceListDto) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *PriceListDto) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *PriceListDto) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceListDto) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceListDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PriceListDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PriceListDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PriceListDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PriceListDto) UnsetDescription() {
	o.Description.Unset()
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceListDto) GetCurrencyId() string {
	if o == nil || IsNil(o.CurrencyId.Get()) {
		var ret string
		return ret
	}
	return *o.CurrencyId.Get()
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceListDto) GetCurrencyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencyId.Get(), o.CurrencyId.IsSet()
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *PriceListDto) HasCurrencyId() bool {
	if o != nil && o.CurrencyId.IsSet() {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given NullableString and assigns it to the CurrencyId field.
func (o *PriceListDto) SetCurrencyId(v string) {
	o.CurrencyId.Set(&v)
}
// SetCurrencyIdNil sets the value for CurrencyId to be an explicit nil
func (o *PriceListDto) SetCurrencyIdNil() {
	o.CurrencyId.Set(nil)
}

// UnsetCurrencyId ensures that no value is present for CurrencyId, not even an explicit nil
func (o *PriceListDto) UnsetCurrencyId() {
	o.CurrencyId.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceListDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceListDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *PriceListDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *PriceListDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *PriceListDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *PriceListDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetUnitId returns the UnitId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceListDto) GetUnitId() string {
	if o == nil || IsNil(o.UnitId.Get()) {
		var ret string
		return ret
	}
	return *o.UnitId.Get()
}

// GetUnitIdOk returns a tuple with the UnitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceListDto) GetUnitIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitId.Get(), o.UnitId.IsSet()
}

// HasUnitId returns a boolean if a field has been set.
func (o *PriceListDto) HasUnitId() bool {
	if o != nil && o.UnitId.IsSet() {
		return true
	}

	return false
}

// SetUnitId gets a reference to the given NullableString and assigns it to the UnitId field.
func (o *PriceListDto) SetUnitId(v string) {
	o.UnitId.Set(&v)
}
// SetUnitIdNil sets the value for UnitId to be an explicit nil
func (o *PriceListDto) SetUnitIdNil() {
	o.UnitId.Set(nil)
}

// UnsetUnitId ensures that no value is present for UnitId, not even an explicit nil
func (o *PriceListDto) UnsetUnitId() {
	o.UnitId.Unset()
}

// GetUnitGroupId returns the UnitGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceListDto) GetUnitGroupId() string {
	if o == nil || IsNil(o.UnitGroupId.Get()) {
		var ret string
		return ret
	}
	return *o.UnitGroupId.Get()
}

// GetUnitGroupIdOk returns a tuple with the UnitGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceListDto) GetUnitGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitGroupId.Get(), o.UnitGroupId.IsSet()
}

// HasUnitGroupId returns a boolean if a field has been set.
func (o *PriceListDto) HasUnitGroupId() bool {
	if o != nil && o.UnitGroupId.IsSet() {
		return true
	}

	return false
}

// SetUnitGroupId gets a reference to the given NullableString and assigns it to the UnitGroupId field.
func (o *PriceListDto) SetUnitGroupId(v string) {
	o.UnitGroupId.Set(&v)
}
// SetUnitGroupIdNil sets the value for UnitGroupId to be an explicit nil
func (o *PriceListDto) SetUnitGroupIdNil() {
	o.UnitGroupId.Set(nil)
}

// UnsetUnitGroupId ensures that no value is present for UnitGroupId, not even an explicit nil
func (o *PriceListDto) UnsetUnitGroupId() {
	o.UnitGroupId.Unset()
}

// GetPartnerVisible returns the PartnerVisible field value if set, zero value otherwise.
func (o *PriceListDto) GetPartnerVisible() bool {
	if o == nil || IsNil(o.PartnerVisible) {
		var ret bool
		return ret
	}
	return *o.PartnerVisible
}

// GetPartnerVisibleOk returns a tuple with the PartnerVisible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceListDto) GetPartnerVisibleOk() (*bool, bool) {
	if o == nil || IsNil(o.PartnerVisible) {
		return nil, false
	}
	return o.PartnerVisible, true
}

// HasPartnerVisible returns a boolean if a field has been set.
func (o *PriceListDto) HasPartnerVisible() bool {
	if o != nil && !IsNil(o.PartnerVisible) {
		return true
	}

	return false
}

// SetPartnerVisible gets a reference to the given bool and assigns it to the PartnerVisible field.
func (o *PriceListDto) SetPartnerVisible(v bool) {
	o.PartnerVisible = &v
}

// GetUnitOfMeasureDependant returns the UnitOfMeasureDependant field value if set, zero value otherwise.
func (o *PriceListDto) GetUnitOfMeasureDependant() bool {
	if o == nil || IsNil(o.UnitOfMeasureDependant) {
		var ret bool
		return ret
	}
	return *o.UnitOfMeasureDependant
}

// GetUnitOfMeasureDependantOk returns a tuple with the UnitOfMeasureDependant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceListDto) GetUnitOfMeasureDependantOk() (*bool, bool) {
	if o == nil || IsNil(o.UnitOfMeasureDependant) {
		return nil, false
	}
	return o.UnitOfMeasureDependant, true
}

// HasUnitOfMeasureDependant returns a boolean if a field has been set.
func (o *PriceListDto) HasUnitOfMeasureDependant() bool {
	if o != nil && !IsNil(o.UnitOfMeasureDependant) {
		return true
	}

	return false
}

// SetUnitOfMeasureDependant gets a reference to the given bool and assigns it to the UnitOfMeasureDependant field.
func (o *PriceListDto) SetUnitOfMeasureDependant(v bool) {
	o.UnitOfMeasureDependant = &v
}

// GetEnrolmentId returns the EnrolmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PriceListDto) GetEnrolmentId() string {
	if o == nil || IsNil(o.EnrolmentId.Get()) {
		var ret string
		return ret
	}
	return *o.EnrolmentId.Get()
}

// GetEnrolmentIdOk returns a tuple with the EnrolmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PriceListDto) GetEnrolmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnrolmentId.Get(), o.EnrolmentId.IsSet()
}

// HasEnrolmentId returns a boolean if a field has been set.
func (o *PriceListDto) HasEnrolmentId() bool {
	if o != nil && o.EnrolmentId.IsSet() {
		return true
	}

	return false
}

// SetEnrolmentId gets a reference to the given NullableString and assigns it to the EnrolmentId field.
func (o *PriceListDto) SetEnrolmentId(v string) {
	o.EnrolmentId.Set(&v)
}
// SetEnrolmentIdNil sets the value for EnrolmentId to be an explicit nil
func (o *PriceListDto) SetEnrolmentIdNil() {
	o.EnrolmentId.Set(nil)
}

// UnsetEnrolmentId ensures that no value is present for EnrolmentId, not even an explicit nil
func (o *PriceListDto) UnsetEnrolmentId() {
	o.EnrolmentId.Unset()
}

func (o PriceListDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PriceListDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.CurrencyId.IsSet() {
		toSerialize["currencyId"] = o.CurrencyId.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.UnitId.IsSet() {
		toSerialize["unitId"] = o.UnitId.Get()
	}
	if o.UnitGroupId.IsSet() {
		toSerialize["unitGroupId"] = o.UnitGroupId.Get()
	}
	if !IsNil(o.PartnerVisible) {
		toSerialize["partnerVisible"] = o.PartnerVisible
	}
	if !IsNil(o.UnitOfMeasureDependant) {
		toSerialize["unitOfMeasureDependant"] = o.UnitOfMeasureDependant
	}
	if o.EnrolmentId.IsSet() {
		toSerialize["enrolmentId"] = o.EnrolmentId.Get()
	}
	return toSerialize, nil
}

type NullablePriceListDto struct {
	value *PriceListDto
	isSet bool
}

func (v NullablePriceListDto) Get() *PriceListDto {
	return v.value
}

func (v *NullablePriceListDto) Set(val *PriceListDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceListDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceListDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceListDto(val *PriceListDto) *NullablePriceListDto {
	return &NullablePriceListDto{value: val, isSet: true}
}

func (v NullablePriceListDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceListDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


