/*
DealsService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DealUnitFlowsAPIService DealUnitFlowsAPI service
type DealUnitFlowsAPIService service

type ApiApiV2DealsServiceDealUnitFlowsCountGetRequest struct {
	ctx context.Context
	ApiService *DealUnitFlowsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2DealsServiceDealUnitFlowsCountGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitFlowsCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsCountGetRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceDealUnitFlowsCountGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsCountGetRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceDealUnitFlowsCountGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitFlowsCountGetExecute(r)
}

/*
ApiV2DealsServiceDealUnitFlowsCountGet Method for ApiV2DealsServiceDealUnitFlowsCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2DealsServiceDealUnitFlowsCountGetRequest
*/
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsCountGet(ctx context.Context) ApiApiV2DealsServiceDealUnitFlowsCountGetRequest {
	return ApiApiV2DealsServiceDealUnitFlowsCountGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsCountGetExecute(r ApiApiV2DealsServiceDealUnitFlowsCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitFlowsAPIService.ApiV2DealsServiceDealUnitFlowsCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnitFlows/Count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteRequest struct {
	ctx context.Context
	ApiService *DealUnitFlowsAPIService
	tenantId *string
	dealUnitFlowId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteExecute(r)
}

/*
ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDelete Method for ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitFlowId
 @return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteRequest
*/
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDelete(ctx context.Context, dealUnitFlowId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteRequest {
	return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitFlowId: dealUnitFlowId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteExecute(r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitFlowsAPIService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnitFlows/{dealUnitFlowId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitFlowId"+"}", url.PathEscape(parameterValueToString(r.dealUnitFlowId, "dealUnitFlowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetRequest struct {
	ctx context.Context
	ApiService *DealUnitFlowsAPIService
	tenantId *string
	dealUnitFlowId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetRequest) Execute() (*DealUnitFlowDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetExecute(r)
}

/*
ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGet Method for ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitFlowId
 @return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetRequest
*/
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGet(ctx context.Context, dealUnitFlowId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetRequest {
	return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitFlowId: dealUnitFlowId,
	}
}

// Execute executes the request
//  @return DealUnitFlowDtoEnvelope
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetExecute(r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGetRequest) (*DealUnitFlowDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DealUnitFlowDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitFlowsAPIService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnitFlows/{dealUnitFlowId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitFlowId"+"}", url.PathEscape(parameterValueToString(r.dealUnitFlowId, "dealUnitFlowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest struct {
	ctx context.Context
	ApiService *DealUnitFlowsAPIService
	tenantId *string
	dealUnitFlowId string
	apiVersion *string
	xApiVersion *string
	dealUnitFlowUpdateDto *DealUnitFlowUpdateDto
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest) DealUnitFlowUpdateDto(dealUnitFlowUpdateDto DealUnitFlowUpdateDto) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest {
	r.dealUnitFlowUpdateDto = &dealUnitFlowUpdateDto
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutExecute(r)
}

/*
ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPut Method for ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitFlowId
 @return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest
*/
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPut(ctx context.Context, dealUnitFlowId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest {
	return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitFlowId: dealUnitFlowId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutExecute(r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitFlowsAPIService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnitFlows/{dealUnitFlowId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitFlowId"+"}", url.PathEscape(parameterValueToString(r.dealUnitFlowId, "dealUnitFlowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.dealUnitFlowUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetRequest struct {
	ctx context.Context
	ApiService *DealUnitFlowsAPIService
	tenantId *string
	dealUnitFlowId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetExecute(r)
}

/*
ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGet Method for ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitFlowId
 @return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetRequest
*/
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGet(ctx context.Context, dealUnitFlowId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetRequest {
	return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitFlowId: dealUnitFlowId,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetExecute(r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitFlowsAPIService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnitFlows/{dealUnitFlowId}/Stages/Count"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitFlowId"+"}", url.PathEscape(parameterValueToString(r.dealUnitFlowId, "dealUnitFlowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteRequest struct {
	ctx context.Context
	ApiService *DealUnitFlowsAPIService
	tenantId *string
	dealUnitFlowId string
	dealUnitFlowStageId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteExecute(r)
}

/*
ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDelete Method for ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitFlowId
 @param dealUnitFlowStageId
 @return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteRequest
*/
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDelete(ctx context.Context, dealUnitFlowId string, dealUnitFlowStageId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteRequest {
	return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitFlowId: dealUnitFlowId,
		dealUnitFlowStageId: dealUnitFlowStageId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteExecute(r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitFlowsAPIService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnitFlows/{dealUnitFlowId}/Stages/{dealUnitFlowStageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitFlowId"+"}", url.PathEscape(parameterValueToString(r.dealUnitFlowId, "dealUnitFlowId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitFlowStageId"+"}", url.PathEscape(parameterValueToString(r.dealUnitFlowStageId, "dealUnitFlowStageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetRequest struct {
	ctx context.Context
	ApiService *DealUnitFlowsAPIService
	tenantId *string
	dealUnitFlowId string
	dealUnitFlowStageId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetRequest) Execute() (*DealUnitFlowStageDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetExecute(r)
}

/*
ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGet Method for ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitFlowId
 @param dealUnitFlowStageId
 @return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetRequest
*/
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGet(ctx context.Context, dealUnitFlowId string, dealUnitFlowStageId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetRequest {
	return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitFlowId: dealUnitFlowId,
		dealUnitFlowStageId: dealUnitFlowStageId,
	}
}

// Execute executes the request
//  @return DealUnitFlowStageDtoEnvelope
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetExecute(r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGetRequest) (*DealUnitFlowStageDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DealUnitFlowStageDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitFlowsAPIService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnitFlows/{dealUnitFlowId}/Stages/{dealUnitFlowStageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitFlowId"+"}", url.PathEscape(parameterValueToString(r.dealUnitFlowId, "dealUnitFlowId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitFlowStageId"+"}", url.PathEscape(parameterValueToString(r.dealUnitFlowStageId, "dealUnitFlowStageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest struct {
	ctx context.Context
	ApiService *DealUnitFlowsAPIService
	tenantId *string
	dealUnitFlowId string
	dealUnitFlowStageId string
	apiVersion *string
	xApiVersion *string
	dealUnitFlowStageUpdateDto *DealUnitFlowStageUpdateDto
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest) DealUnitFlowStageUpdateDto(dealUnitFlowStageUpdateDto DealUnitFlowStageUpdateDto) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest {
	r.dealUnitFlowStageUpdateDto = &dealUnitFlowStageUpdateDto
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutExecute(r)
}

/*
ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPut Method for ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitFlowId
 @param dealUnitFlowStageId
 @return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest
*/
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPut(ctx context.Context, dealUnitFlowId string, dealUnitFlowStageId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest {
	return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitFlowId: dealUnitFlowId,
		dealUnitFlowStageId: dealUnitFlowStageId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutExecute(r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitFlowsAPIService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnitFlows/{dealUnitFlowId}/Stages/{dealUnitFlowStageId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitFlowId"+"}", url.PathEscape(parameterValueToString(r.dealUnitFlowId, "dealUnitFlowId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitFlowStageId"+"}", url.PathEscape(parameterValueToString(r.dealUnitFlowStageId, "dealUnitFlowStageId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.dealUnitFlowStageUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetRequest struct {
	ctx context.Context
	ApiService *DealUnitFlowsAPIService
	tenantId *string
	dealUnitFlowId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetRequest) Execute() (*DealUnitFlowStageDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetExecute(r)
}

/*
ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGet Method for ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitFlowId
 @return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetRequest
*/
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGet(ctx context.Context, dealUnitFlowId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetRequest {
	return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitFlowId: dealUnitFlowId,
	}
}

// Execute executes the request
//  @return DealUnitFlowStageDtoListEnvelope
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetExecute(r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGetRequest) (*DealUnitFlowStageDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DealUnitFlowStageDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitFlowsAPIService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnitFlows/{dealUnitFlowId}/Stages"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitFlowId"+"}", url.PathEscape(parameterValueToString(r.dealUnitFlowId, "dealUnitFlowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest struct {
	ctx context.Context
	ApiService *DealUnitFlowsAPIService
	tenantId *string
	dealUnitFlowId string
	apiVersion *string
	xApiVersion *string
	dealUnitFlowStageCreateDto *DealUnitFlowStageCreateDto
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest) DealUnitFlowStageCreateDto(dealUnitFlowStageCreateDto DealUnitFlowStageCreateDto) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest {
	r.dealUnitFlowStageCreateDto = &dealUnitFlowStageCreateDto
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostExecute(r)
}

/*
ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPost Method for ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitFlowId
 @return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest
*/
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPost(ctx context.Context, dealUnitFlowId string) ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest {
	return ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitFlowId: dealUnitFlowId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostExecute(r ApiApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitFlowsAPIService.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnitFlows/{dealUnitFlowId}/Stages"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitFlowId"+"}", url.PathEscape(parameterValueToString(r.dealUnitFlowId, "dealUnitFlowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.dealUnitFlowStageCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitFlowsGetRequest struct {
	ctx context.Context
	ApiService *DealUnitFlowsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2DealsServiceDealUnitFlowsGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitFlowsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsGetRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceDealUnitFlowsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsGetRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceDealUnitFlowsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsGetRequest) Execute() (*DealUnitFlowDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitFlowsGetExecute(r)
}

/*
ApiV2DealsServiceDealUnitFlowsGet Method for ApiV2DealsServiceDealUnitFlowsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2DealsServiceDealUnitFlowsGetRequest
*/
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsGet(ctx context.Context) ApiApiV2DealsServiceDealUnitFlowsGetRequest {
	return ApiApiV2DealsServiceDealUnitFlowsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DealUnitFlowDtoListEnvelope
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsGetExecute(r ApiApiV2DealsServiceDealUnitFlowsGetRequest) (*DealUnitFlowDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DealUnitFlowDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitFlowsAPIService.ApiV2DealsServiceDealUnitFlowsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnitFlows"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitFlowsPostRequest struct {
	ctx context.Context
	ApiService *DealUnitFlowsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
	dealUnitFlowCreateDto *DealUnitFlowCreateDto
}

func (r ApiApiV2DealsServiceDealUnitFlowsPostRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitFlowsPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsPostRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceDealUnitFlowsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsPostRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceDealUnitFlowsPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsPostRequest) DealUnitFlowCreateDto(dealUnitFlowCreateDto DealUnitFlowCreateDto) ApiApiV2DealsServiceDealUnitFlowsPostRequest {
	r.dealUnitFlowCreateDto = &dealUnitFlowCreateDto
	return r
}

func (r ApiApiV2DealsServiceDealUnitFlowsPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitFlowsPostExecute(r)
}

/*
ApiV2DealsServiceDealUnitFlowsPost Method for ApiV2DealsServiceDealUnitFlowsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2DealsServiceDealUnitFlowsPostRequest
*/
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsPost(ctx context.Context) ApiApiV2DealsServiceDealUnitFlowsPostRequest {
	return ApiApiV2DealsServiceDealUnitFlowsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitFlowsAPIService) ApiV2DealsServiceDealUnitFlowsPostExecute(r ApiApiV2DealsServiceDealUnitFlowsPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitFlowsAPIService.ApiV2DealsServiceDealUnitFlowsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnitFlows"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.dealUnitFlowCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
