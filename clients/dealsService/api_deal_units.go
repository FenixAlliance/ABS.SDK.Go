/*
DealsService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DealUnitsAPIService DealUnitsAPI service
type DealUnitsAPIService service

type ApiApiV2DealsServiceDealUnitsCountGetRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
}

func (r ApiApiV2DealsServiceDealUnitsCountGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsCountGetExecute(r)
}

/*
ApiV2DealsServiceDealUnitsCountGet Method for ApiV2DealsServiceDealUnitsCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2DealsServiceDealUnitsCountGetRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsCountGet(ctx context.Context) ApiApiV2DealsServiceDealUnitsCountGetRequest {
	return ApiApiV2DealsServiceDealUnitsCountGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsCountGetExecute(r ApiApiV2DealsServiceDealUnitsCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/Count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsDealUnitIdCalculatePutRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
	dealUnitId string
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdCalculatePutRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsDealUnitIdCalculatePutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdCalculatePutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsDealUnitIdCalculatePutExecute(r)
}

/*
ApiV2DealsServiceDealUnitsDealUnitIdCalculatePut Method for ApiV2DealsServiceDealUnitsDealUnitIdCalculatePut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitId
 @return ApiApiV2DealsServiceDealUnitsDealUnitIdCalculatePutRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdCalculatePut(ctx context.Context, dealUnitId string) ApiApiV2DealsServiceDealUnitsDealUnitIdCalculatePutRequest {
	return ApiApiV2DealsServiceDealUnitsDealUnitIdCalculatePutRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitId: dealUnitId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdCalculatePutExecute(r ApiApiV2DealsServiceDealUnitsDealUnitIdCalculatePutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsDealUnitIdCalculatePut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/{dealUnitId}/Calculate"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitId"+"}", url.PathEscape(parameterValueToString(r.dealUnitId, "dealUnitId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsDealUnitIdDeleteRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
	dealUnitId string
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdDeleteRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsDealUnitIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsDealUnitIdDeleteExecute(r)
}

/*
ApiV2DealsServiceDealUnitsDealUnitIdDelete Method for ApiV2DealsServiceDealUnitsDealUnitIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitId
 @return ApiApiV2DealsServiceDealUnitsDealUnitIdDeleteRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdDelete(ctx context.Context, dealUnitId string) ApiApiV2DealsServiceDealUnitsDealUnitIdDeleteRequest {
	return ApiApiV2DealsServiceDealUnitsDealUnitIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitId: dealUnitId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdDeleteExecute(r ApiApiV2DealsServiceDealUnitsDealUnitIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsDealUnitIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/{dealUnitId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitId"+"}", url.PathEscape(parameterValueToString(r.dealUnitId, "dealUnitId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsDealUnitIdExtendedGetRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
	dealUnitId string
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdExtendedGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsDealUnitIdExtendedGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdExtendedGetRequest) Execute() (*ExtendedDealUnitDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsDealUnitIdExtendedGetExecute(r)
}

/*
ApiV2DealsServiceDealUnitsDealUnitIdExtendedGet Method for ApiV2DealsServiceDealUnitsDealUnitIdExtendedGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitId
 @return ApiApiV2DealsServiceDealUnitsDealUnitIdExtendedGetRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdExtendedGet(ctx context.Context, dealUnitId string) ApiApiV2DealsServiceDealUnitsDealUnitIdExtendedGetRequest {
	return ApiApiV2DealsServiceDealUnitsDealUnitIdExtendedGetRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitId: dealUnitId,
	}
}

// Execute executes the request
//  @return ExtendedDealUnitDtoEnvelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdExtendedGetExecute(r ApiApiV2DealsServiceDealUnitsDealUnitIdExtendedGetRequest) (*ExtendedDealUnitDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtendedDealUnitDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsDealUnitIdExtendedGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/{dealUnitId}/Extended"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitId"+"}", url.PathEscape(parameterValueToString(r.dealUnitId, "dealUnitId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsDealUnitIdLinesCountGetRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
	dealUnitId string
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesCountGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsDealUnitIdLinesCountGetExecute(r)
}

/*
ApiV2DealsServiceDealUnitsDealUnitIdLinesCountGet Method for ApiV2DealsServiceDealUnitsDealUnitIdLinesCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitId
 @return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesCountGetRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesCountGet(ctx context.Context, dealUnitId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesCountGetRequest {
	return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesCountGetRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitId: dealUnitId,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesCountGetExecute(r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsDealUnitIdLinesCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/Count"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitId"+"}", url.PathEscape(parameterValueToString(r.dealUnitId, "dealUnitId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
	dealUnitId string
	dealUnitLineId string
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutExecute(r)
}

/*
ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut Method for ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitId
 @param dealUnitLineId
 @return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut(ctx context.Context, dealUnitId string, dealUnitLineId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutRequest {
	return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitId: dealUnitId,
		dealUnitLineId: dealUnitLineId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutExecute(r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdCalculatePut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}/Calculate"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitId"+"}", url.PathEscape(parameterValueToString(r.dealUnitId, "dealUnitId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitLineId"+"}", url.PathEscape(parameterValueToString(r.dealUnitLineId, "dealUnitLineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
	dealUnitId string
	dealUnitLineId string
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteExecute(r)
}

/*
ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete Method for ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitId
 @param dealUnitLineId
 @return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete(ctx context.Context, dealUnitId string, dealUnitLineId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteRequest {
	return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitId: dealUnitId,
		dealUnitLineId: dealUnitLineId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteExecute(r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitId"+"}", url.PathEscape(parameterValueToString(r.dealUnitId, "dealUnitId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitLineId"+"}", url.PathEscape(parameterValueToString(r.dealUnitLineId, "dealUnitLineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
	dealUnitId string
	dealUnitLineId string
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetRequest) Execute() (*DealUnitLineDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetExecute(r)
}

/*
ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet Method for ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitId
 @param dealUnitLineId
 @return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet(ctx context.Context, dealUnitId string, dealUnitLineId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetRequest {
	return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitId: dealUnitId,
		dealUnitLineId: dealUnitLineId,
	}
}

// Execute executes the request
//  @return DealUnitLineDtoEnvelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetExecute(r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGetRequest) (*DealUnitLineDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DealUnitLineDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitId"+"}", url.PathEscape(parameterValueToString(r.dealUnitId, "dealUnitId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitLineId"+"}", url.PathEscape(parameterValueToString(r.dealUnitLineId, "dealUnitLineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
	dealUnitId string
	dealUnitLineId string
	dealUnitLineUpdateDto *DealUnitLineUpdateDto
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequest) DealUnitLineUpdateDto(dealUnitLineUpdateDto DealUnitLineUpdateDto) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequest {
	r.dealUnitLineUpdateDto = &dealUnitLineUpdateDto
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutExecute(r)
}

/*
ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut Method for ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitId
 @param dealUnitLineId
 @return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut(ctx context.Context, dealUnitId string, dealUnitLineId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequest {
	return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitId: dealUnitId,
		dealUnitLineId: dealUnitLineId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutExecute(r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsDealUnitIdLinesDealUnitLineIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines/{dealUnitLineId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitId"+"}", url.PathEscape(parameterValueToString(r.dealUnitId, "dealUnitId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitLineId"+"}", url.PathEscape(parameterValueToString(r.dealUnitLineId, "dealUnitLineId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dealUnitLineUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsDealUnitIdLinesGetRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
	dealUnitId string
	itemId *string
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesGetRequest) ItemId(itemId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesGetRequest {
	r.itemId = &itemId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesGetRequest) Execute() (*DealUnitLineDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsDealUnitIdLinesGetExecute(r)
}

/*
ApiV2DealsServiceDealUnitsDealUnitIdLinesGet Method for ApiV2DealsServiceDealUnitsDealUnitIdLinesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitId
 @return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesGetRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesGet(ctx context.Context, dealUnitId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesGetRequest {
	return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesGetRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitId: dealUnitId,
	}
}

// Execute executes the request
//  @return DealUnitLineDtoListEnvelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesGetExecute(r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesGetRequest) (*DealUnitLineDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DealUnitLineDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsDealUnitIdLinesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitId"+"}", url.PathEscape(parameterValueToString(r.dealUnitId, "dealUnitId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.itemId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "itemId", r.itemId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsDealUnitIdLinesPostRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
	dealUnitId string
	dealUnitLineCreateDto *DealUnitLineCreateDto
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesPostRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesPostRequest) DealUnitLineCreateDto(dealUnitLineCreateDto DealUnitLineCreateDto) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesPostRequest {
	r.dealUnitLineCreateDto = &dealUnitLineCreateDto
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsDealUnitIdLinesPostExecute(r)
}

/*
ApiV2DealsServiceDealUnitsDealUnitIdLinesPost Method for ApiV2DealsServiceDealUnitsDealUnitIdLinesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitId
 @return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesPostRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesPost(ctx context.Context, dealUnitId string) ApiApiV2DealsServiceDealUnitsDealUnitIdLinesPostRequest {
	return ApiApiV2DealsServiceDealUnitsDealUnitIdLinesPostRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitId: dealUnitId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdLinesPostExecute(r ApiApiV2DealsServiceDealUnitsDealUnitIdLinesPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsDealUnitIdLinesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/{dealUnitId}/Lines"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitId"+"}", url.PathEscape(parameterValueToString(r.dealUnitId, "dealUnitId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dealUnitLineCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsDealUnitIdPutRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
	dealUnitId string
	dealUnitUpdateDto *DealUnitUpdateDto
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdPutRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsDealUnitIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdPutRequest) DealUnitUpdateDto(dealUnitUpdateDto DealUnitUpdateDto) ApiApiV2DealsServiceDealUnitsDealUnitIdPutRequest {
	r.dealUnitUpdateDto = &dealUnitUpdateDto
	return r
}

func (r ApiApiV2DealsServiceDealUnitsDealUnitIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsDealUnitIdPutExecute(r)
}

/*
ApiV2DealsServiceDealUnitsDealUnitIdPut Method for ApiV2DealsServiceDealUnitsDealUnitIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitId
 @return ApiApiV2DealsServiceDealUnitsDealUnitIdPutRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdPut(ctx context.Context, dealUnitId string) ApiApiV2DealsServiceDealUnitsDealUnitIdPutRequest {
	return ApiApiV2DealsServiceDealUnitsDealUnitIdPutRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitId: dealUnitId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsDealUnitIdPutExecute(r ApiApiV2DealsServiceDealUnitsDealUnitIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsDealUnitIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/{dealUnitId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitId"+"}", url.PathEscape(parameterValueToString(r.dealUnitId, "dealUnitId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dealUnitUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsExtendedGetRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
}

func (r ApiApiV2DealsServiceDealUnitsExtendedGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsExtendedGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsExtendedGetRequest) Execute() (*ExtendedDealUnitDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsExtendedGetExecute(r)
}

/*
ApiV2DealsServiceDealUnitsExtendedGet Method for ApiV2DealsServiceDealUnitsExtendedGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2DealsServiceDealUnitsExtendedGetRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsExtendedGet(ctx context.Context) ApiApiV2DealsServiceDealUnitsExtendedGetRequest {
	return ApiApiV2DealsServiceDealUnitsExtendedGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExtendedDealUnitDtoListEnvelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsExtendedGetExecute(r ApiApiV2DealsServiceDealUnitsExtendedGetRequest) (*ExtendedDealUnitDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtendedDealUnitDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsExtendedGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/Extended"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsGetRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
}

func (r ApiApiV2DealsServiceDealUnitsGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsGetRequest) Execute() (*DealUnitDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsGetExecute(r)
}

/*
ApiV2DealsServiceDealUnitsGet Method for ApiV2DealsServiceDealUnitsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2DealsServiceDealUnitsGetRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsGet(ctx context.Context) ApiApiV2DealsServiceDealUnitsGetRequest {
	return ApiApiV2DealsServiceDealUnitsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DealUnitDtoListEnvelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsGetExecute(r ApiApiV2DealsServiceDealUnitsGetRequest) (*DealUnitDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DealUnitDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceDealUnitsPostRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
	dealUnitCreateDto *DealUnitCreateDto
}

func (r ApiApiV2DealsServiceDealUnitsPostRequest) TenantId(tenantId string) ApiApiV2DealsServiceDealUnitsPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceDealUnitsPostRequest) DealUnitCreateDto(dealUnitCreateDto DealUnitCreateDto) ApiApiV2DealsServiceDealUnitsPostRequest {
	r.dealUnitCreateDto = &dealUnitCreateDto
	return r
}

func (r ApiApiV2DealsServiceDealUnitsPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceDealUnitsPostExecute(r)
}

/*
ApiV2DealsServiceDealUnitsPost Method for ApiV2DealsServiceDealUnitsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2DealsServiceDealUnitsPostRequest
*/
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsPost(ctx context.Context) ApiApiV2DealsServiceDealUnitsPostRequest {
	return ApiApiV2DealsServiceDealUnitsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *DealUnitsAPIService) ApiV2DealsServiceDealUnitsPostExecute(r ApiApiV2DealsServiceDealUnitsPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.ApiV2DealsServiceDealUnitsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dealUnitCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDealUnitAsyncRequest struct {
	ctx context.Context
	ApiService *DealUnitsAPIService
	tenantId *string
	dealUnitId string
}

func (r ApiGetDealUnitAsyncRequest) TenantId(tenantId string) ApiGetDealUnitAsyncRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiGetDealUnitAsyncRequest) Execute() (*DealUnitDtoEnvelope, *http.Response, error) {
	return r.ApiService.GetDealUnitAsyncExecute(r)
}

/*
GetDealUnitAsync Method for GetDealUnitAsync

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param dealUnitId
 @return ApiGetDealUnitAsyncRequest
*/
func (a *DealUnitsAPIService) GetDealUnitAsync(ctx context.Context, dealUnitId string) ApiGetDealUnitAsyncRequest {
	return ApiGetDealUnitAsyncRequest{
		ApiService: a,
		ctx: ctx,
		dealUnitId: dealUnitId,
	}
}

// Execute executes the request
//  @return DealUnitDtoEnvelope
func (a *DealUnitsAPIService) GetDealUnitAsyncExecute(r ApiGetDealUnitAsyncRequest) (*DealUnitDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DealUnitDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DealUnitsAPIService.GetDealUnitAsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/DealUnits/{dealUnitId}"
	localVarPath = strings.Replace(localVarPath, "{"+"dealUnitId"+"}", url.PathEscape(parameterValueToString(r.dealUnitId, "dealUnitId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
