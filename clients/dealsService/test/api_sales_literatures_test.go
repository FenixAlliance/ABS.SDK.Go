/*
DealsService

Testing SalesLiteraturesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_SalesLiteraturesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SalesLiteraturesAPIService ApiV2DealsServiceSalesLiteraturesExtendedGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SalesLiteraturesAPI.ApiV2DealsServiceSalesLiteraturesExtendedGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SalesLiteraturesAPIService ApiV2DealsServiceSalesLiteraturesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SalesLiteraturesAPI.ApiV2DealsServiceSalesLiteraturesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SalesLiteraturesAPIService ApiV2DealsServiceSalesLiteraturesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SalesLiteraturesAPI.ApiV2DealsServiceSalesLiteraturesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SalesLiteraturesAPIService ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var salesLiteratureId string

		resp, httpRes, err := apiClient.SalesLiteraturesAPI.ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDelete(context.Background(), salesLiteratureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SalesLiteraturesAPIService ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var salesLiteratureId string

		resp, httpRes, err := apiClient.SalesLiteraturesAPI.ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGet(context.Background(), salesLiteratureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SalesLiteraturesAPIService ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var salesLiteratureId string

		resp, httpRes, err := apiClient.SalesLiteraturesAPI.ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPut(context.Background(), salesLiteratureId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
