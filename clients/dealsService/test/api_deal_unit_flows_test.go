/*
DealsService

Testing DealUnitFlowsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DealUnitFlowsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DealUnitFlowsAPIService ApiV2DealsServiceDealUnitFlowsCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DealUnitFlowsAPI.ApiV2DealsServiceDealUnitFlowsCountGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DealUnitFlowsAPIService ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dealUnitFlowId string

		resp, httpRes, err := apiClient.DealUnitFlowsAPI.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdDelete(context.Background(), dealUnitFlowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DealUnitFlowsAPIService ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dealUnitFlowId string

		resp, httpRes, err := apiClient.DealUnitFlowsAPI.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdGet(context.Background(), dealUnitFlowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DealUnitFlowsAPIService ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dealUnitFlowId string

		resp, httpRes, err := apiClient.DealUnitFlowsAPI.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdPut(context.Background(), dealUnitFlowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DealUnitFlowsAPIService ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dealUnitFlowId string

		resp, httpRes, err := apiClient.DealUnitFlowsAPI.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesCountGet(context.Background(), dealUnitFlowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DealUnitFlowsAPIService ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dealUnitFlowId string
		var dealUnitFlowStageId string

		resp, httpRes, err := apiClient.DealUnitFlowsAPI.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdDelete(context.Background(), dealUnitFlowId, dealUnitFlowStageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DealUnitFlowsAPIService ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dealUnitFlowId string
		var dealUnitFlowStageId string

		resp, httpRes, err := apiClient.DealUnitFlowsAPI.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdGet(context.Background(), dealUnitFlowId, dealUnitFlowStageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DealUnitFlowsAPIService ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dealUnitFlowId string
		var dealUnitFlowStageId string

		resp, httpRes, err := apiClient.DealUnitFlowsAPI.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesDealUnitFlowStageIdPut(context.Background(), dealUnitFlowId, dealUnitFlowStageId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DealUnitFlowsAPIService ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dealUnitFlowId string

		resp, httpRes, err := apiClient.DealUnitFlowsAPI.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesGet(context.Background(), dealUnitFlowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DealUnitFlowsAPIService ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var dealUnitFlowId string

		resp, httpRes, err := apiClient.DealUnitFlowsAPI.ApiV2DealsServiceDealUnitFlowsDealUnitFlowIdStagesPost(context.Background(), dealUnitFlowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DealUnitFlowsAPIService ApiV2DealsServiceDealUnitFlowsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DealUnitFlowsAPI.ApiV2DealsServiceDealUnitFlowsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DealUnitFlowsAPIService ApiV2DealsServiceDealUnitFlowsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DealUnitFlowsAPI.ApiV2DealsServiceDealUnitFlowsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
