/*
DealsService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SalesLiteraturesAPIService SalesLiteraturesAPI service
type SalesLiteraturesAPIService service

type ApiApiV2DealsServiceSalesLiteraturesExtendedGetRequest struct {
	ctx context.Context
	ApiService *SalesLiteraturesAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2DealsServiceSalesLiteraturesExtendedGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceSalesLiteraturesExtendedGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesExtendedGetRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceSalesLiteraturesExtendedGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesExtendedGetRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceSalesLiteraturesExtendedGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesExtendedGetRequest) Execute() (*ExtendedSalesLiteratureDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceSalesLiteraturesExtendedGetExecute(r)
}

/*
ApiV2DealsServiceSalesLiteraturesExtendedGet Method for ApiV2DealsServiceSalesLiteraturesExtendedGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2DealsServiceSalesLiteraturesExtendedGetRequest
*/
func (a *SalesLiteraturesAPIService) ApiV2DealsServiceSalesLiteraturesExtendedGet(ctx context.Context) ApiApiV2DealsServiceSalesLiteraturesExtendedGetRequest {
	return ApiApiV2DealsServiceSalesLiteraturesExtendedGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExtendedSalesLiteratureDtoListEnvelope
func (a *SalesLiteraturesAPIService) ApiV2DealsServiceSalesLiteraturesExtendedGetExecute(r ApiApiV2DealsServiceSalesLiteraturesExtendedGetRequest) (*ExtendedSalesLiteratureDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExtendedSalesLiteratureDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesLiteraturesAPIService.ApiV2DealsServiceSalesLiteraturesExtendedGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/SalesLiteratures/Extended"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceSalesLiteraturesGetRequest struct {
	ctx context.Context
	ApiService *SalesLiteraturesAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2DealsServiceSalesLiteraturesGetRequest) TenantId(tenantId string) ApiApiV2DealsServiceSalesLiteraturesGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesGetRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceSalesLiteraturesGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesGetRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceSalesLiteraturesGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesGetRequest) Execute() (*SalesLiteratureDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceSalesLiteraturesGetExecute(r)
}

/*
ApiV2DealsServiceSalesLiteraturesGet Method for ApiV2DealsServiceSalesLiteraturesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2DealsServiceSalesLiteraturesGetRequest
*/
func (a *SalesLiteraturesAPIService) ApiV2DealsServiceSalesLiteraturesGet(ctx context.Context) ApiApiV2DealsServiceSalesLiteraturesGetRequest {
	return ApiApiV2DealsServiceSalesLiteraturesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SalesLiteratureDtoListEnvelope
func (a *SalesLiteraturesAPIService) ApiV2DealsServiceSalesLiteraturesGetExecute(r ApiApiV2DealsServiceSalesLiteraturesGetRequest) (*SalesLiteratureDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SalesLiteratureDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesLiteraturesAPIService.ApiV2DealsServiceSalesLiteraturesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/SalesLiteratures"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceSalesLiteraturesPostRequest struct {
	ctx context.Context
	ApiService *SalesLiteraturesAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
	salesLiteratureCreateDto *SalesLiteratureCreateDto
}

func (r ApiApiV2DealsServiceSalesLiteraturesPostRequest) TenantId(tenantId string) ApiApiV2DealsServiceSalesLiteraturesPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesPostRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceSalesLiteraturesPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesPostRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceSalesLiteraturesPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesPostRequest) SalesLiteratureCreateDto(salesLiteratureCreateDto SalesLiteratureCreateDto) ApiApiV2DealsServiceSalesLiteraturesPostRequest {
	r.salesLiteratureCreateDto = &salesLiteratureCreateDto
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceSalesLiteraturesPostExecute(r)
}

/*
ApiV2DealsServiceSalesLiteraturesPost Method for ApiV2DealsServiceSalesLiteraturesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2DealsServiceSalesLiteraturesPostRequest
*/
func (a *SalesLiteraturesAPIService) ApiV2DealsServiceSalesLiteraturesPost(ctx context.Context) ApiApiV2DealsServiceSalesLiteraturesPostRequest {
	return ApiApiV2DealsServiceSalesLiteraturesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SalesLiteraturesAPIService) ApiV2DealsServiceSalesLiteraturesPostExecute(r ApiApiV2DealsServiceSalesLiteraturesPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesLiteraturesAPIService.ApiV2DealsServiceSalesLiteraturesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/SalesLiteratures"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.salesLiteratureCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteRequest struct {
	ctx context.Context
	ApiService *SalesLiteraturesAPIService
	tenantId *string
	salesLiteratureId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteRequest) TenantId(tenantId string) ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteExecute(r)
}

/*
ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDelete Method for ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param salesLiteratureId
 @return ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteRequest
*/
func (a *SalesLiteraturesAPIService) ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDelete(ctx context.Context, salesLiteratureId string) ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteRequest {
	return ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		salesLiteratureId: salesLiteratureId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SalesLiteraturesAPIService) ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteExecute(r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesLiteraturesAPIService.ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/SalesLiteratures/{salesLiteratureId}"
	localVarPath = strings.Replace(localVarPath, "{"+"salesLiteratureId"+"}", url.PathEscape(parameterValueToString(r.salesLiteratureId, "salesLiteratureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGetRequest struct {
	ctx context.Context
	ApiService *SalesLiteraturesAPIService
	salesLiteratureId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGetRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGetRequest) Execute() (*SalesLiteratureDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGetExecute(r)
}

/*
ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGet Method for ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param salesLiteratureId
 @return ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGetRequest
*/
func (a *SalesLiteraturesAPIService) ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGet(ctx context.Context, salesLiteratureId string) ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGetRequest {
	return ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGetRequest{
		ApiService: a,
		ctx: ctx,
		salesLiteratureId: salesLiteratureId,
	}
}

// Execute executes the request
//  @return SalesLiteratureDtoEnvelope
func (a *SalesLiteraturesAPIService) ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGetExecute(r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGetRequest) (*SalesLiteratureDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SalesLiteratureDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesLiteraturesAPIService.ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/SalesLiteratures/{salesLiteratureId}"
	localVarPath = strings.Replace(localVarPath, "{"+"salesLiteratureId"+"}", url.PathEscape(parameterValueToString(r.salesLiteratureId, "salesLiteratureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest struct {
	ctx context.Context
	ApiService *SalesLiteraturesAPIService
	tenantId *string
	salesLiteratureId string
	apiVersion *string
	xApiVersion *string
	salesLiteratureUpdateDto *SalesLiteratureUpdateDto
}

func (r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest) TenantId(tenantId string) ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest) ApiVersion(apiVersion string) ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest) SalesLiteratureUpdateDto(salesLiteratureUpdateDto SalesLiteratureUpdateDto) ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest {
	r.salesLiteratureUpdateDto = &salesLiteratureUpdateDto
	return r
}

func (r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutExecute(r)
}

/*
ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPut Method for ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param salesLiteratureId
 @return ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest
*/
func (a *SalesLiteraturesAPIService) ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPut(ctx context.Context, salesLiteratureId string) ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest {
	return ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest{
		ApiService: a,
		ctx: ctx,
		salesLiteratureId: salesLiteratureId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SalesLiteraturesAPIService) ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutExecute(r ApiApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesLiteraturesAPIService.ApiV2DealsServiceSalesLiteraturesSalesLiteratureIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/DealsService/SalesLiteratures/{salesLiteratureId}"
	localVarPath = strings.Replace(localVarPath, "{"+"salesLiteratureId"+"}", url.PathEscape(parameterValueToString(r.salesLiteratureId, "salesLiteratureId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.salesLiteratureUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
