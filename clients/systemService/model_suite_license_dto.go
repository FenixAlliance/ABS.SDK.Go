/*
SystemService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SuiteLicenseDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuiteLicenseDto{}

// SuiteLicenseDto struct for SuiteLicenseDto
type SuiteLicenseDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	TenantId NullableString `json:"tenantId,omitempty"`
	LicenseString NullableString `json:"licenseString,omitempty"`
	EnrollmentId NullableString `json:"enrollmentId,omitempty"`
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	AvailableSeats *int32 `json:"availableSeats,omitempty"`
	TotalSeats *int32 `json:"totalSeats,omitempty"`
}

// NewSuiteLicenseDto instantiates a new SuiteLicenseDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuiteLicenseDto() *SuiteLicenseDto {
	this := SuiteLicenseDto{}
	return &this
}

// NewSuiteLicenseDtoWithDefaults instantiates a new SuiteLicenseDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuiteLicenseDtoWithDefaults() *SuiteLicenseDto {
	this := SuiteLicenseDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SuiteLicenseDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SuiteLicenseDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SuiteLicenseDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *SuiteLicenseDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *SuiteLicenseDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SuiteLicenseDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SuiteLicenseDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SuiteLicenseDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *SuiteLicenseDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *SuiteLicenseDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *SuiteLicenseDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *SuiteLicenseDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SuiteLicenseDto) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SuiteLicenseDto) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *SuiteLicenseDto) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *SuiteLicenseDto) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *SuiteLicenseDto) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *SuiteLicenseDto) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetLicenseString returns the LicenseString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SuiteLicenseDto) GetLicenseString() string {
	if o == nil || IsNil(o.LicenseString.Get()) {
		var ret string
		return ret
	}
	return *o.LicenseString.Get()
}

// GetLicenseStringOk returns a tuple with the LicenseString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SuiteLicenseDto) GetLicenseStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LicenseString.Get(), o.LicenseString.IsSet()
}

// HasLicenseString returns a boolean if a field has been set.
func (o *SuiteLicenseDto) HasLicenseString() bool {
	if o != nil && o.LicenseString.IsSet() {
		return true
	}

	return false
}

// SetLicenseString gets a reference to the given NullableString and assigns it to the LicenseString field.
func (o *SuiteLicenseDto) SetLicenseString(v string) {
	o.LicenseString.Set(&v)
}
// SetLicenseStringNil sets the value for LicenseString to be an explicit nil
func (o *SuiteLicenseDto) SetLicenseStringNil() {
	o.LicenseString.Set(nil)
}

// UnsetLicenseString ensures that no value is present for LicenseString, not even an explicit nil
func (o *SuiteLicenseDto) UnsetLicenseString() {
	o.LicenseString.Unset()
}

// GetEnrollmentId returns the EnrollmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SuiteLicenseDto) GetEnrollmentId() string {
	if o == nil || IsNil(o.EnrollmentId.Get()) {
		var ret string
		return ret
	}
	return *o.EnrollmentId.Get()
}

// GetEnrollmentIdOk returns a tuple with the EnrollmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SuiteLicenseDto) GetEnrollmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnrollmentId.Get(), o.EnrollmentId.IsSet()
}

// HasEnrollmentId returns a boolean if a field has been set.
func (o *SuiteLicenseDto) HasEnrollmentId() bool {
	if o != nil && o.EnrollmentId.IsSet() {
		return true
	}

	return false
}

// SetEnrollmentId gets a reference to the given NullableString and assigns it to the EnrollmentId field.
func (o *SuiteLicenseDto) SetEnrollmentId(v string) {
	o.EnrollmentId.Set(&v)
}
// SetEnrollmentIdNil sets the value for EnrollmentId to be an explicit nil
func (o *SuiteLicenseDto) SetEnrollmentIdNil() {
	o.EnrollmentId.Set(nil)
}

// UnsetEnrollmentId ensures that no value is present for EnrollmentId, not even an explicit nil
func (o *SuiteLicenseDto) UnsetEnrollmentId() {
	o.EnrollmentId.Unset()
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *SuiteLicenseDto) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuiteLicenseDto) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *SuiteLicenseDto) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *SuiteLicenseDto) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetAvailableSeats returns the AvailableSeats field value if set, zero value otherwise.
func (o *SuiteLicenseDto) GetAvailableSeats() int32 {
	if o == nil || IsNil(o.AvailableSeats) {
		var ret int32
		return ret
	}
	return *o.AvailableSeats
}

// GetAvailableSeatsOk returns a tuple with the AvailableSeats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuiteLicenseDto) GetAvailableSeatsOk() (*int32, bool) {
	if o == nil || IsNil(o.AvailableSeats) {
		return nil, false
	}
	return o.AvailableSeats, true
}

// HasAvailableSeats returns a boolean if a field has been set.
func (o *SuiteLicenseDto) HasAvailableSeats() bool {
	if o != nil && !IsNil(o.AvailableSeats) {
		return true
	}

	return false
}

// SetAvailableSeats gets a reference to the given int32 and assigns it to the AvailableSeats field.
func (o *SuiteLicenseDto) SetAvailableSeats(v int32) {
	o.AvailableSeats = &v
}

// GetTotalSeats returns the TotalSeats field value if set, zero value otherwise.
func (o *SuiteLicenseDto) GetTotalSeats() int32 {
	if o == nil || IsNil(o.TotalSeats) {
		var ret int32
		return ret
	}
	return *o.TotalSeats
}

// GetTotalSeatsOk returns a tuple with the TotalSeats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuiteLicenseDto) GetTotalSeatsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalSeats) {
		return nil, false
	}
	return o.TotalSeats, true
}

// HasTotalSeats returns a boolean if a field has been set.
func (o *SuiteLicenseDto) HasTotalSeats() bool {
	if o != nil && !IsNil(o.TotalSeats) {
		return true
	}

	return false
}

// SetTotalSeats gets a reference to the given int32 and assigns it to the TotalSeats field.
func (o *SuiteLicenseDto) SetTotalSeats(v int32) {
	o.TotalSeats = &v
}

func (o SuiteLicenseDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuiteLicenseDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.LicenseString.IsSet() {
		toSerialize["licenseString"] = o.LicenseString.Get()
	}
	if o.EnrollmentId.IsSet() {
		toSerialize["enrollmentId"] = o.EnrollmentId.Get()
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.AvailableSeats) {
		toSerialize["availableSeats"] = o.AvailableSeats
	}
	if !IsNil(o.TotalSeats) {
		toSerialize["totalSeats"] = o.TotalSeats
	}
	return toSerialize, nil
}

type NullableSuiteLicenseDto struct {
	value *SuiteLicenseDto
	isSet bool
}

func (v NullableSuiteLicenseDto) Get() *SuiteLicenseDto {
	return v.value
}

func (v *NullableSuiteLicenseDto) Set(val *SuiteLicenseDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSuiteLicenseDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSuiteLicenseDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuiteLicenseDto(val *SuiteLicenseDto) *NullableSuiteLicenseDto {
	return &NullableSuiteLicenseDto{value: val, isSet: true}
}

func (v NullableSuiteLicenseDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuiteLicenseDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


