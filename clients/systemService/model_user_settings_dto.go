/*
SystemService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UserSettingsDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSettingsDto{}

// UserSettingsDto struct for UserSettingsDto
type UserSettingsDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	PageSize *int32 `json:"pageSize,omitempty"`
	DateFormat NullableString `json:"dateFormat,omitempty"`
	CurrencyFormat NullableString `json:"currencyFormat,omitempty"`
	DateTimeFormat NullableString `json:"dateTimeFormat,omitempty"`
	SiteTheme *int32 `json:"siteTheme,omitempty"`
}

// NewUserSettingsDto instantiates a new UserSettingsDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSettingsDto() *UserSettingsDto {
	this := UserSettingsDto{}
	return &this
}

// NewUserSettingsDtoWithDefaults instantiates a new UserSettingsDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSettingsDtoWithDefaults() *UserSettingsDto {
	this := UserSettingsDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserSettingsDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserSettingsDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UserSettingsDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *UserSettingsDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UserSettingsDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UserSettingsDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserSettingsDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserSettingsDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *UserSettingsDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *UserSettingsDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *UserSettingsDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *UserSettingsDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *UserSettingsDto) GetPageSize() int32 {
	if o == nil || IsNil(o.PageSize) {
		var ret int32
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettingsDto) GetPageSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.PageSize) {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *UserSettingsDto) HasPageSize() bool {
	if o != nil && !IsNil(o.PageSize) {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int32 and assigns it to the PageSize field.
func (o *UserSettingsDto) SetPageSize(v int32) {
	o.PageSize = &v
}

// GetDateFormat returns the DateFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserSettingsDto) GetDateFormat() string {
	if o == nil || IsNil(o.DateFormat.Get()) {
		var ret string
		return ret
	}
	return *o.DateFormat.Get()
}

// GetDateFormatOk returns a tuple with the DateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserSettingsDto) GetDateFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateFormat.Get(), o.DateFormat.IsSet()
}

// HasDateFormat returns a boolean if a field has been set.
func (o *UserSettingsDto) HasDateFormat() bool {
	if o != nil && o.DateFormat.IsSet() {
		return true
	}

	return false
}

// SetDateFormat gets a reference to the given NullableString and assigns it to the DateFormat field.
func (o *UserSettingsDto) SetDateFormat(v string) {
	o.DateFormat.Set(&v)
}
// SetDateFormatNil sets the value for DateFormat to be an explicit nil
func (o *UserSettingsDto) SetDateFormatNil() {
	o.DateFormat.Set(nil)
}

// UnsetDateFormat ensures that no value is present for DateFormat, not even an explicit nil
func (o *UserSettingsDto) UnsetDateFormat() {
	o.DateFormat.Unset()
}

// GetCurrencyFormat returns the CurrencyFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserSettingsDto) GetCurrencyFormat() string {
	if o == nil || IsNil(o.CurrencyFormat.Get()) {
		var ret string
		return ret
	}
	return *o.CurrencyFormat.Get()
}

// GetCurrencyFormatOk returns a tuple with the CurrencyFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserSettingsDto) GetCurrencyFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencyFormat.Get(), o.CurrencyFormat.IsSet()
}

// HasCurrencyFormat returns a boolean if a field has been set.
func (o *UserSettingsDto) HasCurrencyFormat() bool {
	if o != nil && o.CurrencyFormat.IsSet() {
		return true
	}

	return false
}

// SetCurrencyFormat gets a reference to the given NullableString and assigns it to the CurrencyFormat field.
func (o *UserSettingsDto) SetCurrencyFormat(v string) {
	o.CurrencyFormat.Set(&v)
}
// SetCurrencyFormatNil sets the value for CurrencyFormat to be an explicit nil
func (o *UserSettingsDto) SetCurrencyFormatNil() {
	o.CurrencyFormat.Set(nil)
}

// UnsetCurrencyFormat ensures that no value is present for CurrencyFormat, not even an explicit nil
func (o *UserSettingsDto) UnsetCurrencyFormat() {
	o.CurrencyFormat.Unset()
}

// GetDateTimeFormat returns the DateTimeFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserSettingsDto) GetDateTimeFormat() string {
	if o == nil || IsNil(o.DateTimeFormat.Get()) {
		var ret string
		return ret
	}
	return *o.DateTimeFormat.Get()
}

// GetDateTimeFormatOk returns a tuple with the DateTimeFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserSettingsDto) GetDateTimeFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateTimeFormat.Get(), o.DateTimeFormat.IsSet()
}

// HasDateTimeFormat returns a boolean if a field has been set.
func (o *UserSettingsDto) HasDateTimeFormat() bool {
	if o != nil && o.DateTimeFormat.IsSet() {
		return true
	}

	return false
}

// SetDateTimeFormat gets a reference to the given NullableString and assigns it to the DateTimeFormat field.
func (o *UserSettingsDto) SetDateTimeFormat(v string) {
	o.DateTimeFormat.Set(&v)
}
// SetDateTimeFormatNil sets the value for DateTimeFormat to be an explicit nil
func (o *UserSettingsDto) SetDateTimeFormatNil() {
	o.DateTimeFormat.Set(nil)
}

// UnsetDateTimeFormat ensures that no value is present for DateTimeFormat, not even an explicit nil
func (o *UserSettingsDto) UnsetDateTimeFormat() {
	o.DateTimeFormat.Unset()
}

// GetSiteTheme returns the SiteTheme field value if set, zero value otherwise.
func (o *UserSettingsDto) GetSiteTheme() int32 {
	if o == nil || IsNil(o.SiteTheme) {
		var ret int32
		return ret
	}
	return *o.SiteTheme
}

// GetSiteThemeOk returns a tuple with the SiteTheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSettingsDto) GetSiteThemeOk() (*int32, bool) {
	if o == nil || IsNil(o.SiteTheme) {
		return nil, false
	}
	return o.SiteTheme, true
}

// HasSiteTheme returns a boolean if a field has been set.
func (o *UserSettingsDto) HasSiteTheme() bool {
	if o != nil && !IsNil(o.SiteTheme) {
		return true
	}

	return false
}

// SetSiteTheme gets a reference to the given int32 and assigns it to the SiteTheme field.
func (o *UserSettingsDto) SetSiteTheme(v int32) {
	o.SiteTheme = &v
}

func (o UserSettingsDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSettingsDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if !IsNil(o.PageSize) {
		toSerialize["pageSize"] = o.PageSize
	}
	if o.DateFormat.IsSet() {
		toSerialize["dateFormat"] = o.DateFormat.Get()
	}
	if o.CurrencyFormat.IsSet() {
		toSerialize["currencyFormat"] = o.CurrencyFormat.Get()
	}
	if o.DateTimeFormat.IsSet() {
		toSerialize["dateTimeFormat"] = o.DateTimeFormat.Get()
	}
	if !IsNil(o.SiteTheme) {
		toSerialize["siteTheme"] = o.SiteTheme
	}
	return toSerialize, nil
}

type NullableUserSettingsDto struct {
	value *UserSettingsDto
	isSet bool
}

func (v NullableUserSettingsDto) Get() *UserSettingsDto {
	return v.value
}

func (v *NullableUserSettingsDto) Set(val *UserSettingsDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSettingsDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSettingsDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSettingsDto(val *UserSettingsDto) *NullableUserSettingsDto {
	return &NullableUserSettingsDto{value: val, isSet: true}
}

func (v NullableUserSettingsDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSettingsDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


