/*
SystemService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LicenseValidationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseValidationRequest{}

// LicenseValidationRequest struct for LicenseValidationRequest
type LicenseValidationRequest struct {
	LicenseKey string `json:"licenseKey" validate:"regexp=^[a-zA-Z0-9\\\\+\\/]*={0,2}$"`
}

type _LicenseValidationRequest LicenseValidationRequest

// NewLicenseValidationRequest instantiates a new LicenseValidationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseValidationRequest(licenseKey string) *LicenseValidationRequest {
	this := LicenseValidationRequest{}
	this.LicenseKey = licenseKey
	return &this
}

// NewLicenseValidationRequestWithDefaults instantiates a new LicenseValidationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseValidationRequestWithDefaults() *LicenseValidationRequest {
	this := LicenseValidationRequest{}
	return &this
}

// GetLicenseKey returns the LicenseKey field value
func (o *LicenseValidationRequest) GetLicenseKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseKey
}

// GetLicenseKeyOk returns a tuple with the LicenseKey field value
// and a boolean to check if the value has been set.
func (o *LicenseValidationRequest) GetLicenseKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseKey, true
}

// SetLicenseKey sets field value
func (o *LicenseValidationRequest) SetLicenseKey(v string) {
	o.LicenseKey = v
}

func (o LicenseValidationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseValidationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["licenseKey"] = o.LicenseKey
	return toSerialize, nil
}

func (o *LicenseValidationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"licenseKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLicenseValidationRequest := _LicenseValidationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLicenseValidationRequest)

	if err != nil {
		return err
	}

	*o = LicenseValidationRequest(varLicenseValidationRequest)

	return err
}

type NullableLicenseValidationRequest struct {
	value *LicenseValidationRequest
	isSet bool
}

func (v NullableLicenseValidationRequest) Get() *LicenseValidationRequest {
	return v.value
}

func (v *NullableLicenseValidationRequest) Set(val *LicenseValidationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseValidationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseValidationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseValidationRequest(val *LicenseValidationRequest) *NullableLicenseValidationRequest {
	return &NullableLicenseValidationRequest{value: val, isSet: true}
}

func (v NullableLicenseValidationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseValidationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


