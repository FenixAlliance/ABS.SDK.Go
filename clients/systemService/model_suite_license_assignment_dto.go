/*
SystemService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SuiteLicenseAssignmentDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuiteLicenseAssignmentDto{}

// SuiteLicenseAssignmentDto struct for SuiteLicenseAssignmentDto
type SuiteLicenseAssignmentDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Assigned *bool `json:"assigned,omitempty"`
	EnrollmentId NullableString `json:"enrollmentId,omitempty"`
	SuiteLicenseId NullableString `json:"suiteLicenseId,omitempty"`
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	AvailableSeats *int32 `json:"availableSeats,omitempty"`
	TotalSeats *int32 `json:"totalSeats,omitempty"`
}

// NewSuiteLicenseAssignmentDto instantiates a new SuiteLicenseAssignmentDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuiteLicenseAssignmentDto() *SuiteLicenseAssignmentDto {
	this := SuiteLicenseAssignmentDto{}
	return &this
}

// NewSuiteLicenseAssignmentDtoWithDefaults instantiates a new SuiteLicenseAssignmentDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuiteLicenseAssignmentDtoWithDefaults() *SuiteLicenseAssignmentDto {
	this := SuiteLicenseAssignmentDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SuiteLicenseAssignmentDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SuiteLicenseAssignmentDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SuiteLicenseAssignmentDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *SuiteLicenseAssignmentDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *SuiteLicenseAssignmentDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SuiteLicenseAssignmentDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SuiteLicenseAssignmentDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SuiteLicenseAssignmentDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *SuiteLicenseAssignmentDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *SuiteLicenseAssignmentDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *SuiteLicenseAssignmentDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *SuiteLicenseAssignmentDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SuiteLicenseAssignmentDto) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SuiteLicenseAssignmentDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *SuiteLicenseAssignmentDto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *SuiteLicenseAssignmentDto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *SuiteLicenseAssignmentDto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *SuiteLicenseAssignmentDto) UnsetName() {
	o.Name.Unset()
}

// GetAssigned returns the Assigned field value if set, zero value otherwise.
func (o *SuiteLicenseAssignmentDto) GetAssigned() bool {
	if o == nil || IsNil(o.Assigned) {
		var ret bool
		return ret
	}
	return *o.Assigned
}

// GetAssignedOk returns a tuple with the Assigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuiteLicenseAssignmentDto) GetAssignedOk() (*bool, bool) {
	if o == nil || IsNil(o.Assigned) {
		return nil, false
	}
	return o.Assigned, true
}

// HasAssigned returns a boolean if a field has been set.
func (o *SuiteLicenseAssignmentDto) HasAssigned() bool {
	if o != nil && !IsNil(o.Assigned) {
		return true
	}

	return false
}

// SetAssigned gets a reference to the given bool and assigns it to the Assigned field.
func (o *SuiteLicenseAssignmentDto) SetAssigned(v bool) {
	o.Assigned = &v
}

// GetEnrollmentId returns the EnrollmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SuiteLicenseAssignmentDto) GetEnrollmentId() string {
	if o == nil || IsNil(o.EnrollmentId.Get()) {
		var ret string
		return ret
	}
	return *o.EnrollmentId.Get()
}

// GetEnrollmentIdOk returns a tuple with the EnrollmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SuiteLicenseAssignmentDto) GetEnrollmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnrollmentId.Get(), o.EnrollmentId.IsSet()
}

// HasEnrollmentId returns a boolean if a field has been set.
func (o *SuiteLicenseAssignmentDto) HasEnrollmentId() bool {
	if o != nil && o.EnrollmentId.IsSet() {
		return true
	}

	return false
}

// SetEnrollmentId gets a reference to the given NullableString and assigns it to the EnrollmentId field.
func (o *SuiteLicenseAssignmentDto) SetEnrollmentId(v string) {
	o.EnrollmentId.Set(&v)
}
// SetEnrollmentIdNil sets the value for EnrollmentId to be an explicit nil
func (o *SuiteLicenseAssignmentDto) SetEnrollmentIdNil() {
	o.EnrollmentId.Set(nil)
}

// UnsetEnrollmentId ensures that no value is present for EnrollmentId, not even an explicit nil
func (o *SuiteLicenseAssignmentDto) UnsetEnrollmentId() {
	o.EnrollmentId.Unset()
}

// GetSuiteLicenseId returns the SuiteLicenseId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SuiteLicenseAssignmentDto) GetSuiteLicenseId() string {
	if o == nil || IsNil(o.SuiteLicenseId.Get()) {
		var ret string
		return ret
	}
	return *o.SuiteLicenseId.Get()
}

// GetSuiteLicenseIdOk returns a tuple with the SuiteLicenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SuiteLicenseAssignmentDto) GetSuiteLicenseIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuiteLicenseId.Get(), o.SuiteLicenseId.IsSet()
}

// HasSuiteLicenseId returns a boolean if a field has been set.
func (o *SuiteLicenseAssignmentDto) HasSuiteLicenseId() bool {
	if o != nil && o.SuiteLicenseId.IsSet() {
		return true
	}

	return false
}

// SetSuiteLicenseId gets a reference to the given NullableString and assigns it to the SuiteLicenseId field.
func (o *SuiteLicenseAssignmentDto) SetSuiteLicenseId(v string) {
	o.SuiteLicenseId.Set(&v)
}
// SetSuiteLicenseIdNil sets the value for SuiteLicenseId to be an explicit nil
func (o *SuiteLicenseAssignmentDto) SetSuiteLicenseIdNil() {
	o.SuiteLicenseId.Set(nil)
}

// UnsetSuiteLicenseId ensures that no value is present for SuiteLicenseId, not even an explicit nil
func (o *SuiteLicenseAssignmentDto) UnsetSuiteLicenseId() {
	o.SuiteLicenseId.Unset()
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *SuiteLicenseAssignmentDto) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuiteLicenseAssignmentDto) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *SuiteLicenseAssignmentDto) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *SuiteLicenseAssignmentDto) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetAvailableSeats returns the AvailableSeats field value if set, zero value otherwise.
func (o *SuiteLicenseAssignmentDto) GetAvailableSeats() int32 {
	if o == nil || IsNil(o.AvailableSeats) {
		var ret int32
		return ret
	}
	return *o.AvailableSeats
}

// GetAvailableSeatsOk returns a tuple with the AvailableSeats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuiteLicenseAssignmentDto) GetAvailableSeatsOk() (*int32, bool) {
	if o == nil || IsNil(o.AvailableSeats) {
		return nil, false
	}
	return o.AvailableSeats, true
}

// HasAvailableSeats returns a boolean if a field has been set.
func (o *SuiteLicenseAssignmentDto) HasAvailableSeats() bool {
	if o != nil && !IsNil(o.AvailableSeats) {
		return true
	}

	return false
}

// SetAvailableSeats gets a reference to the given int32 and assigns it to the AvailableSeats field.
func (o *SuiteLicenseAssignmentDto) SetAvailableSeats(v int32) {
	o.AvailableSeats = &v
}

// GetTotalSeats returns the TotalSeats field value if set, zero value otherwise.
func (o *SuiteLicenseAssignmentDto) GetTotalSeats() int32 {
	if o == nil || IsNil(o.TotalSeats) {
		var ret int32
		return ret
	}
	return *o.TotalSeats
}

// GetTotalSeatsOk returns a tuple with the TotalSeats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuiteLicenseAssignmentDto) GetTotalSeatsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalSeats) {
		return nil, false
	}
	return o.TotalSeats, true
}

// HasTotalSeats returns a boolean if a field has been set.
func (o *SuiteLicenseAssignmentDto) HasTotalSeats() bool {
	if o != nil && !IsNil(o.TotalSeats) {
		return true
	}

	return false
}

// SetTotalSeats gets a reference to the given int32 and assigns it to the TotalSeats field.
func (o *SuiteLicenseAssignmentDto) SetTotalSeats(v int32) {
	o.TotalSeats = &v
}

func (o SuiteLicenseAssignmentDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuiteLicenseAssignmentDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.Assigned) {
		toSerialize["assigned"] = o.Assigned
	}
	if o.EnrollmentId.IsSet() {
		toSerialize["enrollmentId"] = o.EnrollmentId.Get()
	}
	if o.SuiteLicenseId.IsSet() {
		toSerialize["suiteLicenseId"] = o.SuiteLicenseId.Get()
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.AvailableSeats) {
		toSerialize["availableSeats"] = o.AvailableSeats
	}
	if !IsNil(o.TotalSeats) {
		toSerialize["totalSeats"] = o.TotalSeats
	}
	return toSerialize, nil
}

type NullableSuiteLicenseAssignmentDto struct {
	value *SuiteLicenseAssignmentDto
	isSet bool
}

func (v NullableSuiteLicenseAssignmentDto) Get() *SuiteLicenseAssignmentDto {
	return v.value
}

func (v *NullableSuiteLicenseAssignmentDto) Set(val *SuiteLicenseAssignmentDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSuiteLicenseAssignmentDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSuiteLicenseAssignmentDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuiteLicenseAssignmentDto(val *SuiteLicenseAssignmentDto) *NullableSuiteLicenseAssignmentDto {
	return &NullableSuiteLicenseAssignmentDto{value: val, isSet: true}
}

func (v NullableSuiteLicenseAssignmentDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuiteLicenseAssignmentDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


