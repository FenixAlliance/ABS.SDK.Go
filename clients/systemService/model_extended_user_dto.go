/*
SystemService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ExtendedUserDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtendedUserDto{}

// ExtendedUserDto struct for ExtendedUserDto
type ExtendedUserDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	FullName NullableString `json:"fullName,omitempty"`
	QualifiedName NullableString `json:"qualifiedName,omitempty"`
	PublicName NullableString `json:"publicName,omitempty"`
	LastName NullableString `json:"lastName,omitempty"`
	FirstName NullableString `json:"firstName,omitempty"`
	CoverUrl NullableString `json:"coverUrl,omitempty"`
	AvatarUrl NullableString `json:"avatarUrl,omitempty"`
	GitHubUrl NullableString `json:"gitHubUrl,omitempty"`
	CountryId NullableString `json:"countryId,omitempty"`
	TimezoneId NullableString `json:"timezoneId,omitempty"`
	WebsiteUrl NullableString `json:"websiteUrl,omitempty"`
	TwitterUrl NullableString `json:"twitterUrl,omitempty"`
	YouTubeUrl NullableString `json:"youTubeUrl,omitempty"`
	LinkedInUrl NullableString `json:"linkedInUrl,omitempty"`
	FacebookUrl NullableString `json:"facebookUrl,omitempty"`
	InstagramUrl NullableString `json:"instagramUrl,omitempty"`
	SocialProfileId NullableString `json:"socialProfileId,omitempty"`
	Birthday NullableTime `json:"birthday,omitempty"`
	IdProvider NullableString `json:"idProvider,omitempty"`
	LanguageId NullableString `json:"languageId,omitempty"`
	Gender NullableInt32 `json:"gender,omitempty"`
	CityId NullableString `json:"cityId,omitempty"`
	StateId NullableString `json:"stateId,omitempty"`
	Email NullableString `json:"email,omitempty"`
	About NullableString `json:"about,omitempty"`
	JobTitle NullableString `json:"jobTitle,omitempty"`
	SocialFeedId NullableString `json:"socialFeedId,omitempty"`
	CurrentTenantId NullableString `json:"currentTenantId,omitempty"`
	CurrentEnrollmentId NullableString `json:"currentEnrollmentId,omitempty"`
	Status NullableString `json:"status,omitempty"`
	CartId NullableString `json:"cartId,omitempty"`
	WalletId NullableString `json:"walletId,omitempty"`
	UserName NullableString `json:"userName,omitempty"`
	CurrencyId NullableString `json:"currencyId,omitempty"`
	PhoneNumber NullableString `json:"phoneNumber,omitempty"`
	PublicIdentifier NullableString `json:"publicIdentifier,omitempty"`
	IdentityProvider NullableString `json:"identityProvider,omitempty"`
	PhoneNumberConfirmed *bool `json:"phoneNumberConfirmed,omitempty"`
	EmailConfirmed *bool `json:"emailConfirmed,omitempty"`
	Availability NullableInt32 `json:"availability,omitempty"`
	LockoutEnabled *bool `json:"lockoutEnabled,omitempty"`
	LockoutEnd NullableTime `json:"lockoutEnd,omitempty"`
	EnrollmentsCount NullableInt32 `json:"enrollmentsCount,omitempty"`
	SiteTheme NullableInt32 `json:"siteTheme,omitempty"`
	Cart *CartDto `json:"cart,omitempty"`
	Wallet *WalletDto `json:"wallet,omitempty"`
	SocialProfile *SocialProfileDto `json:"socialProfile,omitempty"`
	Settings *UserSettingsDto `json:"settings,omitempty"`
}

// NewExtendedUserDto instantiates a new ExtendedUserDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtendedUserDto() *ExtendedUserDto {
	this := ExtendedUserDto{}
	return &this
}

// NewExtendedUserDtoWithDefaults instantiates a new ExtendedUserDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtendedUserDtoWithDefaults() *ExtendedUserDto {
	this := ExtendedUserDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ExtendedUserDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ExtendedUserDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ExtendedUserDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *ExtendedUserDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *ExtendedUserDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *ExtendedUserDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetFullName returns the FullName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetFullName() string {
	if o == nil || IsNil(o.FullName.Get()) {
		var ret string
		return ret
	}
	return *o.FullName.Get()
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullName.Get(), o.FullName.IsSet()
}

// HasFullName returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasFullName() bool {
	if o != nil && o.FullName.IsSet() {
		return true
	}

	return false
}

// SetFullName gets a reference to the given NullableString and assigns it to the FullName field.
func (o *ExtendedUserDto) SetFullName(v string) {
	o.FullName.Set(&v)
}
// SetFullNameNil sets the value for FullName to be an explicit nil
func (o *ExtendedUserDto) SetFullNameNil() {
	o.FullName.Set(nil)
}

// UnsetFullName ensures that no value is present for FullName, not even an explicit nil
func (o *ExtendedUserDto) UnsetFullName() {
	o.FullName.Unset()
}

// GetQualifiedName returns the QualifiedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetQualifiedName() string {
	if o == nil || IsNil(o.QualifiedName.Get()) {
		var ret string
		return ret
	}
	return *o.QualifiedName.Get()
}

// GetQualifiedNameOk returns a tuple with the QualifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetQualifiedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.QualifiedName.Get(), o.QualifiedName.IsSet()
}

// HasQualifiedName returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasQualifiedName() bool {
	if o != nil && o.QualifiedName.IsSet() {
		return true
	}

	return false
}

// SetQualifiedName gets a reference to the given NullableString and assigns it to the QualifiedName field.
func (o *ExtendedUserDto) SetQualifiedName(v string) {
	o.QualifiedName.Set(&v)
}
// SetQualifiedNameNil sets the value for QualifiedName to be an explicit nil
func (o *ExtendedUserDto) SetQualifiedNameNil() {
	o.QualifiedName.Set(nil)
}

// UnsetQualifiedName ensures that no value is present for QualifiedName, not even an explicit nil
func (o *ExtendedUserDto) UnsetQualifiedName() {
	o.QualifiedName.Unset()
}

// GetPublicName returns the PublicName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetPublicName() string {
	if o == nil || IsNil(o.PublicName.Get()) {
		var ret string
		return ret
	}
	return *o.PublicName.Get()
}

// GetPublicNameOk returns a tuple with the PublicName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetPublicNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicName.Get(), o.PublicName.IsSet()
}

// HasPublicName returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasPublicName() bool {
	if o != nil && o.PublicName.IsSet() {
		return true
	}

	return false
}

// SetPublicName gets a reference to the given NullableString and assigns it to the PublicName field.
func (o *ExtendedUserDto) SetPublicName(v string) {
	o.PublicName.Set(&v)
}
// SetPublicNameNil sets the value for PublicName to be an explicit nil
func (o *ExtendedUserDto) SetPublicNameNil() {
	o.PublicName.Set(nil)
}

// UnsetPublicName ensures that no value is present for PublicName, not even an explicit nil
func (o *ExtendedUserDto) UnsetPublicName() {
	o.PublicName.Unset()
}

// GetLastName returns the LastName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetLastName() string {
	if o == nil || IsNil(o.LastName.Get()) {
		var ret string
		return ret
	}
	return *o.LastName.Get()
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastName.Get(), o.LastName.IsSet()
}

// HasLastName returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasLastName() bool {
	if o != nil && o.LastName.IsSet() {
		return true
	}

	return false
}

// SetLastName gets a reference to the given NullableString and assigns it to the LastName field.
func (o *ExtendedUserDto) SetLastName(v string) {
	o.LastName.Set(&v)
}
// SetLastNameNil sets the value for LastName to be an explicit nil
func (o *ExtendedUserDto) SetLastNameNil() {
	o.LastName.Set(nil)
}

// UnsetLastName ensures that no value is present for LastName, not even an explicit nil
func (o *ExtendedUserDto) UnsetLastName() {
	o.LastName.Unset()
}

// GetFirstName returns the FirstName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetFirstName() string {
	if o == nil || IsNil(o.FirstName.Get()) {
		var ret string
		return ret
	}
	return *o.FirstName.Get()
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstName.Get(), o.FirstName.IsSet()
}

// HasFirstName returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasFirstName() bool {
	if o != nil && o.FirstName.IsSet() {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given NullableString and assigns it to the FirstName field.
func (o *ExtendedUserDto) SetFirstName(v string) {
	o.FirstName.Set(&v)
}
// SetFirstNameNil sets the value for FirstName to be an explicit nil
func (o *ExtendedUserDto) SetFirstNameNil() {
	o.FirstName.Set(nil)
}

// UnsetFirstName ensures that no value is present for FirstName, not even an explicit nil
func (o *ExtendedUserDto) UnsetFirstName() {
	o.FirstName.Unset()
}

// GetCoverUrl returns the CoverUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetCoverUrl() string {
	if o == nil || IsNil(o.CoverUrl.Get()) {
		var ret string
		return ret
	}
	return *o.CoverUrl.Get()
}

// GetCoverUrlOk returns a tuple with the CoverUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetCoverUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CoverUrl.Get(), o.CoverUrl.IsSet()
}

// HasCoverUrl returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasCoverUrl() bool {
	if o != nil && o.CoverUrl.IsSet() {
		return true
	}

	return false
}

// SetCoverUrl gets a reference to the given NullableString and assigns it to the CoverUrl field.
func (o *ExtendedUserDto) SetCoverUrl(v string) {
	o.CoverUrl.Set(&v)
}
// SetCoverUrlNil sets the value for CoverUrl to be an explicit nil
func (o *ExtendedUserDto) SetCoverUrlNil() {
	o.CoverUrl.Set(nil)
}

// UnsetCoverUrl ensures that no value is present for CoverUrl, not even an explicit nil
func (o *ExtendedUserDto) UnsetCoverUrl() {
	o.CoverUrl.Unset()
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl.Get()) {
		var ret string
		return ret
	}
	return *o.AvatarUrl.Get()
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetAvatarUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvatarUrl.Get(), o.AvatarUrl.IsSet()
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasAvatarUrl() bool {
	if o != nil && o.AvatarUrl.IsSet() {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given NullableString and assigns it to the AvatarUrl field.
func (o *ExtendedUserDto) SetAvatarUrl(v string) {
	o.AvatarUrl.Set(&v)
}
// SetAvatarUrlNil sets the value for AvatarUrl to be an explicit nil
func (o *ExtendedUserDto) SetAvatarUrlNil() {
	o.AvatarUrl.Set(nil)
}

// UnsetAvatarUrl ensures that no value is present for AvatarUrl, not even an explicit nil
func (o *ExtendedUserDto) UnsetAvatarUrl() {
	o.AvatarUrl.Unset()
}

// GetGitHubUrl returns the GitHubUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetGitHubUrl() string {
	if o == nil || IsNil(o.GitHubUrl.Get()) {
		var ret string
		return ret
	}
	return *o.GitHubUrl.Get()
}

// GetGitHubUrlOk returns a tuple with the GitHubUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetGitHubUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GitHubUrl.Get(), o.GitHubUrl.IsSet()
}

// HasGitHubUrl returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasGitHubUrl() bool {
	if o != nil && o.GitHubUrl.IsSet() {
		return true
	}

	return false
}

// SetGitHubUrl gets a reference to the given NullableString and assigns it to the GitHubUrl field.
func (o *ExtendedUserDto) SetGitHubUrl(v string) {
	o.GitHubUrl.Set(&v)
}
// SetGitHubUrlNil sets the value for GitHubUrl to be an explicit nil
func (o *ExtendedUserDto) SetGitHubUrlNil() {
	o.GitHubUrl.Set(nil)
}

// UnsetGitHubUrl ensures that no value is present for GitHubUrl, not even an explicit nil
func (o *ExtendedUserDto) UnsetGitHubUrl() {
	o.GitHubUrl.Unset()
}

// GetCountryId returns the CountryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetCountryId() string {
	if o == nil || IsNil(o.CountryId.Get()) {
		var ret string
		return ret
	}
	return *o.CountryId.Get()
}

// GetCountryIdOk returns a tuple with the CountryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetCountryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryId.Get(), o.CountryId.IsSet()
}

// HasCountryId returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasCountryId() bool {
	if o != nil && o.CountryId.IsSet() {
		return true
	}

	return false
}

// SetCountryId gets a reference to the given NullableString and assigns it to the CountryId field.
func (o *ExtendedUserDto) SetCountryId(v string) {
	o.CountryId.Set(&v)
}
// SetCountryIdNil sets the value for CountryId to be an explicit nil
func (o *ExtendedUserDto) SetCountryIdNil() {
	o.CountryId.Set(nil)
}

// UnsetCountryId ensures that no value is present for CountryId, not even an explicit nil
func (o *ExtendedUserDto) UnsetCountryId() {
	o.CountryId.Unset()
}

// GetTimezoneId returns the TimezoneId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetTimezoneId() string {
	if o == nil || IsNil(o.TimezoneId.Get()) {
		var ret string
		return ret
	}
	return *o.TimezoneId.Get()
}

// GetTimezoneIdOk returns a tuple with the TimezoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetTimezoneIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimezoneId.Get(), o.TimezoneId.IsSet()
}

// HasTimezoneId returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasTimezoneId() bool {
	if o != nil && o.TimezoneId.IsSet() {
		return true
	}

	return false
}

// SetTimezoneId gets a reference to the given NullableString and assigns it to the TimezoneId field.
func (o *ExtendedUserDto) SetTimezoneId(v string) {
	o.TimezoneId.Set(&v)
}
// SetTimezoneIdNil sets the value for TimezoneId to be an explicit nil
func (o *ExtendedUserDto) SetTimezoneIdNil() {
	o.TimezoneId.Set(nil)
}

// UnsetTimezoneId ensures that no value is present for TimezoneId, not even an explicit nil
func (o *ExtendedUserDto) UnsetTimezoneId() {
	o.TimezoneId.Unset()
}

// GetWebsiteUrl returns the WebsiteUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetWebsiteUrl() string {
	if o == nil || IsNil(o.WebsiteUrl.Get()) {
		var ret string
		return ret
	}
	return *o.WebsiteUrl.Get()
}

// GetWebsiteUrlOk returns a tuple with the WebsiteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetWebsiteUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebsiteUrl.Get(), o.WebsiteUrl.IsSet()
}

// HasWebsiteUrl returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasWebsiteUrl() bool {
	if o != nil && o.WebsiteUrl.IsSet() {
		return true
	}

	return false
}

// SetWebsiteUrl gets a reference to the given NullableString and assigns it to the WebsiteUrl field.
func (o *ExtendedUserDto) SetWebsiteUrl(v string) {
	o.WebsiteUrl.Set(&v)
}
// SetWebsiteUrlNil sets the value for WebsiteUrl to be an explicit nil
func (o *ExtendedUserDto) SetWebsiteUrlNil() {
	o.WebsiteUrl.Set(nil)
}

// UnsetWebsiteUrl ensures that no value is present for WebsiteUrl, not even an explicit nil
func (o *ExtendedUserDto) UnsetWebsiteUrl() {
	o.WebsiteUrl.Unset()
}

// GetTwitterUrl returns the TwitterUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetTwitterUrl() string {
	if o == nil || IsNil(o.TwitterUrl.Get()) {
		var ret string
		return ret
	}
	return *o.TwitterUrl.Get()
}

// GetTwitterUrlOk returns a tuple with the TwitterUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetTwitterUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TwitterUrl.Get(), o.TwitterUrl.IsSet()
}

// HasTwitterUrl returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasTwitterUrl() bool {
	if o != nil && o.TwitterUrl.IsSet() {
		return true
	}

	return false
}

// SetTwitterUrl gets a reference to the given NullableString and assigns it to the TwitterUrl field.
func (o *ExtendedUserDto) SetTwitterUrl(v string) {
	o.TwitterUrl.Set(&v)
}
// SetTwitterUrlNil sets the value for TwitterUrl to be an explicit nil
func (o *ExtendedUserDto) SetTwitterUrlNil() {
	o.TwitterUrl.Set(nil)
}

// UnsetTwitterUrl ensures that no value is present for TwitterUrl, not even an explicit nil
func (o *ExtendedUserDto) UnsetTwitterUrl() {
	o.TwitterUrl.Unset()
}

// GetYouTubeUrl returns the YouTubeUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetYouTubeUrl() string {
	if o == nil || IsNil(o.YouTubeUrl.Get()) {
		var ret string
		return ret
	}
	return *o.YouTubeUrl.Get()
}

// GetYouTubeUrlOk returns a tuple with the YouTubeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetYouTubeUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.YouTubeUrl.Get(), o.YouTubeUrl.IsSet()
}

// HasYouTubeUrl returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasYouTubeUrl() bool {
	if o != nil && o.YouTubeUrl.IsSet() {
		return true
	}

	return false
}

// SetYouTubeUrl gets a reference to the given NullableString and assigns it to the YouTubeUrl field.
func (o *ExtendedUserDto) SetYouTubeUrl(v string) {
	o.YouTubeUrl.Set(&v)
}
// SetYouTubeUrlNil sets the value for YouTubeUrl to be an explicit nil
func (o *ExtendedUserDto) SetYouTubeUrlNil() {
	o.YouTubeUrl.Set(nil)
}

// UnsetYouTubeUrl ensures that no value is present for YouTubeUrl, not even an explicit nil
func (o *ExtendedUserDto) UnsetYouTubeUrl() {
	o.YouTubeUrl.Unset()
}

// GetLinkedInUrl returns the LinkedInUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetLinkedInUrl() string {
	if o == nil || IsNil(o.LinkedInUrl.Get()) {
		var ret string
		return ret
	}
	return *o.LinkedInUrl.Get()
}

// GetLinkedInUrlOk returns a tuple with the LinkedInUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetLinkedInUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinkedInUrl.Get(), o.LinkedInUrl.IsSet()
}

// HasLinkedInUrl returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasLinkedInUrl() bool {
	if o != nil && o.LinkedInUrl.IsSet() {
		return true
	}

	return false
}

// SetLinkedInUrl gets a reference to the given NullableString and assigns it to the LinkedInUrl field.
func (o *ExtendedUserDto) SetLinkedInUrl(v string) {
	o.LinkedInUrl.Set(&v)
}
// SetLinkedInUrlNil sets the value for LinkedInUrl to be an explicit nil
func (o *ExtendedUserDto) SetLinkedInUrlNil() {
	o.LinkedInUrl.Set(nil)
}

// UnsetLinkedInUrl ensures that no value is present for LinkedInUrl, not even an explicit nil
func (o *ExtendedUserDto) UnsetLinkedInUrl() {
	o.LinkedInUrl.Unset()
}

// GetFacebookUrl returns the FacebookUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetFacebookUrl() string {
	if o == nil || IsNil(o.FacebookUrl.Get()) {
		var ret string
		return ret
	}
	return *o.FacebookUrl.Get()
}

// GetFacebookUrlOk returns a tuple with the FacebookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetFacebookUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FacebookUrl.Get(), o.FacebookUrl.IsSet()
}

// HasFacebookUrl returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasFacebookUrl() bool {
	if o != nil && o.FacebookUrl.IsSet() {
		return true
	}

	return false
}

// SetFacebookUrl gets a reference to the given NullableString and assigns it to the FacebookUrl field.
func (o *ExtendedUserDto) SetFacebookUrl(v string) {
	o.FacebookUrl.Set(&v)
}
// SetFacebookUrlNil sets the value for FacebookUrl to be an explicit nil
func (o *ExtendedUserDto) SetFacebookUrlNil() {
	o.FacebookUrl.Set(nil)
}

// UnsetFacebookUrl ensures that no value is present for FacebookUrl, not even an explicit nil
func (o *ExtendedUserDto) UnsetFacebookUrl() {
	o.FacebookUrl.Unset()
}

// GetInstagramUrl returns the InstagramUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetInstagramUrl() string {
	if o == nil || IsNil(o.InstagramUrl.Get()) {
		var ret string
		return ret
	}
	return *o.InstagramUrl.Get()
}

// GetInstagramUrlOk returns a tuple with the InstagramUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetInstagramUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstagramUrl.Get(), o.InstagramUrl.IsSet()
}

// HasInstagramUrl returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasInstagramUrl() bool {
	if o != nil && o.InstagramUrl.IsSet() {
		return true
	}

	return false
}

// SetInstagramUrl gets a reference to the given NullableString and assigns it to the InstagramUrl field.
func (o *ExtendedUserDto) SetInstagramUrl(v string) {
	o.InstagramUrl.Set(&v)
}
// SetInstagramUrlNil sets the value for InstagramUrl to be an explicit nil
func (o *ExtendedUserDto) SetInstagramUrlNil() {
	o.InstagramUrl.Set(nil)
}

// UnsetInstagramUrl ensures that no value is present for InstagramUrl, not even an explicit nil
func (o *ExtendedUserDto) UnsetInstagramUrl() {
	o.InstagramUrl.Unset()
}

// GetSocialProfileId returns the SocialProfileId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetSocialProfileId() string {
	if o == nil || IsNil(o.SocialProfileId.Get()) {
		var ret string
		return ret
	}
	return *o.SocialProfileId.Get()
}

// GetSocialProfileIdOk returns a tuple with the SocialProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetSocialProfileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SocialProfileId.Get(), o.SocialProfileId.IsSet()
}

// HasSocialProfileId returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasSocialProfileId() bool {
	if o != nil && o.SocialProfileId.IsSet() {
		return true
	}

	return false
}

// SetSocialProfileId gets a reference to the given NullableString and assigns it to the SocialProfileId field.
func (o *ExtendedUserDto) SetSocialProfileId(v string) {
	o.SocialProfileId.Set(&v)
}
// SetSocialProfileIdNil sets the value for SocialProfileId to be an explicit nil
func (o *ExtendedUserDto) SetSocialProfileIdNil() {
	o.SocialProfileId.Set(nil)
}

// UnsetSocialProfileId ensures that no value is present for SocialProfileId, not even an explicit nil
func (o *ExtendedUserDto) UnsetSocialProfileId() {
	o.SocialProfileId.Unset()
}

// GetBirthday returns the Birthday field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetBirthday() time.Time {
	if o == nil || IsNil(o.Birthday.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Birthday.Get()
}

// GetBirthdayOk returns a tuple with the Birthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetBirthdayOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Birthday.Get(), o.Birthday.IsSet()
}

// HasBirthday returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasBirthday() bool {
	if o != nil && o.Birthday.IsSet() {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given NullableTime and assigns it to the Birthday field.
func (o *ExtendedUserDto) SetBirthday(v time.Time) {
	o.Birthday.Set(&v)
}
// SetBirthdayNil sets the value for Birthday to be an explicit nil
func (o *ExtendedUserDto) SetBirthdayNil() {
	o.Birthday.Set(nil)
}

// UnsetBirthday ensures that no value is present for Birthday, not even an explicit nil
func (o *ExtendedUserDto) UnsetBirthday() {
	o.Birthday.Unset()
}

// GetIdProvider returns the IdProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetIdProvider() string {
	if o == nil || IsNil(o.IdProvider.Get()) {
		var ret string
		return ret
	}
	return *o.IdProvider.Get()
}

// GetIdProviderOk returns a tuple with the IdProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetIdProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IdProvider.Get(), o.IdProvider.IsSet()
}

// HasIdProvider returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasIdProvider() bool {
	if o != nil && o.IdProvider.IsSet() {
		return true
	}

	return false
}

// SetIdProvider gets a reference to the given NullableString and assigns it to the IdProvider field.
func (o *ExtendedUserDto) SetIdProvider(v string) {
	o.IdProvider.Set(&v)
}
// SetIdProviderNil sets the value for IdProvider to be an explicit nil
func (o *ExtendedUserDto) SetIdProviderNil() {
	o.IdProvider.Set(nil)
}

// UnsetIdProvider ensures that no value is present for IdProvider, not even an explicit nil
func (o *ExtendedUserDto) UnsetIdProvider() {
	o.IdProvider.Unset()
}

// GetLanguageId returns the LanguageId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetLanguageId() string {
	if o == nil || IsNil(o.LanguageId.Get()) {
		var ret string
		return ret
	}
	return *o.LanguageId.Get()
}

// GetLanguageIdOk returns a tuple with the LanguageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetLanguageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LanguageId.Get(), o.LanguageId.IsSet()
}

// HasLanguageId returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasLanguageId() bool {
	if o != nil && o.LanguageId.IsSet() {
		return true
	}

	return false
}

// SetLanguageId gets a reference to the given NullableString and assigns it to the LanguageId field.
func (o *ExtendedUserDto) SetLanguageId(v string) {
	o.LanguageId.Set(&v)
}
// SetLanguageIdNil sets the value for LanguageId to be an explicit nil
func (o *ExtendedUserDto) SetLanguageIdNil() {
	o.LanguageId.Set(nil)
}

// UnsetLanguageId ensures that no value is present for LanguageId, not even an explicit nil
func (o *ExtendedUserDto) UnsetLanguageId() {
	o.LanguageId.Unset()
}

// GetGender returns the Gender field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetGender() int32 {
	if o == nil || IsNil(o.Gender.Get()) {
		var ret int32
		return ret
	}
	return *o.Gender.Get()
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetGenderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gender.Get(), o.Gender.IsSet()
}

// HasGender returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasGender() bool {
	if o != nil && o.Gender.IsSet() {
		return true
	}

	return false
}

// SetGender gets a reference to the given NullableInt32 and assigns it to the Gender field.
func (o *ExtendedUserDto) SetGender(v int32) {
	o.Gender.Set(&v)
}
// SetGenderNil sets the value for Gender to be an explicit nil
func (o *ExtendedUserDto) SetGenderNil() {
	o.Gender.Set(nil)
}

// UnsetGender ensures that no value is present for Gender, not even an explicit nil
func (o *ExtendedUserDto) UnsetGender() {
	o.Gender.Unset()
}

// GetCityId returns the CityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetCityId() string {
	if o == nil || IsNil(o.CityId.Get()) {
		var ret string
		return ret
	}
	return *o.CityId.Get()
}

// GetCityIdOk returns a tuple with the CityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetCityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CityId.Get(), o.CityId.IsSet()
}

// HasCityId returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasCityId() bool {
	if o != nil && o.CityId.IsSet() {
		return true
	}

	return false
}

// SetCityId gets a reference to the given NullableString and assigns it to the CityId field.
func (o *ExtendedUserDto) SetCityId(v string) {
	o.CityId.Set(&v)
}
// SetCityIdNil sets the value for CityId to be an explicit nil
func (o *ExtendedUserDto) SetCityIdNil() {
	o.CityId.Set(nil)
}

// UnsetCityId ensures that no value is present for CityId, not even an explicit nil
func (o *ExtendedUserDto) UnsetCityId() {
	o.CityId.Unset()
}

// GetStateId returns the StateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetStateId() string {
	if o == nil || IsNil(o.StateId.Get()) {
		var ret string
		return ret
	}
	return *o.StateId.Get()
}

// GetStateIdOk returns a tuple with the StateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetStateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StateId.Get(), o.StateId.IsSet()
}

// HasStateId returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasStateId() bool {
	if o != nil && o.StateId.IsSet() {
		return true
	}

	return false
}

// SetStateId gets a reference to the given NullableString and assigns it to the StateId field.
func (o *ExtendedUserDto) SetStateId(v string) {
	o.StateId.Set(&v)
}
// SetStateIdNil sets the value for StateId to be an explicit nil
func (o *ExtendedUserDto) SetStateIdNil() {
	o.StateId.Set(nil)
}

// UnsetStateId ensures that no value is present for StateId, not even an explicit nil
func (o *ExtendedUserDto) UnsetStateId() {
	o.StateId.Unset()
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *ExtendedUserDto) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *ExtendedUserDto) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *ExtendedUserDto) UnsetEmail() {
	o.Email.Unset()
}

// GetAbout returns the About field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetAbout() string {
	if o == nil || IsNil(o.About.Get()) {
		var ret string
		return ret
	}
	return *o.About.Get()
}

// GetAboutOk returns a tuple with the About field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetAboutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.About.Get(), o.About.IsSet()
}

// HasAbout returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasAbout() bool {
	if o != nil && o.About.IsSet() {
		return true
	}

	return false
}

// SetAbout gets a reference to the given NullableString and assigns it to the About field.
func (o *ExtendedUserDto) SetAbout(v string) {
	o.About.Set(&v)
}
// SetAboutNil sets the value for About to be an explicit nil
func (o *ExtendedUserDto) SetAboutNil() {
	o.About.Set(nil)
}

// UnsetAbout ensures that no value is present for About, not even an explicit nil
func (o *ExtendedUserDto) UnsetAbout() {
	o.About.Unset()
}

// GetJobTitle returns the JobTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetJobTitle() string {
	if o == nil || IsNil(o.JobTitle.Get()) {
		var ret string
		return ret
	}
	return *o.JobTitle.Get()
}

// GetJobTitleOk returns a tuple with the JobTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetJobTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobTitle.Get(), o.JobTitle.IsSet()
}

// HasJobTitle returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasJobTitle() bool {
	if o != nil && o.JobTitle.IsSet() {
		return true
	}

	return false
}

// SetJobTitle gets a reference to the given NullableString and assigns it to the JobTitle field.
func (o *ExtendedUserDto) SetJobTitle(v string) {
	o.JobTitle.Set(&v)
}
// SetJobTitleNil sets the value for JobTitle to be an explicit nil
func (o *ExtendedUserDto) SetJobTitleNil() {
	o.JobTitle.Set(nil)
}

// UnsetJobTitle ensures that no value is present for JobTitle, not even an explicit nil
func (o *ExtendedUserDto) UnsetJobTitle() {
	o.JobTitle.Unset()
}

// GetSocialFeedId returns the SocialFeedId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetSocialFeedId() string {
	if o == nil || IsNil(o.SocialFeedId.Get()) {
		var ret string
		return ret
	}
	return *o.SocialFeedId.Get()
}

// GetSocialFeedIdOk returns a tuple with the SocialFeedId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetSocialFeedIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SocialFeedId.Get(), o.SocialFeedId.IsSet()
}

// HasSocialFeedId returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasSocialFeedId() bool {
	if o != nil && o.SocialFeedId.IsSet() {
		return true
	}

	return false
}

// SetSocialFeedId gets a reference to the given NullableString and assigns it to the SocialFeedId field.
func (o *ExtendedUserDto) SetSocialFeedId(v string) {
	o.SocialFeedId.Set(&v)
}
// SetSocialFeedIdNil sets the value for SocialFeedId to be an explicit nil
func (o *ExtendedUserDto) SetSocialFeedIdNil() {
	o.SocialFeedId.Set(nil)
}

// UnsetSocialFeedId ensures that no value is present for SocialFeedId, not even an explicit nil
func (o *ExtendedUserDto) UnsetSocialFeedId() {
	o.SocialFeedId.Unset()
}

// GetCurrentTenantId returns the CurrentTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetCurrentTenantId() string {
	if o == nil || IsNil(o.CurrentTenantId.Get()) {
		var ret string
		return ret
	}
	return *o.CurrentTenantId.Get()
}

// GetCurrentTenantIdOk returns a tuple with the CurrentTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetCurrentTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentTenantId.Get(), o.CurrentTenantId.IsSet()
}

// HasCurrentTenantId returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasCurrentTenantId() bool {
	if o != nil && o.CurrentTenantId.IsSet() {
		return true
	}

	return false
}

// SetCurrentTenantId gets a reference to the given NullableString and assigns it to the CurrentTenantId field.
func (o *ExtendedUserDto) SetCurrentTenantId(v string) {
	o.CurrentTenantId.Set(&v)
}
// SetCurrentTenantIdNil sets the value for CurrentTenantId to be an explicit nil
func (o *ExtendedUserDto) SetCurrentTenantIdNil() {
	o.CurrentTenantId.Set(nil)
}

// UnsetCurrentTenantId ensures that no value is present for CurrentTenantId, not even an explicit nil
func (o *ExtendedUserDto) UnsetCurrentTenantId() {
	o.CurrentTenantId.Unset()
}

// GetCurrentEnrollmentId returns the CurrentEnrollmentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetCurrentEnrollmentId() string {
	if o == nil || IsNil(o.CurrentEnrollmentId.Get()) {
		var ret string
		return ret
	}
	return *o.CurrentEnrollmentId.Get()
}

// GetCurrentEnrollmentIdOk returns a tuple with the CurrentEnrollmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetCurrentEnrollmentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentEnrollmentId.Get(), o.CurrentEnrollmentId.IsSet()
}

// HasCurrentEnrollmentId returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasCurrentEnrollmentId() bool {
	if o != nil && o.CurrentEnrollmentId.IsSet() {
		return true
	}

	return false
}

// SetCurrentEnrollmentId gets a reference to the given NullableString and assigns it to the CurrentEnrollmentId field.
func (o *ExtendedUserDto) SetCurrentEnrollmentId(v string) {
	o.CurrentEnrollmentId.Set(&v)
}
// SetCurrentEnrollmentIdNil sets the value for CurrentEnrollmentId to be an explicit nil
func (o *ExtendedUserDto) SetCurrentEnrollmentIdNil() {
	o.CurrentEnrollmentId.Set(nil)
}

// UnsetCurrentEnrollmentId ensures that no value is present for CurrentEnrollmentId, not even an explicit nil
func (o *ExtendedUserDto) UnsetCurrentEnrollmentId() {
	o.CurrentEnrollmentId.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *ExtendedUserDto) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *ExtendedUserDto) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *ExtendedUserDto) UnsetStatus() {
	o.Status.Unset()
}

// GetCartId returns the CartId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetCartId() string {
	if o == nil || IsNil(o.CartId.Get()) {
		var ret string
		return ret
	}
	return *o.CartId.Get()
}

// GetCartIdOk returns a tuple with the CartId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetCartIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CartId.Get(), o.CartId.IsSet()
}

// HasCartId returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasCartId() bool {
	if o != nil && o.CartId.IsSet() {
		return true
	}

	return false
}

// SetCartId gets a reference to the given NullableString and assigns it to the CartId field.
func (o *ExtendedUserDto) SetCartId(v string) {
	o.CartId.Set(&v)
}
// SetCartIdNil sets the value for CartId to be an explicit nil
func (o *ExtendedUserDto) SetCartIdNil() {
	o.CartId.Set(nil)
}

// UnsetCartId ensures that no value is present for CartId, not even an explicit nil
func (o *ExtendedUserDto) UnsetCartId() {
	o.CartId.Unset()
}

// GetWalletId returns the WalletId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetWalletId() string {
	if o == nil || IsNil(o.WalletId.Get()) {
		var ret string
		return ret
	}
	return *o.WalletId.Get()
}

// GetWalletIdOk returns a tuple with the WalletId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetWalletIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WalletId.Get(), o.WalletId.IsSet()
}

// HasWalletId returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasWalletId() bool {
	if o != nil && o.WalletId.IsSet() {
		return true
	}

	return false
}

// SetWalletId gets a reference to the given NullableString and assigns it to the WalletId field.
func (o *ExtendedUserDto) SetWalletId(v string) {
	o.WalletId.Set(&v)
}
// SetWalletIdNil sets the value for WalletId to be an explicit nil
func (o *ExtendedUserDto) SetWalletIdNil() {
	o.WalletId.Set(nil)
}

// UnsetWalletId ensures that no value is present for WalletId, not even an explicit nil
func (o *ExtendedUserDto) UnsetWalletId() {
	o.WalletId.Unset()
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetUserName() string {
	if o == nil || IsNil(o.UserName.Get()) {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *ExtendedUserDto) SetUserName(v string) {
	o.UserName.Set(&v)
}
// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *ExtendedUserDto) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *ExtendedUserDto) UnsetUserName() {
	o.UserName.Unset()
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetCurrencyId() string {
	if o == nil || IsNil(o.CurrencyId.Get()) {
		var ret string
		return ret
	}
	return *o.CurrencyId.Get()
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetCurrencyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencyId.Get(), o.CurrencyId.IsSet()
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasCurrencyId() bool {
	if o != nil && o.CurrencyId.IsSet() {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given NullableString and assigns it to the CurrencyId field.
func (o *ExtendedUserDto) SetCurrencyId(v string) {
	o.CurrencyId.Set(&v)
}
// SetCurrencyIdNil sets the value for CurrencyId to be an explicit nil
func (o *ExtendedUserDto) SetCurrencyIdNil() {
	o.CurrencyId.Set(nil)
}

// UnsetCurrencyId ensures that no value is present for CurrencyId, not even an explicit nil
func (o *ExtendedUserDto) UnsetCurrencyId() {
	o.CurrencyId.Unset()
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber.Get()) {
		var ret string
		return ret
	}
	return *o.PhoneNumber.Get()
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetPhoneNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhoneNumber.Get(), o.PhoneNumber.IsSet()
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber.IsSet() {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given NullableString and assigns it to the PhoneNumber field.
func (o *ExtendedUserDto) SetPhoneNumber(v string) {
	o.PhoneNumber.Set(&v)
}
// SetPhoneNumberNil sets the value for PhoneNumber to be an explicit nil
func (o *ExtendedUserDto) SetPhoneNumberNil() {
	o.PhoneNumber.Set(nil)
}

// UnsetPhoneNumber ensures that no value is present for PhoneNumber, not even an explicit nil
func (o *ExtendedUserDto) UnsetPhoneNumber() {
	o.PhoneNumber.Unset()
}

// GetPublicIdentifier returns the PublicIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetPublicIdentifier() string {
	if o == nil || IsNil(o.PublicIdentifier.Get()) {
		var ret string
		return ret
	}
	return *o.PublicIdentifier.Get()
}

// GetPublicIdentifierOk returns a tuple with the PublicIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetPublicIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicIdentifier.Get(), o.PublicIdentifier.IsSet()
}

// HasPublicIdentifier returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasPublicIdentifier() bool {
	if o != nil && o.PublicIdentifier.IsSet() {
		return true
	}

	return false
}

// SetPublicIdentifier gets a reference to the given NullableString and assigns it to the PublicIdentifier field.
func (o *ExtendedUserDto) SetPublicIdentifier(v string) {
	o.PublicIdentifier.Set(&v)
}
// SetPublicIdentifierNil sets the value for PublicIdentifier to be an explicit nil
func (o *ExtendedUserDto) SetPublicIdentifierNil() {
	o.PublicIdentifier.Set(nil)
}

// UnsetPublicIdentifier ensures that no value is present for PublicIdentifier, not even an explicit nil
func (o *ExtendedUserDto) UnsetPublicIdentifier() {
	o.PublicIdentifier.Unset()
}

// GetIdentityProvider returns the IdentityProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetIdentityProvider() string {
	if o == nil || IsNil(o.IdentityProvider.Get()) {
		var ret string
		return ret
	}
	return *o.IdentityProvider.Get()
}

// GetIdentityProviderOk returns a tuple with the IdentityProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetIdentityProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IdentityProvider.Get(), o.IdentityProvider.IsSet()
}

// HasIdentityProvider returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasIdentityProvider() bool {
	if o != nil && o.IdentityProvider.IsSet() {
		return true
	}

	return false
}

// SetIdentityProvider gets a reference to the given NullableString and assigns it to the IdentityProvider field.
func (o *ExtendedUserDto) SetIdentityProvider(v string) {
	o.IdentityProvider.Set(&v)
}
// SetIdentityProviderNil sets the value for IdentityProvider to be an explicit nil
func (o *ExtendedUserDto) SetIdentityProviderNil() {
	o.IdentityProvider.Set(nil)
}

// UnsetIdentityProvider ensures that no value is present for IdentityProvider, not even an explicit nil
func (o *ExtendedUserDto) UnsetIdentityProvider() {
	o.IdentityProvider.Unset()
}

// GetPhoneNumberConfirmed returns the PhoneNumberConfirmed field value if set, zero value otherwise.
func (o *ExtendedUserDto) GetPhoneNumberConfirmed() bool {
	if o == nil || IsNil(o.PhoneNumberConfirmed) {
		var ret bool
		return ret
	}
	return *o.PhoneNumberConfirmed
}

// GetPhoneNumberConfirmedOk returns a tuple with the PhoneNumberConfirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedUserDto) GetPhoneNumberConfirmedOk() (*bool, bool) {
	if o == nil || IsNil(o.PhoneNumberConfirmed) {
		return nil, false
	}
	return o.PhoneNumberConfirmed, true
}

// HasPhoneNumberConfirmed returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasPhoneNumberConfirmed() bool {
	if o != nil && !IsNil(o.PhoneNumberConfirmed) {
		return true
	}

	return false
}

// SetPhoneNumberConfirmed gets a reference to the given bool and assigns it to the PhoneNumberConfirmed field.
func (o *ExtendedUserDto) SetPhoneNumberConfirmed(v bool) {
	o.PhoneNumberConfirmed = &v
}

// GetEmailConfirmed returns the EmailConfirmed field value if set, zero value otherwise.
func (o *ExtendedUserDto) GetEmailConfirmed() bool {
	if o == nil || IsNil(o.EmailConfirmed) {
		var ret bool
		return ret
	}
	return *o.EmailConfirmed
}

// GetEmailConfirmedOk returns a tuple with the EmailConfirmed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedUserDto) GetEmailConfirmedOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailConfirmed) {
		return nil, false
	}
	return o.EmailConfirmed, true
}

// HasEmailConfirmed returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasEmailConfirmed() bool {
	if o != nil && !IsNil(o.EmailConfirmed) {
		return true
	}

	return false
}

// SetEmailConfirmed gets a reference to the given bool and assigns it to the EmailConfirmed field.
func (o *ExtendedUserDto) SetEmailConfirmed(v bool) {
	o.EmailConfirmed = &v
}

// GetAvailability returns the Availability field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetAvailability() int32 {
	if o == nil || IsNil(o.Availability.Get()) {
		var ret int32
		return ret
	}
	return *o.Availability.Get()
}

// GetAvailabilityOk returns a tuple with the Availability field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetAvailabilityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Availability.Get(), o.Availability.IsSet()
}

// HasAvailability returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasAvailability() bool {
	if o != nil && o.Availability.IsSet() {
		return true
	}

	return false
}

// SetAvailability gets a reference to the given NullableInt32 and assigns it to the Availability field.
func (o *ExtendedUserDto) SetAvailability(v int32) {
	o.Availability.Set(&v)
}
// SetAvailabilityNil sets the value for Availability to be an explicit nil
func (o *ExtendedUserDto) SetAvailabilityNil() {
	o.Availability.Set(nil)
}

// UnsetAvailability ensures that no value is present for Availability, not even an explicit nil
func (o *ExtendedUserDto) UnsetAvailability() {
	o.Availability.Unset()
}

// GetLockoutEnabled returns the LockoutEnabled field value if set, zero value otherwise.
func (o *ExtendedUserDto) GetLockoutEnabled() bool {
	if o == nil || IsNil(o.LockoutEnabled) {
		var ret bool
		return ret
	}
	return *o.LockoutEnabled
}

// GetLockoutEnabledOk returns a tuple with the LockoutEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedUserDto) GetLockoutEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LockoutEnabled) {
		return nil, false
	}
	return o.LockoutEnabled, true
}

// HasLockoutEnabled returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasLockoutEnabled() bool {
	if o != nil && !IsNil(o.LockoutEnabled) {
		return true
	}

	return false
}

// SetLockoutEnabled gets a reference to the given bool and assigns it to the LockoutEnabled field.
func (o *ExtendedUserDto) SetLockoutEnabled(v bool) {
	o.LockoutEnabled = &v
}

// GetLockoutEnd returns the LockoutEnd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetLockoutEnd() time.Time {
	if o == nil || IsNil(o.LockoutEnd.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LockoutEnd.Get()
}

// GetLockoutEndOk returns a tuple with the LockoutEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetLockoutEndOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LockoutEnd.Get(), o.LockoutEnd.IsSet()
}

// HasLockoutEnd returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasLockoutEnd() bool {
	if o != nil && o.LockoutEnd.IsSet() {
		return true
	}

	return false
}

// SetLockoutEnd gets a reference to the given NullableTime and assigns it to the LockoutEnd field.
func (o *ExtendedUserDto) SetLockoutEnd(v time.Time) {
	o.LockoutEnd.Set(&v)
}
// SetLockoutEndNil sets the value for LockoutEnd to be an explicit nil
func (o *ExtendedUserDto) SetLockoutEndNil() {
	o.LockoutEnd.Set(nil)
}

// UnsetLockoutEnd ensures that no value is present for LockoutEnd, not even an explicit nil
func (o *ExtendedUserDto) UnsetLockoutEnd() {
	o.LockoutEnd.Unset()
}

// GetEnrollmentsCount returns the EnrollmentsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetEnrollmentsCount() int32 {
	if o == nil || IsNil(o.EnrollmentsCount.Get()) {
		var ret int32
		return ret
	}
	return *o.EnrollmentsCount.Get()
}

// GetEnrollmentsCountOk returns a tuple with the EnrollmentsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetEnrollmentsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnrollmentsCount.Get(), o.EnrollmentsCount.IsSet()
}

// HasEnrollmentsCount returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasEnrollmentsCount() bool {
	if o != nil && o.EnrollmentsCount.IsSet() {
		return true
	}

	return false
}

// SetEnrollmentsCount gets a reference to the given NullableInt32 and assigns it to the EnrollmentsCount field.
func (o *ExtendedUserDto) SetEnrollmentsCount(v int32) {
	o.EnrollmentsCount.Set(&v)
}
// SetEnrollmentsCountNil sets the value for EnrollmentsCount to be an explicit nil
func (o *ExtendedUserDto) SetEnrollmentsCountNil() {
	o.EnrollmentsCount.Set(nil)
}

// UnsetEnrollmentsCount ensures that no value is present for EnrollmentsCount, not even an explicit nil
func (o *ExtendedUserDto) UnsetEnrollmentsCount() {
	o.EnrollmentsCount.Unset()
}

// GetSiteTheme returns the SiteTheme field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedUserDto) GetSiteTheme() int32 {
	if o == nil || IsNil(o.SiteTheme.Get()) {
		var ret int32
		return ret
	}
	return *o.SiteTheme.Get()
}

// GetSiteThemeOk returns a tuple with the SiteTheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedUserDto) GetSiteThemeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SiteTheme.Get(), o.SiteTheme.IsSet()
}

// HasSiteTheme returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasSiteTheme() bool {
	if o != nil && o.SiteTheme.IsSet() {
		return true
	}

	return false
}

// SetSiteTheme gets a reference to the given NullableInt32 and assigns it to the SiteTheme field.
func (o *ExtendedUserDto) SetSiteTheme(v int32) {
	o.SiteTheme.Set(&v)
}
// SetSiteThemeNil sets the value for SiteTheme to be an explicit nil
func (o *ExtendedUserDto) SetSiteThemeNil() {
	o.SiteTheme.Set(nil)
}

// UnsetSiteTheme ensures that no value is present for SiteTheme, not even an explicit nil
func (o *ExtendedUserDto) UnsetSiteTheme() {
	o.SiteTheme.Unset()
}

// GetCart returns the Cart field value if set, zero value otherwise.
func (o *ExtendedUserDto) GetCart() CartDto {
	if o == nil || IsNil(o.Cart) {
		var ret CartDto
		return ret
	}
	return *o.Cart
}

// GetCartOk returns a tuple with the Cart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedUserDto) GetCartOk() (*CartDto, bool) {
	if o == nil || IsNil(o.Cart) {
		return nil, false
	}
	return o.Cart, true
}

// HasCart returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasCart() bool {
	if o != nil && !IsNil(o.Cart) {
		return true
	}

	return false
}

// SetCart gets a reference to the given CartDto and assigns it to the Cart field.
func (o *ExtendedUserDto) SetCart(v CartDto) {
	o.Cart = &v
}

// GetWallet returns the Wallet field value if set, zero value otherwise.
func (o *ExtendedUserDto) GetWallet() WalletDto {
	if o == nil || IsNil(o.Wallet) {
		var ret WalletDto
		return ret
	}
	return *o.Wallet
}

// GetWalletOk returns a tuple with the Wallet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedUserDto) GetWalletOk() (*WalletDto, bool) {
	if o == nil || IsNil(o.Wallet) {
		return nil, false
	}
	return o.Wallet, true
}

// HasWallet returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasWallet() bool {
	if o != nil && !IsNil(o.Wallet) {
		return true
	}

	return false
}

// SetWallet gets a reference to the given WalletDto and assigns it to the Wallet field.
func (o *ExtendedUserDto) SetWallet(v WalletDto) {
	o.Wallet = &v
}

// GetSocialProfile returns the SocialProfile field value if set, zero value otherwise.
func (o *ExtendedUserDto) GetSocialProfile() SocialProfileDto {
	if o == nil || IsNil(o.SocialProfile) {
		var ret SocialProfileDto
		return ret
	}
	return *o.SocialProfile
}

// GetSocialProfileOk returns a tuple with the SocialProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedUserDto) GetSocialProfileOk() (*SocialProfileDto, bool) {
	if o == nil || IsNil(o.SocialProfile) {
		return nil, false
	}
	return o.SocialProfile, true
}

// HasSocialProfile returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasSocialProfile() bool {
	if o != nil && !IsNil(o.SocialProfile) {
		return true
	}

	return false
}

// SetSocialProfile gets a reference to the given SocialProfileDto and assigns it to the SocialProfile field.
func (o *ExtendedUserDto) SetSocialProfile(v SocialProfileDto) {
	o.SocialProfile = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *ExtendedUserDto) GetSettings() UserSettingsDto {
	if o == nil || IsNil(o.Settings) {
		var ret UserSettingsDto
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtendedUserDto) GetSettingsOk() (*UserSettingsDto, bool) {
	if o == nil || IsNil(o.Settings) {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *ExtendedUserDto) HasSettings() bool {
	if o != nil && !IsNil(o.Settings) {
		return true
	}

	return false
}

// SetSettings gets a reference to the given UserSettingsDto and assigns it to the Settings field.
func (o *ExtendedUserDto) SetSettings(v UserSettingsDto) {
	o.Settings = &v
}

func (o ExtendedUserDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtendedUserDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.FullName.IsSet() {
		toSerialize["fullName"] = o.FullName.Get()
	}
	if o.QualifiedName.IsSet() {
		toSerialize["qualifiedName"] = o.QualifiedName.Get()
	}
	if o.PublicName.IsSet() {
		toSerialize["publicName"] = o.PublicName.Get()
	}
	if o.LastName.IsSet() {
		toSerialize["lastName"] = o.LastName.Get()
	}
	if o.FirstName.IsSet() {
		toSerialize["firstName"] = o.FirstName.Get()
	}
	if o.CoverUrl.IsSet() {
		toSerialize["coverUrl"] = o.CoverUrl.Get()
	}
	if o.AvatarUrl.IsSet() {
		toSerialize["avatarUrl"] = o.AvatarUrl.Get()
	}
	if o.GitHubUrl.IsSet() {
		toSerialize["gitHubUrl"] = o.GitHubUrl.Get()
	}
	if o.CountryId.IsSet() {
		toSerialize["countryId"] = o.CountryId.Get()
	}
	if o.TimezoneId.IsSet() {
		toSerialize["timezoneId"] = o.TimezoneId.Get()
	}
	if o.WebsiteUrl.IsSet() {
		toSerialize["websiteUrl"] = o.WebsiteUrl.Get()
	}
	if o.TwitterUrl.IsSet() {
		toSerialize["twitterUrl"] = o.TwitterUrl.Get()
	}
	if o.YouTubeUrl.IsSet() {
		toSerialize["youTubeUrl"] = o.YouTubeUrl.Get()
	}
	if o.LinkedInUrl.IsSet() {
		toSerialize["linkedInUrl"] = o.LinkedInUrl.Get()
	}
	if o.FacebookUrl.IsSet() {
		toSerialize["facebookUrl"] = o.FacebookUrl.Get()
	}
	if o.InstagramUrl.IsSet() {
		toSerialize["instagramUrl"] = o.InstagramUrl.Get()
	}
	if o.SocialProfileId.IsSet() {
		toSerialize["socialProfileId"] = o.SocialProfileId.Get()
	}
	if o.Birthday.IsSet() {
		toSerialize["birthday"] = o.Birthday.Get()
	}
	if o.IdProvider.IsSet() {
		toSerialize["idProvider"] = o.IdProvider.Get()
	}
	if o.LanguageId.IsSet() {
		toSerialize["languageId"] = o.LanguageId.Get()
	}
	if o.Gender.IsSet() {
		toSerialize["gender"] = o.Gender.Get()
	}
	if o.CityId.IsSet() {
		toSerialize["cityId"] = o.CityId.Get()
	}
	if o.StateId.IsSet() {
		toSerialize["stateId"] = o.StateId.Get()
	}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if o.About.IsSet() {
		toSerialize["about"] = o.About.Get()
	}
	if o.JobTitle.IsSet() {
		toSerialize["jobTitle"] = o.JobTitle.Get()
	}
	if o.SocialFeedId.IsSet() {
		toSerialize["socialFeedId"] = o.SocialFeedId.Get()
	}
	if o.CurrentTenantId.IsSet() {
		toSerialize["currentTenantId"] = o.CurrentTenantId.Get()
	}
	if o.CurrentEnrollmentId.IsSet() {
		toSerialize["currentEnrollmentId"] = o.CurrentEnrollmentId.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.CartId.IsSet() {
		toSerialize["cartId"] = o.CartId.Get()
	}
	if o.WalletId.IsSet() {
		toSerialize["walletId"] = o.WalletId.Get()
	}
	if o.UserName.IsSet() {
		toSerialize["userName"] = o.UserName.Get()
	}
	if o.CurrencyId.IsSet() {
		toSerialize["currencyId"] = o.CurrencyId.Get()
	}
	if o.PhoneNumber.IsSet() {
		toSerialize["phoneNumber"] = o.PhoneNumber.Get()
	}
	if o.PublicIdentifier.IsSet() {
		toSerialize["publicIdentifier"] = o.PublicIdentifier.Get()
	}
	if o.IdentityProvider.IsSet() {
		toSerialize["identityProvider"] = o.IdentityProvider.Get()
	}
	if !IsNil(o.PhoneNumberConfirmed) {
		toSerialize["phoneNumberConfirmed"] = o.PhoneNumberConfirmed
	}
	if !IsNil(o.EmailConfirmed) {
		toSerialize["emailConfirmed"] = o.EmailConfirmed
	}
	if o.Availability.IsSet() {
		toSerialize["availability"] = o.Availability.Get()
	}
	if !IsNil(o.LockoutEnabled) {
		toSerialize["lockoutEnabled"] = o.LockoutEnabled
	}
	if o.LockoutEnd.IsSet() {
		toSerialize["lockoutEnd"] = o.LockoutEnd.Get()
	}
	if o.EnrollmentsCount.IsSet() {
		toSerialize["enrollmentsCount"] = o.EnrollmentsCount.Get()
	}
	if o.SiteTheme.IsSet() {
		toSerialize["siteTheme"] = o.SiteTheme.Get()
	}
	if !IsNil(o.Cart) {
		toSerialize["cart"] = o.Cart
	}
	if !IsNil(o.Wallet) {
		toSerialize["wallet"] = o.Wallet
	}
	if !IsNil(o.SocialProfile) {
		toSerialize["socialProfile"] = o.SocialProfile
	}
	if !IsNil(o.Settings) {
		toSerialize["settings"] = o.Settings
	}
	return toSerialize, nil
}

type NullableExtendedUserDto struct {
	value *ExtendedUserDto
	isSet bool
}

func (v NullableExtendedUserDto) Get() *ExtendedUserDto {
	return v.value
}

func (v *NullableExtendedUserDto) Set(val *ExtendedUserDto) {
	v.value = val
	v.isSet = true
}

func (v NullableExtendedUserDto) IsSet() bool {
	return v.isSet
}

func (v *NullableExtendedUserDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtendedUserDto(val *ExtendedUserDto) *NullableExtendedUserDto {
	return &NullableExtendedUserDto{value: val, isSet: true}
}

func (v NullableExtendedUserDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtendedUserDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


