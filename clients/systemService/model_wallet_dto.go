/*
SystemService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the WalletDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WalletDto{}

// WalletDto struct for WalletDto
type WalletDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Balance *float64 `json:"balance,omitempty"`
	CryptoBalance *float64 `json:"cryptoBalance,omitempty"`
	TestMode *bool `json:"testMode,omitempty"`
	Verified *bool `json:"verified,omitempty"`
	Type NullableString `json:"type,omitempty"`
	CurrencyId NullableString `json:"currencyId,omitempty"`
	ForexRate *float64 `json:"forexRate,omitempty"`
	BalanceInUsd *float64 `json:"balanceInUsd,omitempty"`
	MainNetEtherBalance *float64 `json:"mainNetEtherBalance,omitempty"`
	EthereumAddress NullableString `json:"ethereumAddress,omitempty"`
	EthereumPublicKey NullableString `json:"ethereumPublicKey,omitempty"`
	EthereumPrivateKey NullableString `json:"ethereumPrivateKey,omitempty"`
	RollingReservePercent *float64 `json:"rollingReservePercent,omitempty"`
}

// NewWalletDto instantiates a new WalletDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWalletDto() *WalletDto {
	this := WalletDto{}
	return &this
}

// NewWalletDtoWithDefaults instantiates a new WalletDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWalletDtoWithDefaults() *WalletDto {
	this := WalletDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *WalletDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *WalletDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *WalletDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *WalletDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *WalletDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *WalletDto) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *WalletDto) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *WalletDto) GetBalance() float64 {
	if o == nil || IsNil(o.Balance) {
		var ret float64
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletDto) GetBalanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *WalletDto) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given float64 and assigns it to the Balance field.
func (o *WalletDto) SetBalance(v float64) {
	o.Balance = &v
}

// GetCryptoBalance returns the CryptoBalance field value if set, zero value otherwise.
func (o *WalletDto) GetCryptoBalance() float64 {
	if o == nil || IsNil(o.CryptoBalance) {
		var ret float64
		return ret
	}
	return *o.CryptoBalance
}

// GetCryptoBalanceOk returns a tuple with the CryptoBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletDto) GetCryptoBalanceOk() (*float64, bool) {
	if o == nil || IsNil(o.CryptoBalance) {
		return nil, false
	}
	return o.CryptoBalance, true
}

// HasCryptoBalance returns a boolean if a field has been set.
func (o *WalletDto) HasCryptoBalance() bool {
	if o != nil && !IsNil(o.CryptoBalance) {
		return true
	}

	return false
}

// SetCryptoBalance gets a reference to the given float64 and assigns it to the CryptoBalance field.
func (o *WalletDto) SetCryptoBalance(v float64) {
	o.CryptoBalance = &v
}

// GetTestMode returns the TestMode field value if set, zero value otherwise.
func (o *WalletDto) GetTestMode() bool {
	if o == nil || IsNil(o.TestMode) {
		var ret bool
		return ret
	}
	return *o.TestMode
}

// GetTestModeOk returns a tuple with the TestMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletDto) GetTestModeOk() (*bool, bool) {
	if o == nil || IsNil(o.TestMode) {
		return nil, false
	}
	return o.TestMode, true
}

// HasTestMode returns a boolean if a field has been set.
func (o *WalletDto) HasTestMode() bool {
	if o != nil && !IsNil(o.TestMode) {
		return true
	}

	return false
}

// SetTestMode gets a reference to the given bool and assigns it to the TestMode field.
func (o *WalletDto) SetTestMode(v bool) {
	o.TestMode = &v
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *WalletDto) GetVerified() bool {
	if o == nil || IsNil(o.Verified) {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletDto) GetVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Verified) {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *WalletDto) HasVerified() bool {
	if o != nil && !IsNil(o.Verified) {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *WalletDto) SetVerified(v bool) {
	o.Verified = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletDto) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletDto) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *WalletDto) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *WalletDto) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *WalletDto) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *WalletDto) UnsetType() {
	o.Type.Unset()
}

// GetCurrencyId returns the CurrencyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletDto) GetCurrencyId() string {
	if o == nil || IsNil(o.CurrencyId.Get()) {
		var ret string
		return ret
	}
	return *o.CurrencyId.Get()
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletDto) GetCurrencyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrencyId.Get(), o.CurrencyId.IsSet()
}

// HasCurrencyId returns a boolean if a field has been set.
func (o *WalletDto) HasCurrencyId() bool {
	if o != nil && o.CurrencyId.IsSet() {
		return true
	}

	return false
}

// SetCurrencyId gets a reference to the given NullableString and assigns it to the CurrencyId field.
func (o *WalletDto) SetCurrencyId(v string) {
	o.CurrencyId.Set(&v)
}
// SetCurrencyIdNil sets the value for CurrencyId to be an explicit nil
func (o *WalletDto) SetCurrencyIdNil() {
	o.CurrencyId.Set(nil)
}

// UnsetCurrencyId ensures that no value is present for CurrencyId, not even an explicit nil
func (o *WalletDto) UnsetCurrencyId() {
	o.CurrencyId.Unset()
}

// GetForexRate returns the ForexRate field value if set, zero value otherwise.
func (o *WalletDto) GetForexRate() float64 {
	if o == nil || IsNil(o.ForexRate) {
		var ret float64
		return ret
	}
	return *o.ForexRate
}

// GetForexRateOk returns a tuple with the ForexRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletDto) GetForexRateOk() (*float64, bool) {
	if o == nil || IsNil(o.ForexRate) {
		return nil, false
	}
	return o.ForexRate, true
}

// HasForexRate returns a boolean if a field has been set.
func (o *WalletDto) HasForexRate() bool {
	if o != nil && !IsNil(o.ForexRate) {
		return true
	}

	return false
}

// SetForexRate gets a reference to the given float64 and assigns it to the ForexRate field.
func (o *WalletDto) SetForexRate(v float64) {
	o.ForexRate = &v
}

// GetBalanceInUsd returns the BalanceInUsd field value if set, zero value otherwise.
func (o *WalletDto) GetBalanceInUsd() float64 {
	if o == nil || IsNil(o.BalanceInUsd) {
		var ret float64
		return ret
	}
	return *o.BalanceInUsd
}

// GetBalanceInUsdOk returns a tuple with the BalanceInUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletDto) GetBalanceInUsdOk() (*float64, bool) {
	if o == nil || IsNil(o.BalanceInUsd) {
		return nil, false
	}
	return o.BalanceInUsd, true
}

// HasBalanceInUsd returns a boolean if a field has been set.
func (o *WalletDto) HasBalanceInUsd() bool {
	if o != nil && !IsNil(o.BalanceInUsd) {
		return true
	}

	return false
}

// SetBalanceInUsd gets a reference to the given float64 and assigns it to the BalanceInUsd field.
func (o *WalletDto) SetBalanceInUsd(v float64) {
	o.BalanceInUsd = &v
}

// GetMainNetEtherBalance returns the MainNetEtherBalance field value if set, zero value otherwise.
func (o *WalletDto) GetMainNetEtherBalance() float64 {
	if o == nil || IsNil(o.MainNetEtherBalance) {
		var ret float64
		return ret
	}
	return *o.MainNetEtherBalance
}

// GetMainNetEtherBalanceOk returns a tuple with the MainNetEtherBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletDto) GetMainNetEtherBalanceOk() (*float64, bool) {
	if o == nil || IsNil(o.MainNetEtherBalance) {
		return nil, false
	}
	return o.MainNetEtherBalance, true
}

// HasMainNetEtherBalance returns a boolean if a field has been set.
func (o *WalletDto) HasMainNetEtherBalance() bool {
	if o != nil && !IsNil(o.MainNetEtherBalance) {
		return true
	}

	return false
}

// SetMainNetEtherBalance gets a reference to the given float64 and assigns it to the MainNetEtherBalance field.
func (o *WalletDto) SetMainNetEtherBalance(v float64) {
	o.MainNetEtherBalance = &v
}

// GetEthereumAddress returns the EthereumAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletDto) GetEthereumAddress() string {
	if o == nil || IsNil(o.EthereumAddress.Get()) {
		var ret string
		return ret
	}
	return *o.EthereumAddress.Get()
}

// GetEthereumAddressOk returns a tuple with the EthereumAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletDto) GetEthereumAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EthereumAddress.Get(), o.EthereumAddress.IsSet()
}

// HasEthereumAddress returns a boolean if a field has been set.
func (o *WalletDto) HasEthereumAddress() bool {
	if o != nil && o.EthereumAddress.IsSet() {
		return true
	}

	return false
}

// SetEthereumAddress gets a reference to the given NullableString and assigns it to the EthereumAddress field.
func (o *WalletDto) SetEthereumAddress(v string) {
	o.EthereumAddress.Set(&v)
}
// SetEthereumAddressNil sets the value for EthereumAddress to be an explicit nil
func (o *WalletDto) SetEthereumAddressNil() {
	o.EthereumAddress.Set(nil)
}

// UnsetEthereumAddress ensures that no value is present for EthereumAddress, not even an explicit nil
func (o *WalletDto) UnsetEthereumAddress() {
	o.EthereumAddress.Unset()
}

// GetEthereumPublicKey returns the EthereumPublicKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletDto) GetEthereumPublicKey() string {
	if o == nil || IsNil(o.EthereumPublicKey.Get()) {
		var ret string
		return ret
	}
	return *o.EthereumPublicKey.Get()
}

// GetEthereumPublicKeyOk returns a tuple with the EthereumPublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletDto) GetEthereumPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EthereumPublicKey.Get(), o.EthereumPublicKey.IsSet()
}

// HasEthereumPublicKey returns a boolean if a field has been set.
func (o *WalletDto) HasEthereumPublicKey() bool {
	if o != nil && o.EthereumPublicKey.IsSet() {
		return true
	}

	return false
}

// SetEthereumPublicKey gets a reference to the given NullableString and assigns it to the EthereumPublicKey field.
func (o *WalletDto) SetEthereumPublicKey(v string) {
	o.EthereumPublicKey.Set(&v)
}
// SetEthereumPublicKeyNil sets the value for EthereumPublicKey to be an explicit nil
func (o *WalletDto) SetEthereumPublicKeyNil() {
	o.EthereumPublicKey.Set(nil)
}

// UnsetEthereumPublicKey ensures that no value is present for EthereumPublicKey, not even an explicit nil
func (o *WalletDto) UnsetEthereumPublicKey() {
	o.EthereumPublicKey.Unset()
}

// GetEthereumPrivateKey returns the EthereumPrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WalletDto) GetEthereumPrivateKey() string {
	if o == nil || IsNil(o.EthereumPrivateKey.Get()) {
		var ret string
		return ret
	}
	return *o.EthereumPrivateKey.Get()
}

// GetEthereumPrivateKeyOk returns a tuple with the EthereumPrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WalletDto) GetEthereumPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EthereumPrivateKey.Get(), o.EthereumPrivateKey.IsSet()
}

// HasEthereumPrivateKey returns a boolean if a field has been set.
func (o *WalletDto) HasEthereumPrivateKey() bool {
	if o != nil && o.EthereumPrivateKey.IsSet() {
		return true
	}

	return false
}

// SetEthereumPrivateKey gets a reference to the given NullableString and assigns it to the EthereumPrivateKey field.
func (o *WalletDto) SetEthereumPrivateKey(v string) {
	o.EthereumPrivateKey.Set(&v)
}
// SetEthereumPrivateKeyNil sets the value for EthereumPrivateKey to be an explicit nil
func (o *WalletDto) SetEthereumPrivateKeyNil() {
	o.EthereumPrivateKey.Set(nil)
}

// UnsetEthereumPrivateKey ensures that no value is present for EthereumPrivateKey, not even an explicit nil
func (o *WalletDto) UnsetEthereumPrivateKey() {
	o.EthereumPrivateKey.Unset()
}

// GetRollingReservePercent returns the RollingReservePercent field value if set, zero value otherwise.
func (o *WalletDto) GetRollingReservePercent() float64 {
	if o == nil || IsNil(o.RollingReservePercent) {
		var ret float64
		return ret
	}
	return *o.RollingReservePercent
}

// GetRollingReservePercentOk returns a tuple with the RollingReservePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WalletDto) GetRollingReservePercentOk() (*float64, bool) {
	if o == nil || IsNil(o.RollingReservePercent) {
		return nil, false
	}
	return o.RollingReservePercent, true
}

// HasRollingReservePercent returns a boolean if a field has been set.
func (o *WalletDto) HasRollingReservePercent() bool {
	if o != nil && !IsNil(o.RollingReservePercent) {
		return true
	}

	return false
}

// SetRollingReservePercent gets a reference to the given float64 and assigns it to the RollingReservePercent field.
func (o *WalletDto) SetRollingReservePercent(v float64) {
	o.RollingReservePercent = &v
}

func (o WalletDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WalletDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.CryptoBalance) {
		toSerialize["cryptoBalance"] = o.CryptoBalance
	}
	if !IsNil(o.TestMode) {
		toSerialize["testMode"] = o.TestMode
	}
	if !IsNil(o.Verified) {
		toSerialize["verified"] = o.Verified
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.CurrencyId.IsSet() {
		toSerialize["currencyId"] = o.CurrencyId.Get()
	}
	if !IsNil(o.ForexRate) {
		toSerialize["forexRate"] = o.ForexRate
	}
	if !IsNil(o.BalanceInUsd) {
		toSerialize["balanceInUsd"] = o.BalanceInUsd
	}
	if !IsNil(o.MainNetEtherBalance) {
		toSerialize["mainNetEtherBalance"] = o.MainNetEtherBalance
	}
	if o.EthereumAddress.IsSet() {
		toSerialize["ethereumAddress"] = o.EthereumAddress.Get()
	}
	if o.EthereumPublicKey.IsSet() {
		toSerialize["ethereumPublicKey"] = o.EthereumPublicKey.Get()
	}
	if o.EthereumPrivateKey.IsSet() {
		toSerialize["ethereumPrivateKey"] = o.EthereumPrivateKey.Get()
	}
	if !IsNil(o.RollingReservePercent) {
		toSerialize["rollingReservePercent"] = o.RollingReservePercent
	}
	return toSerialize, nil
}

type NullableWalletDto struct {
	value *WalletDto
	isSet bool
}

func (v NullableWalletDto) Get() *WalletDto {
	return v.value
}

func (v *NullableWalletDto) Set(val *WalletDto) {
	v.value = val
	v.isSet = true
}

func (v NullableWalletDto) IsSet() bool {
	return v.isSet
}

func (v *NullableWalletDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWalletDto(val *WalletDto) *NullableWalletDto {
	return &NullableWalletDto{value: val, isSet: true}
}

func (v NullableWalletDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWalletDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


