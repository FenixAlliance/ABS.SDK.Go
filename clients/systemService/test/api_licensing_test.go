/*
SystemService

Testing LicensingAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_LicensingAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LicensingAPIService ApiV2SystemServiceLicensingLicensesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LicensingAPI.ApiV2SystemServiceLicensingLicensesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicensingAPIService ApiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseId string

		resp, httpRes, err := apiClient.LicensingAPI.ApiV2SystemServiceLicensingLicensesLicenseIdAssignmentsGet(context.Background(), licenseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicensingAPIService ApiV2SystemServiceLicensingLicensesLicenseIdAttributesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseId string

		resp, httpRes, err := apiClient.LicensingAPI.ApiV2SystemServiceLicensingLicensesLicenseIdAttributesGet(context.Background(), licenseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicensingAPIService ApiV2SystemServiceLicensingLicensesLicenseIdFeaturesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseId string

		resp, httpRes, err := apiClient.LicensingAPI.ApiV2SystemServiceLicensingLicensesLicenseIdFeaturesGet(context.Background(), licenseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicensingAPIService ApiV2SystemServiceLicensingLicensesLicenseIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseId string

		resp, httpRes, err := apiClient.LicensingAPI.ApiV2SystemServiceLicensingLicensesLicenseIdGet(context.Background(), licenseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicensingAPIService ApiV2SystemServiceLicensingLicensesLicenseIdQuotaGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseId string

		resp, httpRes, err := apiClient.LicensingAPI.ApiV2SystemServiceLicensingLicensesLicenseIdQuotaGet(context.Background(), licenseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicensingAPIService ApiV2SystemServiceLicensingLicensesRedeemPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LicensingAPI.ApiV2SystemServiceLicensingLicensesRedeemPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LicensingAPIService ApiV2SystemServiceLicensingLicensesValidatePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.LicensingAPI.ApiV2SystemServiceLicensingLicensesValidatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
