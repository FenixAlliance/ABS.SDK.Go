/*
SupportService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"os"
)

// checks if the SupportRequestAttachmentUpdateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportRequestAttachmentUpdateDto{}

// SupportRequestAttachmentUpdateDto struct for SupportRequestAttachmentUpdateDto
type SupportRequestAttachmentUpdateDto struct {
	Notes NullableString `json:"notes,omitempty"`
	Metadata NullableString `json:"metadata,omitempty"`
	Title NullableString `json:"title,omitempty"`
	Author NullableString `json:"author,omitempty"`
	IsFolder *bool `json:"isFolder,omitempty"`
	FileName NullableString `json:"fileName,omitempty"`
	Abstract NullableString `json:"abstract,omitempty"`
	KeyWords NullableString `json:"keyWords,omitempty"`
	ValidResponse *bool `json:"validResponse,omitempty"`
	ParentFileUploadID NullableString `json:"parentFileUploadID,omitempty"`
	FilePath NullableString `json:"filePath,omitempty"`
	File Nullable*os.File `json:"file,omitempty"`
	ContentType NullableString `json:"contentType,omitempty"`
	FileLength *int64 `json:"fileLength,omitempty"`
}

// NewSupportRequestAttachmentUpdateDto instantiates a new SupportRequestAttachmentUpdateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportRequestAttachmentUpdateDto() *SupportRequestAttachmentUpdateDto {
	this := SupportRequestAttachmentUpdateDto{}
	return &this
}

// NewSupportRequestAttachmentUpdateDtoWithDefaults instantiates a new SupportRequestAttachmentUpdateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportRequestAttachmentUpdateDtoWithDefaults() *SupportRequestAttachmentUpdateDto {
	this := SupportRequestAttachmentUpdateDto{}
	return &this
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportRequestAttachmentUpdateDto) GetNotes() string {
	if o == nil || IsNil(o.Notes.Get()) {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportRequestAttachmentUpdateDto) GetNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *SupportRequestAttachmentUpdateDto) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *SupportRequestAttachmentUpdateDto) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *SupportRequestAttachmentUpdateDto) UnsetNotes() {
	o.Notes.Unset()
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportRequestAttachmentUpdateDto) GetMetadata() string {
	if o == nil || IsNil(o.Metadata.Get()) {
		var ret string
		return ret
	}
	return *o.Metadata.Get()
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportRequestAttachmentUpdateDto) GetMetadataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metadata.Get(), o.Metadata.IsSet()
}

// HasMetadata returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasMetadata() bool {
	if o != nil && o.Metadata.IsSet() {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given NullableString and assigns it to the Metadata field.
func (o *SupportRequestAttachmentUpdateDto) SetMetadata(v string) {
	o.Metadata.Set(&v)
}
// SetMetadataNil sets the value for Metadata to be an explicit nil
func (o *SupportRequestAttachmentUpdateDto) SetMetadataNil() {
	o.Metadata.Set(nil)
}

// UnsetMetadata ensures that no value is present for Metadata, not even an explicit nil
func (o *SupportRequestAttachmentUpdateDto) UnsetMetadata() {
	o.Metadata.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportRequestAttachmentUpdateDto) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportRequestAttachmentUpdateDto) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *SupportRequestAttachmentUpdateDto) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *SupportRequestAttachmentUpdateDto) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *SupportRequestAttachmentUpdateDto) UnsetTitle() {
	o.Title.Unset()
}

// GetAuthor returns the Author field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportRequestAttachmentUpdateDto) GetAuthor() string {
	if o == nil || IsNil(o.Author.Get()) {
		var ret string
		return ret
	}
	return *o.Author.Get()
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportRequestAttachmentUpdateDto) GetAuthorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Author.Get(), o.Author.IsSet()
}

// HasAuthor returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasAuthor() bool {
	if o != nil && o.Author.IsSet() {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given NullableString and assigns it to the Author field.
func (o *SupportRequestAttachmentUpdateDto) SetAuthor(v string) {
	o.Author.Set(&v)
}
// SetAuthorNil sets the value for Author to be an explicit nil
func (o *SupportRequestAttachmentUpdateDto) SetAuthorNil() {
	o.Author.Set(nil)
}

// UnsetAuthor ensures that no value is present for Author, not even an explicit nil
func (o *SupportRequestAttachmentUpdateDto) UnsetAuthor() {
	o.Author.Unset()
}

// GetIsFolder returns the IsFolder field value if set, zero value otherwise.
func (o *SupportRequestAttachmentUpdateDto) GetIsFolder() bool {
	if o == nil || IsNil(o.IsFolder) {
		var ret bool
		return ret
	}
	return *o.IsFolder
}

// GetIsFolderOk returns a tuple with the IsFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportRequestAttachmentUpdateDto) GetIsFolderOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFolder) {
		return nil, false
	}
	return o.IsFolder, true
}

// HasIsFolder returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasIsFolder() bool {
	if o != nil && !IsNil(o.IsFolder) {
		return true
	}

	return false
}

// SetIsFolder gets a reference to the given bool and assigns it to the IsFolder field.
func (o *SupportRequestAttachmentUpdateDto) SetIsFolder(v bool) {
	o.IsFolder = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportRequestAttachmentUpdateDto) GetFileName() string {
	if o == nil || IsNil(o.FileName.Get()) {
		var ret string
		return ret
	}
	return *o.FileName.Get()
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportRequestAttachmentUpdateDto) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileName.Get(), o.FileName.IsSet()
}

// HasFileName returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasFileName() bool {
	if o != nil && o.FileName.IsSet() {
		return true
	}

	return false
}

// SetFileName gets a reference to the given NullableString and assigns it to the FileName field.
func (o *SupportRequestAttachmentUpdateDto) SetFileName(v string) {
	o.FileName.Set(&v)
}
// SetFileNameNil sets the value for FileName to be an explicit nil
func (o *SupportRequestAttachmentUpdateDto) SetFileNameNil() {
	o.FileName.Set(nil)
}

// UnsetFileName ensures that no value is present for FileName, not even an explicit nil
func (o *SupportRequestAttachmentUpdateDto) UnsetFileName() {
	o.FileName.Unset()
}

// GetAbstract returns the Abstract field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportRequestAttachmentUpdateDto) GetAbstract() string {
	if o == nil || IsNil(o.Abstract.Get()) {
		var ret string
		return ret
	}
	return *o.Abstract.Get()
}

// GetAbstractOk returns a tuple with the Abstract field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportRequestAttachmentUpdateDto) GetAbstractOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Abstract.Get(), o.Abstract.IsSet()
}

// HasAbstract returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasAbstract() bool {
	if o != nil && o.Abstract.IsSet() {
		return true
	}

	return false
}

// SetAbstract gets a reference to the given NullableString and assigns it to the Abstract field.
func (o *SupportRequestAttachmentUpdateDto) SetAbstract(v string) {
	o.Abstract.Set(&v)
}
// SetAbstractNil sets the value for Abstract to be an explicit nil
func (o *SupportRequestAttachmentUpdateDto) SetAbstractNil() {
	o.Abstract.Set(nil)
}

// UnsetAbstract ensures that no value is present for Abstract, not even an explicit nil
func (o *SupportRequestAttachmentUpdateDto) UnsetAbstract() {
	o.Abstract.Unset()
}

// GetKeyWords returns the KeyWords field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportRequestAttachmentUpdateDto) GetKeyWords() string {
	if o == nil || IsNil(o.KeyWords.Get()) {
		var ret string
		return ret
	}
	return *o.KeyWords.Get()
}

// GetKeyWordsOk returns a tuple with the KeyWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportRequestAttachmentUpdateDto) GetKeyWordsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeyWords.Get(), o.KeyWords.IsSet()
}

// HasKeyWords returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasKeyWords() bool {
	if o != nil && o.KeyWords.IsSet() {
		return true
	}

	return false
}

// SetKeyWords gets a reference to the given NullableString and assigns it to the KeyWords field.
func (o *SupportRequestAttachmentUpdateDto) SetKeyWords(v string) {
	o.KeyWords.Set(&v)
}
// SetKeyWordsNil sets the value for KeyWords to be an explicit nil
func (o *SupportRequestAttachmentUpdateDto) SetKeyWordsNil() {
	o.KeyWords.Set(nil)
}

// UnsetKeyWords ensures that no value is present for KeyWords, not even an explicit nil
func (o *SupportRequestAttachmentUpdateDto) UnsetKeyWords() {
	o.KeyWords.Unset()
}

// GetValidResponse returns the ValidResponse field value if set, zero value otherwise.
func (o *SupportRequestAttachmentUpdateDto) GetValidResponse() bool {
	if o == nil || IsNil(o.ValidResponse) {
		var ret bool
		return ret
	}
	return *o.ValidResponse
}

// GetValidResponseOk returns a tuple with the ValidResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportRequestAttachmentUpdateDto) GetValidResponseOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidResponse) {
		return nil, false
	}
	return o.ValidResponse, true
}

// HasValidResponse returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasValidResponse() bool {
	if o != nil && !IsNil(o.ValidResponse) {
		return true
	}

	return false
}

// SetValidResponse gets a reference to the given bool and assigns it to the ValidResponse field.
func (o *SupportRequestAttachmentUpdateDto) SetValidResponse(v bool) {
	o.ValidResponse = &v
}

// GetParentFileUploadID returns the ParentFileUploadID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportRequestAttachmentUpdateDto) GetParentFileUploadID() string {
	if o == nil || IsNil(o.ParentFileUploadID.Get()) {
		var ret string
		return ret
	}
	return *o.ParentFileUploadID.Get()
}

// GetParentFileUploadIDOk returns a tuple with the ParentFileUploadID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportRequestAttachmentUpdateDto) GetParentFileUploadIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentFileUploadID.Get(), o.ParentFileUploadID.IsSet()
}

// HasParentFileUploadID returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasParentFileUploadID() bool {
	if o != nil && o.ParentFileUploadID.IsSet() {
		return true
	}

	return false
}

// SetParentFileUploadID gets a reference to the given NullableString and assigns it to the ParentFileUploadID field.
func (o *SupportRequestAttachmentUpdateDto) SetParentFileUploadID(v string) {
	o.ParentFileUploadID.Set(&v)
}
// SetParentFileUploadIDNil sets the value for ParentFileUploadID to be an explicit nil
func (o *SupportRequestAttachmentUpdateDto) SetParentFileUploadIDNil() {
	o.ParentFileUploadID.Set(nil)
}

// UnsetParentFileUploadID ensures that no value is present for ParentFileUploadID, not even an explicit nil
func (o *SupportRequestAttachmentUpdateDto) UnsetParentFileUploadID() {
	o.ParentFileUploadID.Unset()
}

// GetFilePath returns the FilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportRequestAttachmentUpdateDto) GetFilePath() string {
	if o == nil || IsNil(o.FilePath.Get()) {
		var ret string
		return ret
	}
	return *o.FilePath.Get()
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportRequestAttachmentUpdateDto) GetFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilePath.Get(), o.FilePath.IsSet()
}

// HasFilePath returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasFilePath() bool {
	if o != nil && o.FilePath.IsSet() {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given NullableString and assigns it to the FilePath field.
func (o *SupportRequestAttachmentUpdateDto) SetFilePath(v string) {
	o.FilePath.Set(&v)
}
// SetFilePathNil sets the value for FilePath to be an explicit nil
func (o *SupportRequestAttachmentUpdateDto) SetFilePathNil() {
	o.FilePath.Set(nil)
}

// UnsetFilePath ensures that no value is present for FilePath, not even an explicit nil
func (o *SupportRequestAttachmentUpdateDto) UnsetFilePath() {
	o.FilePath.Unset()
}

// GetFile returns the File field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportRequestAttachmentUpdateDto) GetFile() *os.File {
	if o == nil || IsNil(o.File.Get()) {
		var ret *os.File
		return ret
	}
	return *o.File.Get()
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportRequestAttachmentUpdateDto) GetFileOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return o.File.Get(), o.File.IsSet()
}

// HasFile returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasFile() bool {
	if o != nil && o.File.IsSet() {
		return true
	}

	return false
}

// SetFile gets a reference to the given Nullable*os.File and assigns it to the File field.
func (o *SupportRequestAttachmentUpdateDto) SetFile(v *os.File) {
	o.File.Set(&v)
}
// SetFileNil sets the value for File to be an explicit nil
func (o *SupportRequestAttachmentUpdateDto) SetFileNil() {
	o.File.Set(nil)
}

// UnsetFile ensures that no value is present for File, not even an explicit nil
func (o *SupportRequestAttachmentUpdateDto) UnsetFile() {
	o.File.Unset()
}

// GetContentType returns the ContentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportRequestAttachmentUpdateDto) GetContentType() string {
	if o == nil || IsNil(o.ContentType.Get()) {
		var ret string
		return ret
	}
	return *o.ContentType.Get()
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportRequestAttachmentUpdateDto) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContentType.Get(), o.ContentType.IsSet()
}

// HasContentType returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasContentType() bool {
	if o != nil && o.ContentType.IsSet() {
		return true
	}

	return false
}

// SetContentType gets a reference to the given NullableString and assigns it to the ContentType field.
func (o *SupportRequestAttachmentUpdateDto) SetContentType(v string) {
	o.ContentType.Set(&v)
}
// SetContentTypeNil sets the value for ContentType to be an explicit nil
func (o *SupportRequestAttachmentUpdateDto) SetContentTypeNil() {
	o.ContentType.Set(nil)
}

// UnsetContentType ensures that no value is present for ContentType, not even an explicit nil
func (o *SupportRequestAttachmentUpdateDto) UnsetContentType() {
	o.ContentType.Unset()
}

// GetFileLength returns the FileLength field value if set, zero value otherwise.
func (o *SupportRequestAttachmentUpdateDto) GetFileLength() int64 {
	if o == nil || IsNil(o.FileLength) {
		var ret int64
		return ret
	}
	return *o.FileLength
}

// GetFileLengthOk returns a tuple with the FileLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportRequestAttachmentUpdateDto) GetFileLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.FileLength) {
		return nil, false
	}
	return o.FileLength, true
}

// HasFileLength returns a boolean if a field has been set.
func (o *SupportRequestAttachmentUpdateDto) HasFileLength() bool {
	if o != nil && !IsNil(o.FileLength) {
		return true
	}

	return false
}

// SetFileLength gets a reference to the given int64 and assigns it to the FileLength field.
func (o *SupportRequestAttachmentUpdateDto) SetFileLength(v int64) {
	o.FileLength = &v
}

func (o SupportRequestAttachmentUpdateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportRequestAttachmentUpdateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	if o.Metadata.IsSet() {
		toSerialize["metadata"] = o.Metadata.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Author.IsSet() {
		toSerialize["author"] = o.Author.Get()
	}
	if !IsNil(o.IsFolder) {
		toSerialize["isFolder"] = o.IsFolder
	}
	if o.FileName.IsSet() {
		toSerialize["fileName"] = o.FileName.Get()
	}
	if o.Abstract.IsSet() {
		toSerialize["abstract"] = o.Abstract.Get()
	}
	if o.KeyWords.IsSet() {
		toSerialize["keyWords"] = o.KeyWords.Get()
	}
	if !IsNil(o.ValidResponse) {
		toSerialize["validResponse"] = o.ValidResponse
	}
	if o.ParentFileUploadID.IsSet() {
		toSerialize["parentFileUploadID"] = o.ParentFileUploadID.Get()
	}
	if o.FilePath.IsSet() {
		toSerialize["filePath"] = o.FilePath.Get()
	}
	if o.File.IsSet() {
		toSerialize["file"] = o.File.Get()
	}
	if o.ContentType.IsSet() {
		toSerialize["contentType"] = o.ContentType.Get()
	}
	if !IsNil(o.FileLength) {
		toSerialize["fileLength"] = o.FileLength
	}
	return toSerialize, nil
}

type NullableSupportRequestAttachmentUpdateDto struct {
	value *SupportRequestAttachmentUpdateDto
	isSet bool
}

func (v NullableSupportRequestAttachmentUpdateDto) Get() *SupportRequestAttachmentUpdateDto {
	return v.value
}

func (v *NullableSupportRequestAttachmentUpdateDto) Set(val *SupportRequestAttachmentUpdateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportRequestAttachmentUpdateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportRequestAttachmentUpdateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportRequestAttachmentUpdateDto(val *SupportRequestAttachmentUpdateDto) *NullableSupportRequestAttachmentUpdateDto {
	return &NullableSupportRequestAttachmentUpdateDto{value: val, isSet: true}
}

func (v NullableSupportRequestAttachmentUpdateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportRequestAttachmentUpdateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


