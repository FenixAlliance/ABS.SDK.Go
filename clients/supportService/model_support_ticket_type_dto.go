/*
SupportService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SupportTicketTypeDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportTicketTypeDto{}

// SupportTicketTypeDto struct for SupportTicketTypeDto
type SupportTicketTypeDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	Title NullableString `json:"title,omitempty"`
	Description NullableString `json:"description,omitempty"`
	BusinessID NullableString `json:"businessID,omitempty"`
}

// NewSupportTicketTypeDto instantiates a new SupportTicketTypeDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportTicketTypeDto() *SupportTicketTypeDto {
	this := SupportTicketTypeDto{}
	return &this
}

// NewSupportTicketTypeDtoWithDefaults instantiates a new SupportTicketTypeDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportTicketTypeDtoWithDefaults() *SupportTicketTypeDto {
	this := SupportTicketTypeDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportTicketTypeDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportTicketTypeDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SupportTicketTypeDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *SupportTicketTypeDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *SupportTicketTypeDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SupportTicketTypeDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportTicketTypeDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportTicketTypeDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *SupportTicketTypeDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *SupportTicketTypeDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *SupportTicketTypeDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *SupportTicketTypeDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportTicketTypeDto) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportTicketTypeDto) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *SupportTicketTypeDto) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *SupportTicketTypeDto) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *SupportTicketTypeDto) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *SupportTicketTypeDto) UnsetTitle() {
	o.Title.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportTicketTypeDto) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportTicketTypeDto) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *SupportTicketTypeDto) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *SupportTicketTypeDto) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *SupportTicketTypeDto) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *SupportTicketTypeDto) UnsetDescription() {
	o.Description.Unset()
}

// GetBusinessID returns the BusinessID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportTicketTypeDto) GetBusinessID() string {
	if o == nil || IsNil(o.BusinessID.Get()) {
		var ret string
		return ret
	}
	return *o.BusinessID.Get()
}

// GetBusinessIDOk returns a tuple with the BusinessID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportTicketTypeDto) GetBusinessIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusinessID.Get(), o.BusinessID.IsSet()
}

// HasBusinessID returns a boolean if a field has been set.
func (o *SupportTicketTypeDto) HasBusinessID() bool {
	if o != nil && o.BusinessID.IsSet() {
		return true
	}

	return false
}

// SetBusinessID gets a reference to the given NullableString and assigns it to the BusinessID field.
func (o *SupportTicketTypeDto) SetBusinessID(v string) {
	o.BusinessID.Set(&v)
}
// SetBusinessIDNil sets the value for BusinessID to be an explicit nil
func (o *SupportTicketTypeDto) SetBusinessIDNil() {
	o.BusinessID.Set(nil)
}

// UnsetBusinessID ensures that no value is present for BusinessID, not even an explicit nil
func (o *SupportTicketTypeDto) UnsetBusinessID() {
	o.BusinessID.Unset()
}

func (o SupportTicketTypeDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportTicketTypeDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.BusinessID.IsSet() {
		toSerialize["businessID"] = o.BusinessID.Get()
	}
	return toSerialize, nil
}

type NullableSupportTicketTypeDto struct {
	value *SupportTicketTypeDto
	isSet bool
}

func (v NullableSupportTicketTypeDto) Get() *SupportTicketTypeDto {
	return v.value
}

func (v *NullableSupportTicketTypeDto) Set(val *SupportTicketTypeDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportTicketTypeDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportTicketTypeDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportTicketTypeDto(val *SupportTicketTypeDto) *NullableSupportTicketTypeDto {
	return &NullableSupportTicketTypeDto{value: val, isSet: true}
}

func (v NullableSupportTicketTypeDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportTicketTypeDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


