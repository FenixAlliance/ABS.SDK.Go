/*
SupportService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SupportRequestAttachmentsAPIService SupportRequestAttachmentsAPI service
type SupportRequestAttachmentsAPIService service

type ApiApiV2SupportServiceSupportRequestAttachmentsCountGetRequest struct {
	ctx context.Context
	ApiService *SupportRequestAttachmentsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsCountGetRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportRequestAttachmentsCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsCountGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestAttachmentsCountGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsCountGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestAttachmentsCountGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestAttachmentsCountGetExecute(r)
}

/*
ApiV2SupportServiceSupportRequestAttachmentsCountGet Method for ApiV2SupportServiceSupportRequestAttachmentsCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SupportServiceSupportRequestAttachmentsCountGetRequest
*/
func (a *SupportRequestAttachmentsAPIService) ApiV2SupportServiceSupportRequestAttachmentsCountGet(ctx context.Context) ApiApiV2SupportServiceSupportRequestAttachmentsCountGetRequest {
	return ApiApiV2SupportServiceSupportRequestAttachmentsCountGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *SupportRequestAttachmentsAPIService) ApiV2SupportServiceSupportRequestAttachmentsCountGetExecute(r ApiApiV2SupportServiceSupportRequestAttachmentsCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestAttachmentsAPIService.ApiV2SupportServiceSupportRequestAttachmentsCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequestAttachments/Count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestAttachmentsGetRequest struct {
	ctx context.Context
	ApiService *SupportRequestAttachmentsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsGetRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportRequestAttachmentsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestAttachmentsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestAttachmentsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsGetRequest) Execute() (*SupportRequestAttachmentDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestAttachmentsGetExecute(r)
}

/*
ApiV2SupportServiceSupportRequestAttachmentsGet Method for ApiV2SupportServiceSupportRequestAttachmentsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SupportServiceSupportRequestAttachmentsGetRequest
*/
func (a *SupportRequestAttachmentsAPIService) ApiV2SupportServiceSupportRequestAttachmentsGet(ctx context.Context) ApiApiV2SupportServiceSupportRequestAttachmentsGetRequest {
	return ApiApiV2SupportServiceSupportRequestAttachmentsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SupportRequestAttachmentDtoListEnvelope
func (a *SupportRequestAttachmentsAPIService) ApiV2SupportServiceSupportRequestAttachmentsGetExecute(r ApiApiV2SupportServiceSupportRequestAttachmentsGetRequest) (*SupportRequestAttachmentDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupportRequestAttachmentDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestAttachmentsAPIService.ApiV2SupportServiceSupportRequestAttachmentsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequestAttachments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest struct {
	ctx context.Context
	ApiService *SupportRequestAttachmentsAPIService
	supportRequestAttachmentCreateDto *SupportRequestAttachmentCreateDto
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest) SupportRequestAttachmentCreateDto(supportRequestAttachmentCreateDto SupportRequestAttachmentCreateDto) ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest {
	r.supportRequestAttachmentCreateDto = &supportRequestAttachmentCreateDto
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestAttachmentsPostExecute(r)
}

/*
ApiV2SupportServiceSupportRequestAttachmentsPost Method for ApiV2SupportServiceSupportRequestAttachmentsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest
*/
func (a *SupportRequestAttachmentsAPIService) ApiV2SupportServiceSupportRequestAttachmentsPost(ctx context.Context) ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest {
	return ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SupportRequestAttachmentsAPIService) ApiV2SupportServiceSupportRequestAttachmentsPostExecute(r ApiApiV2SupportServiceSupportRequestAttachmentsPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestAttachmentsAPIService.ApiV2SupportServiceSupportRequestAttachmentsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequestAttachments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supportRequestAttachmentCreateDto == nil {
		return localVarReturnValue, nil, reportError("supportRequestAttachmentCreateDto is required and must be specified")
	}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.supportRequestAttachmentCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteRequest struct {
	ctx context.Context
	ApiService *SupportRequestAttachmentsAPIService
	supportRequestAttachmentId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteExecute(r)
}

/*
ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDelete Method for ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportRequestAttachmentId
 @return ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteRequest
*/
func (a *SupportRequestAttachmentsAPIService) ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDelete(ctx context.Context, supportRequestAttachmentId string) ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteRequest {
	return ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		supportRequestAttachmentId: supportRequestAttachmentId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SupportRequestAttachmentsAPIService) ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteExecute(r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestAttachmentsAPIService.ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequestAttachments/{supportRequestAttachmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"supportRequestAttachmentId"+"}", url.PathEscape(parameterValueToString(r.supportRequestAttachmentId, "supportRequestAttachmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGetRequest struct {
	ctx context.Context
	ApiService *SupportRequestAttachmentsAPIService
	supportRequestAttachmentId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGetRequest) Execute() (*SupportRequestAttachmentDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGetExecute(r)
}

/*
ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGet Method for ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportRequestAttachmentId
 @return ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGetRequest
*/
func (a *SupportRequestAttachmentsAPIService) ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGet(ctx context.Context, supportRequestAttachmentId string) ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGetRequest {
	return ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGetRequest{
		ApiService: a,
		ctx: ctx,
		supportRequestAttachmentId: supportRequestAttachmentId,
	}
}

// Execute executes the request
//  @return SupportRequestAttachmentDtoEnvelope
func (a *SupportRequestAttachmentsAPIService) ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGetExecute(r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGetRequest) (*SupportRequestAttachmentDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupportRequestAttachmentDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestAttachmentsAPIService.ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequestAttachments/{supportRequestAttachmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"supportRequestAttachmentId"+"}", url.PathEscape(parameterValueToString(r.supportRequestAttachmentId, "supportRequestAttachmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest struct {
	ctx context.Context
	ApiService *SupportRequestAttachmentsAPIService
	supportRequestAttachmentId string
	supportRequestAttachmentUpdateDto *SupportRequestAttachmentUpdateDto
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest) SupportRequestAttachmentUpdateDto(supportRequestAttachmentUpdateDto SupportRequestAttachmentUpdateDto) ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest {
	r.supportRequestAttachmentUpdateDto = &supportRequestAttachmentUpdateDto
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutExecute(r)
}

/*
ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPut Method for ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportRequestAttachmentId
 @return ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest
*/
func (a *SupportRequestAttachmentsAPIService) ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPut(ctx context.Context, supportRequestAttachmentId string) ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest {
	return ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest{
		ApiService: a,
		ctx: ctx,
		supportRequestAttachmentId: supportRequestAttachmentId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SupportRequestAttachmentsAPIService) ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutExecute(r ApiApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestAttachmentsAPIService.ApiV2SupportServiceSupportRequestAttachmentsSupportRequestAttachmentIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequestAttachments/{supportRequestAttachmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"supportRequestAttachmentId"+"}", url.PathEscape(parameterValueToString(r.supportRequestAttachmentId, "supportRequestAttachmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supportRequestAttachmentUpdateDto == nil {
		return localVarReturnValue, nil, reportError("supportRequestAttachmentUpdateDto is required and must be specified")
	}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.supportRequestAttachmentUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
