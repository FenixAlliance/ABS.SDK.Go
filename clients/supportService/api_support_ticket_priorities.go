/*
SupportService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SupportTicketPrioritiesAPIService SupportTicketPrioritiesAPI service
type SupportTicketPrioritiesAPIService service

type ApiApiV2SupportServiceSupportTicketPrioritiesCountGetRequest struct {
	ctx context.Context
	ApiService *SupportTicketPrioritiesAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesCountGetRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportTicketPrioritiesCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesCountGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportTicketPrioritiesCountGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesCountGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportTicketPrioritiesCountGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportTicketPrioritiesCountGetExecute(r)
}

/*
ApiV2SupportServiceSupportTicketPrioritiesCountGet Method for ApiV2SupportServiceSupportTicketPrioritiesCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SupportServiceSupportTicketPrioritiesCountGetRequest
*/
func (a *SupportTicketPrioritiesAPIService) ApiV2SupportServiceSupportTicketPrioritiesCountGet(ctx context.Context) ApiApiV2SupportServiceSupportTicketPrioritiesCountGetRequest {
	return ApiApiV2SupportServiceSupportTicketPrioritiesCountGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *SupportTicketPrioritiesAPIService) ApiV2SupportServiceSupportTicketPrioritiesCountGetExecute(r ApiApiV2SupportServiceSupportTicketPrioritiesCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportTicketPrioritiesAPIService.ApiV2SupportServiceSupportTicketPrioritiesCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportTicketPriorities/Count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportTicketPrioritiesGetRequest struct {
	ctx context.Context
	ApiService *SupportTicketPrioritiesAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesGetRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportTicketPrioritiesGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportTicketPrioritiesGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportTicketPrioritiesGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesGetRequest) Execute() (*SupportTicketPriorityDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportTicketPrioritiesGetExecute(r)
}

/*
ApiV2SupportServiceSupportTicketPrioritiesGet Method for ApiV2SupportServiceSupportTicketPrioritiesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SupportServiceSupportTicketPrioritiesGetRequest
*/
func (a *SupportTicketPrioritiesAPIService) ApiV2SupportServiceSupportTicketPrioritiesGet(ctx context.Context) ApiApiV2SupportServiceSupportTicketPrioritiesGetRequest {
	return ApiApiV2SupportServiceSupportTicketPrioritiesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SupportTicketPriorityDtoListEnvelope
func (a *SupportTicketPrioritiesAPIService) ApiV2SupportServiceSupportTicketPrioritiesGetExecute(r ApiApiV2SupportServiceSupportTicketPrioritiesGetRequest) (*SupportTicketPriorityDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupportTicketPriorityDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportTicketPrioritiesAPIService.ApiV2SupportServiceSupportTicketPrioritiesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportTicketPriorities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest struct {
	ctx context.Context
	ApiService *SupportTicketPrioritiesAPIService
	supportTicketPriorityCreateDto *SupportTicketPriorityCreateDto
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest) SupportTicketPriorityCreateDto(supportTicketPriorityCreateDto SupportTicketPriorityCreateDto) ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest {
	r.supportTicketPriorityCreateDto = &supportTicketPriorityCreateDto
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportTicketPrioritiesPostExecute(r)
}

/*
ApiV2SupportServiceSupportTicketPrioritiesPost Method for ApiV2SupportServiceSupportTicketPrioritiesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest
*/
func (a *SupportTicketPrioritiesAPIService) ApiV2SupportServiceSupportTicketPrioritiesPost(ctx context.Context) ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest {
	return ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SupportTicketPrioritiesAPIService) ApiV2SupportServiceSupportTicketPrioritiesPostExecute(r ApiApiV2SupportServiceSupportTicketPrioritiesPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportTicketPrioritiesAPIService.ApiV2SupportServiceSupportTicketPrioritiesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportTicketPriorities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supportTicketPriorityCreateDto == nil {
		return localVarReturnValue, nil, reportError("supportTicketPriorityCreateDto is required and must be specified")
	}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.supportTicketPriorityCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteRequest struct {
	ctx context.Context
	ApiService *SupportTicketPrioritiesAPIService
	supportTicketPriorityId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteExecute(r)
}

/*
ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDelete Method for ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportTicketPriorityId
 @return ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteRequest
*/
func (a *SupportTicketPrioritiesAPIService) ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDelete(ctx context.Context, supportTicketPriorityId string) ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteRequest {
	return ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		supportTicketPriorityId: supportTicketPriorityId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SupportTicketPrioritiesAPIService) ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteExecute(r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportTicketPrioritiesAPIService.ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportTicketPriorities/{supportTicketPriorityId}"
	localVarPath = strings.Replace(localVarPath, "{"+"supportTicketPriorityId"+"}", url.PathEscape(parameterValueToString(r.supportTicketPriorityId, "supportTicketPriorityId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetRequest struct {
	ctx context.Context
	ApiService *SupportTicketPrioritiesAPIService
	supportTicketPriorityId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetRequest) Execute() (*SupportTicketPriorityDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetExecute(r)
}

/*
ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGet Method for ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportTicketPriorityId
 @return ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetRequest
*/
func (a *SupportTicketPrioritiesAPIService) ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGet(ctx context.Context, supportTicketPriorityId string) ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetRequest {
	return ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetRequest{
		ApiService: a,
		ctx: ctx,
		supportTicketPriorityId: supportTicketPriorityId,
	}
}

// Execute executes the request
//  @return SupportTicketPriorityDtoEnvelope
func (a *SupportTicketPrioritiesAPIService) ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetExecute(r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGetRequest) (*SupportTicketPriorityDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupportTicketPriorityDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportTicketPrioritiesAPIService.ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportTicketPriorities/{supportTicketPriorityId}"
	localVarPath = strings.Replace(localVarPath, "{"+"supportTicketPriorityId"+"}", url.PathEscape(parameterValueToString(r.supportTicketPriorityId, "supportTicketPriorityId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest struct {
	ctx context.Context
	ApiService *SupportTicketPrioritiesAPIService
	supportTicketPriorityId string
	supportTicketPriorityUpdateDto *SupportTicketPriorityUpdateDto
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest) SupportTicketPriorityUpdateDto(supportTicketPriorityUpdateDto SupportTicketPriorityUpdateDto) ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest {
	r.supportTicketPriorityUpdateDto = &supportTicketPriorityUpdateDto
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutExecute(r)
}

/*
ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPut Method for ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportTicketPriorityId
 @return ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest
*/
func (a *SupportTicketPrioritiesAPIService) ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPut(ctx context.Context, supportTicketPriorityId string) ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest {
	return ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest{
		ApiService: a,
		ctx: ctx,
		supportTicketPriorityId: supportTicketPriorityId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SupportTicketPrioritiesAPIService) ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutExecute(r ApiApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportTicketPrioritiesAPIService.ApiV2SupportServiceSupportTicketPrioritiesSupportTicketPriorityIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportTicketPriorities/{supportTicketPriorityId}"
	localVarPath = strings.Replace(localVarPath, "{"+"supportTicketPriorityId"+"}", url.PathEscape(parameterValueToString(r.supportTicketPriorityId, "supportTicketPriorityId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supportTicketPriorityUpdateDto == nil {
		return localVarReturnValue, nil, reportError("supportTicketPriorityUpdateDto is required and must be specified")
	}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.supportTicketPriorityUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
