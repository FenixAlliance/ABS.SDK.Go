/*
SupportService

Testing SupportRequestsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_SupportRequestsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SupportRequestsAPIService ApiV2SupportServiceSupportRequestsCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SupportRequestsAPI.ApiV2SupportServiceSupportRequestsCountGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportRequestsAPIService ApiV2SupportServiceSupportRequestsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SupportRequestsAPI.ApiV2SupportServiceSupportRequestsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportRequestsAPIService ApiV2SupportServiceSupportRequestsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SupportRequestsAPI.ApiV2SupportServiceSupportRequestsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportRequestsAPIService ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportRequestId string
		var attachmentId string

		resp, httpRes, err := apiClient.SupportRequestsAPI.ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGet(context.Background(), supportRequestId, attachmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportRequestsAPIService ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportRequestId string

		resp, httpRes, err := apiClient.SupportRequestsAPI.ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGet(context.Background(), supportRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportRequestsAPIService ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportRequestId string

		resp, httpRes, err := apiClient.SupportRequestsAPI.ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGet(context.Background(), supportRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportRequestsAPIService ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportRequestId string

		resp, httpRes, err := apiClient.SupportRequestsAPI.ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPost(context.Background(), supportRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportRequestsAPIService ApiV2SupportServiceSupportRequestsSupportRequestIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportRequestId string

		resp, httpRes, err := apiClient.SupportRequestsAPI.ApiV2SupportServiceSupportRequestsSupportRequestIdDelete(context.Background(), supportRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportRequestsAPIService ApiV2SupportServiceSupportRequestsSupportRequestIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportRequestId string

		resp, httpRes, err := apiClient.SupportRequestsAPI.ApiV2SupportServiceSupportRequestsSupportRequestIdGet(context.Background(), supportRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportRequestsAPIService ApiV2SupportServiceSupportRequestsSupportRequestIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportRequestId string

		resp, httpRes, err := apiClient.SupportRequestsAPI.ApiV2SupportServiceSupportRequestsSupportRequestIdPut(context.Background(), supportRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportRequestsAPIService ApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportRequestId string

		resp, httpRes, err := apiClient.SupportRequestsAPI.ApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGet(context.Background(), supportRequestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
