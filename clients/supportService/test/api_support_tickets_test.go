/*
SupportService

Testing SupportTicketsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_SupportTicketsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SupportTicketsAPIService ApiV2SupportServiceSupportTicketsCountGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SupportTicketsAPI.ApiV2SupportServiceSupportTicketsCountGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportTicketsAPIService ApiV2SupportServiceSupportTicketsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SupportTicketsAPI.ApiV2SupportServiceSupportTicketsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportTicketsAPIService ApiV2SupportServiceSupportTicketsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SupportTicketsAPI.ApiV2SupportServiceSupportTicketsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportTicketsAPIService ApiV2SupportServiceSupportTicketsSupportTicketIdConversationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportTicketId string

		resp, httpRes, err := apiClient.SupportTicketsAPI.ApiV2SupportServiceSupportTicketsSupportTicketIdConversationsGet(context.Background(), supportTicketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportTicketsAPIService ApiV2SupportServiceSupportTicketsSupportTicketIdConversationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportTicketId string

		resp, httpRes, err := apiClient.SupportTicketsAPI.ApiV2SupportServiceSupportTicketsSupportTicketIdConversationsPost(context.Background(), supportTicketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportTicketsAPIService ApiV2SupportServiceSupportTicketsSupportTicketIdConversationsSupportTicketConversationIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportTicketId string
		var supportTicketConversationId string

		resp, httpRes, err := apiClient.SupportTicketsAPI.ApiV2SupportServiceSupportTicketsSupportTicketIdConversationsSupportTicketConversationIdDelete(context.Background(), supportTicketId, supportTicketConversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportTicketsAPIService ApiV2SupportServiceSupportTicketsSupportTicketIdConversationsSupportTicketConversationIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportTicketId string
		var supportTicketConversationId string

		resp, httpRes, err := apiClient.SupportTicketsAPI.ApiV2SupportServiceSupportTicketsSupportTicketIdConversationsSupportTicketConversationIdGet(context.Background(), supportTicketId, supportTicketConversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportTicketsAPIService ApiV2SupportServiceSupportTicketsSupportTicketIdConversationsSupportTicketConversationIdMessagesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportTicketConversationId string
		var supportTicketId string

		resp, httpRes, err := apiClient.SupportTicketsAPI.ApiV2SupportServiceSupportTicketsSupportTicketIdConversationsSupportTicketConversationIdMessagesGet(context.Background(), supportTicketConversationId, supportTicketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportTicketsAPIService ApiV2SupportServiceSupportTicketsSupportTicketIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportTicketId string

		resp, httpRes, err := apiClient.SupportTicketsAPI.ApiV2SupportServiceSupportTicketsSupportTicketIdDelete(context.Background(), supportTicketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportTicketsAPIService ApiV2SupportServiceSupportTicketsSupportTicketIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportTicketId string

		resp, httpRes, err := apiClient.SupportTicketsAPI.ApiV2SupportServiceSupportTicketsSupportTicketIdGet(context.Background(), supportTicketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SupportTicketsAPIService ApiV2SupportServiceSupportTicketsSupportTicketIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var supportTicketId string

		resp, httpRes, err := apiClient.SupportTicketsAPI.ApiV2SupportServiceSupportTicketsSupportTicketIdPut(context.Background(), supportTicketId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
