/*
SupportService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the SupportTicketConversationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportTicketConversationDto{}

// SupportTicketConversationDto struct for SupportTicketConversationDto
type SupportTicketConversationDto struct {
	Id NullableString `json:"id,omitempty"`
	Timestamp NullableTime `json:"timestamp,omitempty"`
	SupportTicketID NullableString `json:"supportTicketID,omitempty"`
	Topic NullableString `json:"topic,omitempty"`
	Closed *bool `json:"closed,omitempty"`
	ClosedTimestamp *time.Time `json:"closedTimestamp,omitempty"`
	SocialProfileID NullableString `json:"socialProfileID,omitempty"`
}

// NewSupportTicketConversationDto instantiates a new SupportTicketConversationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportTicketConversationDto() *SupportTicketConversationDto {
	this := SupportTicketConversationDto{}
	return &this
}

// NewSupportTicketConversationDtoWithDefaults instantiates a new SupportTicketConversationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportTicketConversationDtoWithDefaults() *SupportTicketConversationDto {
	this := SupportTicketConversationDto{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportTicketConversationDto) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportTicketConversationDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SupportTicketConversationDto) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *SupportTicketConversationDto) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *SupportTicketConversationDto) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SupportTicketConversationDto) UnsetId() {
	o.Id.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportTicketConversationDto) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportTicketConversationDto) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *SupportTicketConversationDto) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *SupportTicketConversationDto) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *SupportTicketConversationDto) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *SupportTicketConversationDto) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetSupportTicketID returns the SupportTicketID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportTicketConversationDto) GetSupportTicketID() string {
	if o == nil || IsNil(o.SupportTicketID.Get()) {
		var ret string
		return ret
	}
	return *o.SupportTicketID.Get()
}

// GetSupportTicketIDOk returns a tuple with the SupportTicketID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportTicketConversationDto) GetSupportTicketIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportTicketID.Get(), o.SupportTicketID.IsSet()
}

// HasSupportTicketID returns a boolean if a field has been set.
func (o *SupportTicketConversationDto) HasSupportTicketID() bool {
	if o != nil && o.SupportTicketID.IsSet() {
		return true
	}

	return false
}

// SetSupportTicketID gets a reference to the given NullableString and assigns it to the SupportTicketID field.
func (o *SupportTicketConversationDto) SetSupportTicketID(v string) {
	o.SupportTicketID.Set(&v)
}
// SetSupportTicketIDNil sets the value for SupportTicketID to be an explicit nil
func (o *SupportTicketConversationDto) SetSupportTicketIDNil() {
	o.SupportTicketID.Set(nil)
}

// UnsetSupportTicketID ensures that no value is present for SupportTicketID, not even an explicit nil
func (o *SupportTicketConversationDto) UnsetSupportTicketID() {
	o.SupportTicketID.Unset()
}

// GetTopic returns the Topic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportTicketConversationDto) GetTopic() string {
	if o == nil || IsNil(o.Topic.Get()) {
		var ret string
		return ret
	}
	return *o.Topic.Get()
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportTicketConversationDto) GetTopicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Topic.Get(), o.Topic.IsSet()
}

// HasTopic returns a boolean if a field has been set.
func (o *SupportTicketConversationDto) HasTopic() bool {
	if o != nil && o.Topic.IsSet() {
		return true
	}

	return false
}

// SetTopic gets a reference to the given NullableString and assigns it to the Topic field.
func (o *SupportTicketConversationDto) SetTopic(v string) {
	o.Topic.Set(&v)
}
// SetTopicNil sets the value for Topic to be an explicit nil
func (o *SupportTicketConversationDto) SetTopicNil() {
	o.Topic.Set(nil)
}

// UnsetTopic ensures that no value is present for Topic, not even an explicit nil
func (o *SupportTicketConversationDto) UnsetTopic() {
	o.Topic.Unset()
}

// GetClosed returns the Closed field value if set, zero value otherwise.
func (o *SupportTicketConversationDto) GetClosed() bool {
	if o == nil || IsNil(o.Closed) {
		var ret bool
		return ret
	}
	return *o.Closed
}

// GetClosedOk returns a tuple with the Closed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportTicketConversationDto) GetClosedOk() (*bool, bool) {
	if o == nil || IsNil(o.Closed) {
		return nil, false
	}
	return o.Closed, true
}

// HasClosed returns a boolean if a field has been set.
func (o *SupportTicketConversationDto) HasClosed() bool {
	if o != nil && !IsNil(o.Closed) {
		return true
	}

	return false
}

// SetClosed gets a reference to the given bool and assigns it to the Closed field.
func (o *SupportTicketConversationDto) SetClosed(v bool) {
	o.Closed = &v
}

// GetClosedTimestamp returns the ClosedTimestamp field value if set, zero value otherwise.
func (o *SupportTicketConversationDto) GetClosedTimestamp() time.Time {
	if o == nil || IsNil(o.ClosedTimestamp) {
		var ret time.Time
		return ret
	}
	return *o.ClosedTimestamp
}

// GetClosedTimestampOk returns a tuple with the ClosedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportTicketConversationDto) GetClosedTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ClosedTimestamp) {
		return nil, false
	}
	return o.ClosedTimestamp, true
}

// HasClosedTimestamp returns a boolean if a field has been set.
func (o *SupportTicketConversationDto) HasClosedTimestamp() bool {
	if o != nil && !IsNil(o.ClosedTimestamp) {
		return true
	}

	return false
}

// SetClosedTimestamp gets a reference to the given time.Time and assigns it to the ClosedTimestamp field.
func (o *SupportTicketConversationDto) SetClosedTimestamp(v time.Time) {
	o.ClosedTimestamp = &v
}

// GetSocialProfileID returns the SocialProfileID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportTicketConversationDto) GetSocialProfileID() string {
	if o == nil || IsNil(o.SocialProfileID.Get()) {
		var ret string
		return ret
	}
	return *o.SocialProfileID.Get()
}

// GetSocialProfileIDOk returns a tuple with the SocialProfileID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportTicketConversationDto) GetSocialProfileIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SocialProfileID.Get(), o.SocialProfileID.IsSet()
}

// HasSocialProfileID returns a boolean if a field has been set.
func (o *SupportTicketConversationDto) HasSocialProfileID() bool {
	if o != nil && o.SocialProfileID.IsSet() {
		return true
	}

	return false
}

// SetSocialProfileID gets a reference to the given NullableString and assigns it to the SocialProfileID field.
func (o *SupportTicketConversationDto) SetSocialProfileID(v string) {
	o.SocialProfileID.Set(&v)
}
// SetSocialProfileIDNil sets the value for SocialProfileID to be an explicit nil
func (o *SupportTicketConversationDto) SetSocialProfileIDNil() {
	o.SocialProfileID.Set(nil)
}

// UnsetSocialProfileID ensures that no value is present for SocialProfileID, not even an explicit nil
func (o *SupportTicketConversationDto) UnsetSocialProfileID() {
	o.SocialProfileID.Unset()
}

func (o SupportTicketConversationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportTicketConversationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.SupportTicketID.IsSet() {
		toSerialize["supportTicketID"] = o.SupportTicketID.Get()
	}
	if o.Topic.IsSet() {
		toSerialize["topic"] = o.Topic.Get()
	}
	if !IsNil(o.Closed) {
		toSerialize["closed"] = o.Closed
	}
	if !IsNil(o.ClosedTimestamp) {
		toSerialize["closedTimestamp"] = o.ClosedTimestamp
	}
	if o.SocialProfileID.IsSet() {
		toSerialize["socialProfileID"] = o.SocialProfileID.Get()
	}
	return toSerialize, nil
}

type NullableSupportTicketConversationDto struct {
	value *SupportTicketConversationDto
	isSet bool
}

func (v NullableSupportTicketConversationDto) Get() *SupportTicketConversationDto {
	return v.value
}

func (v *NullableSupportTicketConversationDto) Set(val *SupportTicketConversationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportTicketConversationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportTicketConversationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportTicketConversationDto(val *SupportTicketConversationDto) *NullableSupportTicketConversationDto {
	return &NullableSupportTicketConversationDto{value: val, isSet: true}
}

func (v NullableSupportTicketConversationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportTicketConversationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


