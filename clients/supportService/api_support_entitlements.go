/*
SupportService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SupportEntitlementsAPIService SupportEntitlementsAPI service
type SupportEntitlementsAPIService service

type ApiApiV2SupportServiceSupportEntitlementsCountGetRequest struct {
	ctx context.Context
	ApiService *SupportEntitlementsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportEntitlementsCountGetRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportEntitlementsCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsCountGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportEntitlementsCountGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsCountGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportEntitlementsCountGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportEntitlementsCountGetExecute(r)
}

/*
ApiV2SupportServiceSupportEntitlementsCountGet Method for ApiV2SupportServiceSupportEntitlementsCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SupportServiceSupportEntitlementsCountGetRequest
*/
func (a *SupportEntitlementsAPIService) ApiV2SupportServiceSupportEntitlementsCountGet(ctx context.Context) ApiApiV2SupportServiceSupportEntitlementsCountGetRequest {
	return ApiApiV2SupportServiceSupportEntitlementsCountGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *SupportEntitlementsAPIService) ApiV2SupportServiceSupportEntitlementsCountGetExecute(r ApiApiV2SupportServiceSupportEntitlementsCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportEntitlementsAPIService.ApiV2SupportServiceSupportEntitlementsCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportEntitlements/Count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportEntitlementsGetRequest struct {
	ctx context.Context
	ApiService *SupportEntitlementsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportEntitlementsGetRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportEntitlementsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportEntitlementsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportEntitlementsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsGetRequest) Execute() (*SupportEntitlementDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportEntitlementsGetExecute(r)
}

/*
ApiV2SupportServiceSupportEntitlementsGet Method for ApiV2SupportServiceSupportEntitlementsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SupportServiceSupportEntitlementsGetRequest
*/
func (a *SupportEntitlementsAPIService) ApiV2SupportServiceSupportEntitlementsGet(ctx context.Context) ApiApiV2SupportServiceSupportEntitlementsGetRequest {
	return ApiApiV2SupportServiceSupportEntitlementsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SupportEntitlementDtoListEnvelope
func (a *SupportEntitlementsAPIService) ApiV2SupportServiceSupportEntitlementsGetExecute(r ApiApiV2SupportServiceSupportEntitlementsGetRequest) (*SupportEntitlementDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupportEntitlementDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportEntitlementsAPIService.ApiV2SupportServiceSupportEntitlementsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportEntitlements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportEntitlementsPostRequest struct {
	ctx context.Context
	ApiService *SupportEntitlementsAPIService
	supportEntitlementCreateDto *SupportEntitlementCreateDto
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportEntitlementsPostRequest) SupportEntitlementCreateDto(supportEntitlementCreateDto SupportEntitlementCreateDto) ApiApiV2SupportServiceSupportEntitlementsPostRequest {
	r.supportEntitlementCreateDto = &supportEntitlementCreateDto
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsPostRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportEntitlementsPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsPostRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportEntitlementsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsPostRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportEntitlementsPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportEntitlementsPostExecute(r)
}

/*
ApiV2SupportServiceSupportEntitlementsPost Method for ApiV2SupportServiceSupportEntitlementsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SupportServiceSupportEntitlementsPostRequest
*/
func (a *SupportEntitlementsAPIService) ApiV2SupportServiceSupportEntitlementsPost(ctx context.Context) ApiApiV2SupportServiceSupportEntitlementsPostRequest {
	return ApiApiV2SupportServiceSupportEntitlementsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SupportEntitlementsAPIService) ApiV2SupportServiceSupportEntitlementsPostExecute(r ApiApiV2SupportServiceSupportEntitlementsPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportEntitlementsAPIService.ApiV2SupportServiceSupportEntitlementsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportEntitlements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supportEntitlementCreateDto == nil {
		return localVarReturnValue, nil, reportError("supportEntitlementCreateDto is required and must be specified")
	}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.supportEntitlementCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteRequest struct {
	ctx context.Context
	ApiService *SupportEntitlementsAPIService
	supportEntitlementId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteExecute(r)
}

/*
ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDelete Method for ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportEntitlementId
 @return ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteRequest
*/
func (a *SupportEntitlementsAPIService) ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDelete(ctx context.Context, supportEntitlementId string) ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteRequest {
	return ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		supportEntitlementId: supportEntitlementId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SupportEntitlementsAPIService) ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteExecute(r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportEntitlementsAPIService.ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportEntitlements/{supportEntitlementId}"
	localVarPath = strings.Replace(localVarPath, "{"+"supportEntitlementId"+"}", url.PathEscape(parameterValueToString(r.supportEntitlementId, "supportEntitlementId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGetRequest struct {
	ctx context.Context
	ApiService *SupportEntitlementsAPIService
	supportEntitlementId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGetRequest) Execute() (*SupportEntitlementDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGetExecute(r)
}

/*
ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGet Method for ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportEntitlementId
 @return ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGetRequest
*/
func (a *SupportEntitlementsAPIService) ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGet(ctx context.Context, supportEntitlementId string) ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGetRequest {
	return ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGetRequest{
		ApiService: a,
		ctx: ctx,
		supportEntitlementId: supportEntitlementId,
	}
}

// Execute executes the request
//  @return SupportEntitlementDtoEnvelope
func (a *SupportEntitlementsAPIService) ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGetExecute(r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGetRequest) (*SupportEntitlementDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupportEntitlementDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportEntitlementsAPIService.ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportEntitlements/{supportEntitlementId}"
	localVarPath = strings.Replace(localVarPath, "{"+"supportEntitlementId"+"}", url.PathEscape(parameterValueToString(r.supportEntitlementId, "supportEntitlementId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest struct {
	ctx context.Context
	ApiService *SupportEntitlementsAPIService
	supportEntitlementId string
	supportEntitlementUpdateDto *SupportEntitlementUpdateDto
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest) SupportEntitlementUpdateDto(supportEntitlementUpdateDto SupportEntitlementUpdateDto) ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest {
	r.supportEntitlementUpdateDto = &supportEntitlementUpdateDto
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutExecute(r)
}

/*
ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPut Method for ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportEntitlementId
 @return ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest
*/
func (a *SupportEntitlementsAPIService) ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPut(ctx context.Context, supportEntitlementId string) ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest {
	return ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest{
		ApiService: a,
		ctx: ctx,
		supportEntitlementId: supportEntitlementId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SupportEntitlementsAPIService) ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutExecute(r ApiApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportEntitlementsAPIService.ApiV2SupportServiceSupportEntitlementsSupportEntitlementIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportEntitlements/{supportEntitlementId}"
	localVarPath = strings.Replace(localVarPath, "{"+"supportEntitlementId"+"}", url.PathEscape(parameterValueToString(r.supportEntitlementId, "supportEntitlementId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supportEntitlementUpdateDto == nil {
		return localVarReturnValue, nil, reportError("supportEntitlementUpdateDto is required and must be specified")
	}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.supportEntitlementUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
