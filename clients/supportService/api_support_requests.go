/*
SupportService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SupportRequestsAPIService SupportRequestsAPI service
type SupportRequestsAPIService service

type ApiApiV2SupportServiceSupportRequestsCountGetRequest struct {
	ctx context.Context
	ApiService *SupportRequestsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestsCountGetRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportRequestsCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsCountGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestsCountGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsCountGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestsCountGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestsCountGetExecute(r)
}

/*
ApiV2SupportServiceSupportRequestsCountGet Method for ApiV2SupportServiceSupportRequestsCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SupportServiceSupportRequestsCountGetRequest
*/
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsCountGet(ctx context.Context) ApiApiV2SupportServiceSupportRequestsCountGetRequest {
	return ApiApiV2SupportServiceSupportRequestsCountGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsCountGetExecute(r ApiApiV2SupportServiceSupportRequestsCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestsAPIService.ApiV2SupportServiceSupportRequestsCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequests/Count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestsGetRequest struct {
	ctx context.Context
	ApiService *SupportRequestsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestsGetRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportRequestsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsGetRequest) Execute() (*SupportRequestDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestsGetExecute(r)
}

/*
ApiV2SupportServiceSupportRequestsGet Method for ApiV2SupportServiceSupportRequestsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SupportServiceSupportRequestsGetRequest
*/
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsGet(ctx context.Context) ApiApiV2SupportServiceSupportRequestsGetRequest {
	return ApiApiV2SupportServiceSupportRequestsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SupportRequestDtoListEnvelope
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsGetExecute(r ApiApiV2SupportServiceSupportRequestsGetRequest) (*SupportRequestDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupportRequestDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestsAPIService.ApiV2SupportServiceSupportRequestsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestsPostRequest struct {
	ctx context.Context
	ApiService *SupportRequestsAPIService
	supportRequestCreateDto *SupportRequestCreateDto
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestsPostRequest) SupportRequestCreateDto(supportRequestCreateDto SupportRequestCreateDto) ApiApiV2SupportServiceSupportRequestsPostRequest {
	r.supportRequestCreateDto = &supportRequestCreateDto
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsPostRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportRequestsPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsPostRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsPostRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestsPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestsPostExecute(r)
}

/*
ApiV2SupportServiceSupportRequestsPost Method for ApiV2SupportServiceSupportRequestsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SupportServiceSupportRequestsPostRequest
*/
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsPost(ctx context.Context) ApiApiV2SupportServiceSupportRequestsPostRequest {
	return ApiApiV2SupportServiceSupportRequestsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsPostExecute(r ApiApiV2SupportServiceSupportRequestsPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestsAPIService.ApiV2SupportServiceSupportRequestsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supportRequestCreateDto == nil {
		return localVarReturnValue, nil, reportError("supportRequestCreateDto is required and must be specified")
	}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.supportRequestCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGetRequest struct {
	ctx context.Context
	ApiService *SupportRequestsAPIService
	supportRequestId string
	attachmentId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGetRequest) Execute() (*SupportRequestAttachmentDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGetExecute(r)
}

/*
ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGet Method for ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportRequestId
 @param attachmentId
 @return ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGetRequest
*/
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGet(ctx context.Context, supportRequestId string, attachmentId string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGetRequest {
	return ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGetRequest{
		ApiService: a,
		ctx: ctx,
		supportRequestId: supportRequestId,
		attachmentId: attachmentId,
	}
}

// Execute executes the request
//  @return SupportRequestAttachmentDtoEnvelope
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGetExecute(r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGetRequest) (*SupportRequestAttachmentDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupportRequestAttachmentDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestsAPIService.ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsAttachmentIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequests/{supportRequestId}/Attachments/{attachmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"supportRequestId"+"}", url.PathEscape(parameterValueToString(r.supportRequestId, "supportRequestId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"attachmentId"+"}", url.PathEscape(parameterValueToString(r.attachmentId, "attachmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetRequest struct {
	ctx context.Context
	ApiService *SupportRequestsAPIService
	supportRequestId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetRequest) Execute() (*Int32Envelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetExecute(r)
}

/*
ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGet Method for ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportRequestId
 @return ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetRequest
*/
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGet(ctx context.Context, supportRequestId string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetRequest {
	return ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetRequest{
		ApiService: a,
		ctx: ctx,
		supportRequestId: supportRequestId,
	}
}

// Execute executes the request
//  @return Int32Envelope
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetExecute(r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGetRequest) (*Int32Envelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Int32Envelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestsAPIService.ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsCountGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequests/{supportRequestId}/Attachments/Count"
	localVarPath = strings.Replace(localVarPath, "{"+"supportRequestId"+"}", url.PathEscape(parameterValueToString(r.supportRequestId, "supportRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetRequest struct {
	ctx context.Context
	ApiService *SupportRequestsAPIService
	supportRequestId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetRequest) Execute() (*SupportRequestAttachmentDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetExecute(r)
}

/*
ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGet Method for ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportRequestId
 @return ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetRequest
*/
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGet(ctx context.Context, supportRequestId string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetRequest {
	return ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetRequest{
		ApiService: a,
		ctx: ctx,
		supportRequestId: supportRequestId,
	}
}

// Execute executes the request
//  @return SupportRequestAttachmentDtoListEnvelope
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetExecute(r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGetRequest) (*SupportRequestAttachmentDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupportRequestAttachmentDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestsAPIService.ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequests/{supportRequestId}/Attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"supportRequestId"+"}", url.PathEscape(parameterValueToString(r.supportRequestId, "supportRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostRequest struct {
	ctx context.Context
	ApiService *SupportRequestsAPIService
	supportRequestId string
	supportRequestAttachmentCreateDto *SupportRequestAttachmentCreateDto
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostRequest) SupportRequestAttachmentCreateDto(supportRequestAttachmentCreateDto SupportRequestAttachmentCreateDto) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostRequest {
	r.supportRequestAttachmentCreateDto = &supportRequestAttachmentCreateDto
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostExecute(r)
}

/*
ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPost Method for ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportRequestId
 @return ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostRequest
*/
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPost(ctx context.Context, supportRequestId string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostRequest {
	return ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostRequest{
		ApiService: a,
		ctx: ctx,
		supportRequestId: supportRequestId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostExecute(r ApiApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestsAPIService.ApiV2SupportServiceSupportRequestsSupportRequestIdAttachmentsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequests/{supportRequestId}/Attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"supportRequestId"+"}", url.PathEscape(parameterValueToString(r.supportRequestId, "supportRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supportRequestAttachmentCreateDto == nil {
		return localVarReturnValue, nil, reportError("supportRequestAttachmentCreateDto is required and must be specified")
	}

	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.supportRequestAttachmentCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestsSupportRequestIdDeleteRequest struct {
	ctx context.Context
	ApiService *SupportRequestsAPIService
	supportRequestId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdDeleteRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestsSupportRequestIdDeleteExecute(r)
}

/*
ApiV2SupportServiceSupportRequestsSupportRequestIdDelete Method for ApiV2SupportServiceSupportRequestsSupportRequestIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportRequestId
 @return ApiApiV2SupportServiceSupportRequestsSupportRequestIdDeleteRequest
*/
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdDelete(ctx context.Context, supportRequestId string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdDeleteRequest {
	return ApiApiV2SupportServiceSupportRequestsSupportRequestIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		supportRequestId: supportRequestId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdDeleteExecute(r ApiApiV2SupportServiceSupportRequestsSupportRequestIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestsAPIService.ApiV2SupportServiceSupportRequestsSupportRequestIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequests/{supportRequestId}"
	localVarPath = strings.Replace(localVarPath, "{"+"supportRequestId"+"}", url.PathEscape(parameterValueToString(r.supportRequestId, "supportRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestsSupportRequestIdGetRequest struct {
	ctx context.Context
	ApiService *SupportRequestsAPIService
	supportRequestId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdGetRequest) Execute() (*SupportRequestDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestsSupportRequestIdGetExecute(r)
}

/*
ApiV2SupportServiceSupportRequestsSupportRequestIdGet Method for ApiV2SupportServiceSupportRequestsSupportRequestIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportRequestId
 @return ApiApiV2SupportServiceSupportRequestsSupportRequestIdGetRequest
*/
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdGet(ctx context.Context, supportRequestId string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdGetRequest {
	return ApiApiV2SupportServiceSupportRequestsSupportRequestIdGetRequest{
		ApiService: a,
		ctx: ctx,
		supportRequestId: supportRequestId,
	}
}

// Execute executes the request
//  @return SupportRequestDtoEnvelope
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdGetExecute(r ApiApiV2SupportServiceSupportRequestsSupportRequestIdGetRequest) (*SupportRequestDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupportRequestDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestsAPIService.ApiV2SupportServiceSupportRequestsSupportRequestIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequests/{supportRequestId}"
	localVarPath = strings.Replace(localVarPath, "{"+"supportRequestId"+"}", url.PathEscape(parameterValueToString(r.supportRequestId, "supportRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest struct {
	ctx context.Context
	ApiService *SupportRequestsAPIService
	supportRequestId string
	supportRequestUpdateDto *SupportRequestUpdateDto
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest) SupportRequestUpdateDto(supportRequestUpdateDto SupportRequestUpdateDto) ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest {
	r.supportRequestUpdateDto = &supportRequestUpdateDto
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestsSupportRequestIdPutExecute(r)
}

/*
ApiV2SupportServiceSupportRequestsSupportRequestIdPut Method for ApiV2SupportServiceSupportRequestsSupportRequestIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportRequestId
 @return ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest
*/
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdPut(ctx context.Context, supportRequestId string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest {
	return ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest{
		ApiService: a,
		ctx: ctx,
		supportRequestId: supportRequestId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdPutExecute(r ApiApiV2SupportServiceSupportRequestsSupportRequestIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestsAPIService.ApiV2SupportServiceSupportRequestsSupportRequestIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequests/{supportRequestId}"
	localVarPath = strings.Replace(localVarPath, "{"+"supportRequestId"+"}", url.PathEscape(parameterValueToString(r.supportRequestId, "supportRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.supportRequestUpdateDto == nil {
		return localVarReturnValue, nil, reportError("supportRequestUpdateDto is required and must be specified")
	}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.supportRequestUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetRequest struct {
	ctx context.Context
	ApiService *SupportRequestsAPIService
	supportRequestId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetRequest) TenantId(tenantId string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetRequest) ApiVersion(apiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetRequest) XApiVersion(xApiVersion string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetRequest) Execute() (*SupportTicketDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetExecute(r)
}

/*
ApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGet Method for ApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param supportRequestId
 @return ApiApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetRequest
*/
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGet(ctx context.Context, supportRequestId string) ApiApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetRequest {
	return ApiApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetRequest{
		ApiService: a,
		ctx: ctx,
		supportRequestId: supportRequestId,
	}
}

// Execute executes the request
//  @return SupportTicketDtoListEnvelope
func (a *SupportRequestsAPIService) ApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetExecute(r ApiApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGetRequest) (*SupportTicketDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SupportTicketDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SupportRequestsAPIService.ApiV2SupportServiceSupportRequestsSupportRequestIdTicketsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SupportService/SupportRequests/{supportRequestId}/Tickets"
	localVarPath = strings.Replace(localVarPath, "{"+"supportRequestId"+"}", url.PathEscape(parameterValueToString(r.supportRequestId, "supportRequestId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tenantId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	}
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
