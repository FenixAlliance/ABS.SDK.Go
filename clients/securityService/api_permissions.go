/*
SecurityService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PermissionsAPIService PermissionsAPI service
type PermissionsAPIService service

type ApiApiV2SecurityServicePermissionsGetRequest struct {
	ctx context.Context
	ApiService *PermissionsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServicePermissionsGetRequest) TenantId(tenantId string) ApiApiV2SecurityServicePermissionsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServicePermissionsGetRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServicePermissionsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsGetRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServicePermissionsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsGetRequest) Execute() (*SecurityRoleDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServicePermissionsGetExecute(r)
}

/*
ApiV2SecurityServicePermissionsGet Method for ApiV2SecurityServicePermissionsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SecurityServicePermissionsGetRequest
*/
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsGet(ctx context.Context) ApiApiV2SecurityServicePermissionsGetRequest {
	return ApiApiV2SecurityServicePermissionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecurityRoleDtoListEnvelope
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsGetExecute(r ApiApiV2SecurityServicePermissionsGetRequest) (*SecurityRoleDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityRoleDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsAPIService.ApiV2SecurityServicePermissionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Permissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServicePermissionsPostRequest struct {
	ctx context.Context
	ApiService *PermissionsAPIService
	tenantId *string
	securityPermissionCreateDto *SecurityPermissionCreateDto
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServicePermissionsPostRequest) TenantId(tenantId string) ApiApiV2SecurityServicePermissionsPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServicePermissionsPostRequest) SecurityPermissionCreateDto(securityPermissionCreateDto SecurityPermissionCreateDto) ApiApiV2SecurityServicePermissionsPostRequest {
	r.securityPermissionCreateDto = &securityPermissionCreateDto
	return r
}

func (r ApiApiV2SecurityServicePermissionsPostRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServicePermissionsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsPostRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServicePermissionsPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServicePermissionsPostExecute(r)
}

/*
ApiV2SecurityServicePermissionsPost Method for ApiV2SecurityServicePermissionsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SecurityServicePermissionsPostRequest
*/
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsPost(ctx context.Context) ApiApiV2SecurityServicePermissionsPostRequest {
	return ApiApiV2SecurityServicePermissionsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsPostExecute(r ApiApiV2SecurityServicePermissionsPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsAPIService.ApiV2SecurityServicePermissionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Permissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}
	if r.securityPermissionCreateDto == nil {
		return localVarReturnValue, nil, reportError("securityPermissionCreateDto is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.securityPermissionCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteRequest struct {
	ctx context.Context
	ApiService *PermissionsAPIService
	tenantId *string
	securityPermissionId string
	applicationId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteRequest) TenantId(tenantId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteExecute(r)
}

/*
ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDelete Method for ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityPermissionId
 @param applicationId
 @return ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteRequest
*/
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDelete(ctx context.Context, securityPermissionId string, applicationId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteRequest {
	return ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		securityPermissionId: securityPermissionId,
		applicationId: applicationId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteExecute(r ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsAPIService.ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Permissions/{securityPermissionId}/Applications/{applicationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityPermissionId"+"}", url.PathEscape(parameterValueToString(r.securityPermissionId, "securityPermissionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostRequest struct {
	ctx context.Context
	ApiService *PermissionsAPIService
	tenantId *string
	securityPermissionId string
	applicationId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostRequest) TenantId(tenantId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostExecute(r)
}

/*
ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPost Method for ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityPermissionId
 @param applicationId
 @return ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostRequest
*/
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPost(ctx context.Context, securityPermissionId string, applicationId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostRequest {
	return ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostRequest{
		ApiService: a,
		ctx: ctx,
		securityPermissionId: securityPermissionId,
		applicationId: applicationId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostExecute(r ApiApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsAPIService.ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Permissions/{securityPermissionId}/Applications/{applicationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityPermissionId"+"}", url.PathEscape(parameterValueToString(r.securityPermissionId, "securityPermissionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServicePermissionsSecurityPermissionIdDeleteRequest struct {
	ctx context.Context
	ApiService *PermissionsAPIService
	tenantId *string
	securityPermissionId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdDeleteRequest) TenantId(tenantId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServicePermissionsSecurityPermissionIdDeleteExecute(r)
}

/*
ApiV2SecurityServicePermissionsSecurityPermissionIdDelete Method for ApiV2SecurityServicePermissionsSecurityPermissionIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityPermissionId
 @return ApiApiV2SecurityServicePermissionsSecurityPermissionIdDeleteRequest
*/
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdDelete(ctx context.Context, securityPermissionId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdDeleteRequest {
	return ApiApiV2SecurityServicePermissionsSecurityPermissionIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		securityPermissionId: securityPermissionId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdDeleteExecute(r ApiApiV2SecurityServicePermissionsSecurityPermissionIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsAPIService.ApiV2SecurityServicePermissionsSecurityPermissionIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Permissions/{securityPermissionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityPermissionId"+"}", url.PathEscape(parameterValueToString(r.securityPermissionId, "securityPermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteRequest struct {
	ctx context.Context
	ApiService *PermissionsAPIService
	tenantId *string
	securityPermissionId string
	enrollmentId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteRequest) TenantId(tenantId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteExecute(r)
}

/*
ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDelete Method for ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityPermissionId
 @param enrollmentId
 @return ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteRequest
*/
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDelete(ctx context.Context, securityPermissionId string, enrollmentId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteRequest {
	return ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		securityPermissionId: securityPermissionId,
		enrollmentId: enrollmentId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteExecute(r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsAPIService.ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Permissions/{securityPermissionId}/Enrollments/{enrollmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityPermissionId"+"}", url.PathEscape(parameterValueToString(r.securityPermissionId, "securityPermissionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"enrollmentId"+"}", url.PathEscape(parameterValueToString(r.enrollmentId, "enrollmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostRequest struct {
	ctx context.Context
	ApiService *PermissionsAPIService
	tenantId *string
	securityPermissionId string
	enrollmentId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostRequest) TenantId(tenantId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostExecute(r)
}

/*
ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPost Method for ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityPermissionId
 @param enrollmentId
 @return ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostRequest
*/
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPost(ctx context.Context, securityPermissionId string, enrollmentId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostRequest {
	return ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostRequest{
		ApiService: a,
		ctx: ctx,
		securityPermissionId: securityPermissionId,
		enrollmentId: enrollmentId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostExecute(r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsAPIService.ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Permissions/{securityPermissionId}/Enrollments/{enrollmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityPermissionId"+"}", url.PathEscape(parameterValueToString(r.securityPermissionId, "securityPermissionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"enrollmentId"+"}", url.PathEscape(parameterValueToString(r.enrollmentId, "enrollmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetRequest struct {
	ctx context.Context
	ApiService *PermissionsAPIService
	tenantId *string
	securityPermissionId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetRequest) TenantId(tenantId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetRequest) Execute() (*TenantEnrolmentDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetExecute(r)
}

/*
ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGet Method for ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityPermissionId
 @return ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetRequest
*/
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGet(ctx context.Context, securityPermissionId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetRequest {
	return ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetRequest{
		ApiService: a,
		ctx: ctx,
		securityPermissionId: securityPermissionId,
	}
}

// Execute executes the request
//  @return TenantEnrolmentDtoListEnvelope
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetExecute(r ApiApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGetRequest) (*TenantEnrolmentDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TenantEnrolmentDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsAPIService.ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Permissions/{securityPermissionId}/Enrollments"
	localVarPath = strings.Replace(localVarPath, "{"+"securityPermissionId"+"}", url.PathEscape(parameterValueToString(r.securityPermissionId, "securityPermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServicePermissionsSecurityPermissionIdGetRequest struct {
	ctx context.Context
	ApiService *PermissionsAPIService
	tenantId *string
	securityPermissionId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdGetRequest) TenantId(tenantId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdGetRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdGetRequest) Execute() (*SecurityRoleDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServicePermissionsSecurityPermissionIdGetExecute(r)
}

/*
ApiV2SecurityServicePermissionsSecurityPermissionIdGet Method for ApiV2SecurityServicePermissionsSecurityPermissionIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityPermissionId
 @return ApiApiV2SecurityServicePermissionsSecurityPermissionIdGetRequest
*/
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdGet(ctx context.Context, securityPermissionId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdGetRequest {
	return ApiApiV2SecurityServicePermissionsSecurityPermissionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		securityPermissionId: securityPermissionId,
	}
}

// Execute executes the request
//  @return SecurityRoleDtoListEnvelope
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdGetExecute(r ApiApiV2SecurityServicePermissionsSecurityPermissionIdGetRequest) (*SecurityRoleDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityRoleDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsAPIService.ApiV2SecurityServicePermissionsSecurityPermissionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Permissions/{securityPermissionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityPermissionId"+"}", url.PathEscape(parameterValueToString(r.securityPermissionId, "securityPermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest struct {
	ctx context.Context
	ApiService *PermissionsAPIService
	tenantId *string
	securityPermissionId string
	securityPermissionUpdateDto *SecurityPermissionUpdateDto
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest) TenantId(tenantId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest) SecurityPermissionUpdateDto(securityPermissionUpdateDto SecurityPermissionUpdateDto) ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest {
	r.securityPermissionUpdateDto = &securityPermissionUpdateDto
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServicePermissionsSecurityPermissionIdPutExecute(r)
}

/*
ApiV2SecurityServicePermissionsSecurityPermissionIdPut Method for ApiV2SecurityServicePermissionsSecurityPermissionIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityPermissionId
 @return ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest
*/
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdPut(ctx context.Context, securityPermissionId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest {
	return ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest{
		ApiService: a,
		ctx: ctx,
		securityPermissionId: securityPermissionId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdPutExecute(r ApiApiV2SecurityServicePermissionsSecurityPermissionIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsAPIService.ApiV2SecurityServicePermissionsSecurityPermissionIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Permissions/{securityPermissionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityPermissionId"+"}", url.PathEscape(parameterValueToString(r.securityPermissionId, "securityPermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}
	if r.securityPermissionUpdateDto == nil {
		return localVarReturnValue, nil, reportError("securityPermissionUpdateDto is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.securityPermissionUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteRequest struct {
	ctx context.Context
	ApiService *PermissionsAPIService
	tenantId *string
	securityPermissionId string
	securityRoleId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteRequest) TenantId(tenantId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteExecute(r)
}

/*
ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDelete Method for ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityPermissionId
 @param securityRoleId
 @return ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteRequest
*/
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDelete(ctx context.Context, securityPermissionId string, securityRoleId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteRequest {
	return ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		securityPermissionId: securityPermissionId,
		securityRoleId: securityRoleId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteExecute(r ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsAPIService.ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Permissions/{securityPermissionId}/Roles/{securityRoleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityPermissionId"+"}", url.PathEscape(parameterValueToString(r.securityPermissionId, "securityPermissionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"securityRoleId"+"}", url.PathEscape(parameterValueToString(r.securityRoleId, "securityRoleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostRequest struct {
	ctx context.Context
	ApiService *PermissionsAPIService
	tenantId *string
	securityPermissionId string
	securityRoleId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostRequest) TenantId(tenantId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostExecute(r)
}

/*
ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPost Method for ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityPermissionId
 @param securityRoleId
 @return ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostRequest
*/
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPost(ctx context.Context, securityPermissionId string, securityRoleId string) ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostRequest {
	return ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostRequest{
		ApiService: a,
		ctx: ctx,
		securityPermissionId: securityPermissionId,
		securityRoleId: securityRoleId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *PermissionsAPIService) ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostExecute(r ApiApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PermissionsAPIService.ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Permissions/{securityPermissionId}/Roles/{securityRoleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityPermissionId"+"}", url.PathEscape(parameterValueToString(r.securityPermissionId, "securityPermissionId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"securityRoleId"+"}", url.PathEscape(parameterValueToString(r.securityRoleId, "securityRoleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
