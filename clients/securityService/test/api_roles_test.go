/*
SecurityService

Testing RolesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_RolesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RolesAPIService ApiV2SecurityServiceRolesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RolesAPI.ApiV2SecurityServiceRolesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService ApiV2SecurityServiceRolesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RolesAPI.ApiV2SecurityServiceRolesPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityRoleId string
		var applicationId string

		resp, httpRes, err := apiClient.RolesAPI.ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete(context.Background(), securityRoleId, applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityRoleId string
		var applicationId string

		resp, httpRes, err := apiClient.RolesAPI.ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost(context.Background(), securityRoleId, applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService ApiV2SecurityServiceRolesSecurityRoleIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityRoleId string

		resp, httpRes, err := apiClient.RolesAPI.ApiV2SecurityServiceRolesSecurityRoleIdDelete(context.Background(), securityRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityRoleId string
		var enrollmentId string

		resp, httpRes, err := apiClient.RolesAPI.ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete(context.Background(), securityRoleId, enrollmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityRoleId string
		var enrollmentId string

		resp, httpRes, err := apiClient.RolesAPI.ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost(context.Background(), securityRoleId, enrollmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityRoleId string

		resp, httpRes, err := apiClient.RolesAPI.ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet(context.Background(), securityRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService ApiV2SecurityServiceRolesSecurityRoleIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityRoleId string

		resp, httpRes, err := apiClient.RolesAPI.ApiV2SecurityServiceRolesSecurityRoleIdGet(context.Background(), securityRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService ApiV2SecurityServiceRolesSecurityRoleIdPermissionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityRoleId string

		resp, httpRes, err := apiClient.RolesAPI.ApiV2SecurityServiceRolesSecurityRoleIdPermissionsGet(context.Background(), securityRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityRoleId string
		var securityPermissionId string

		resp, httpRes, err := apiClient.RolesAPI.ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete(context.Background(), securityRoleId, securityPermissionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityRoleId string
		var securityPermissionId string

		resp, httpRes, err := apiClient.RolesAPI.ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost(context.Background(), securityRoleId, securityPermissionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RolesAPIService ApiV2SecurityServiceRolesSecurityRoleIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityRoleId string

		resp, httpRes, err := apiClient.RolesAPI.ApiV2SecurityServiceRolesSecurityRoleIdPut(context.Background(), securityRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
