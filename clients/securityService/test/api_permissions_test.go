/*
SecurityService

Testing PermissionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_PermissionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PermissionsAPIService ApiV2SecurityServicePermissionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PermissionsAPI.ApiV2SecurityServicePermissionsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionsAPIService ApiV2SecurityServicePermissionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PermissionsAPI.ApiV2SecurityServicePermissionsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionsAPIService ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityPermissionId string
		var applicationId string

		resp, httpRes, err := apiClient.PermissionsAPI.ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdDelete(context.Background(), securityPermissionId, applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionsAPIService ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityPermissionId string
		var applicationId string

		resp, httpRes, err := apiClient.PermissionsAPI.ApiV2SecurityServicePermissionsSecurityPermissionIdApplicationsApplicationIdPost(context.Background(), securityPermissionId, applicationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionsAPIService ApiV2SecurityServicePermissionsSecurityPermissionIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityPermissionId string

		resp, httpRes, err := apiClient.PermissionsAPI.ApiV2SecurityServicePermissionsSecurityPermissionIdDelete(context.Background(), securityPermissionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionsAPIService ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityPermissionId string
		var enrollmentId string

		resp, httpRes, err := apiClient.PermissionsAPI.ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdDelete(context.Background(), securityPermissionId, enrollmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionsAPIService ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityPermissionId string
		var enrollmentId string

		resp, httpRes, err := apiClient.PermissionsAPI.ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsEnrollmentIdPost(context.Background(), securityPermissionId, enrollmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionsAPIService ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityPermissionId string

		resp, httpRes, err := apiClient.PermissionsAPI.ApiV2SecurityServicePermissionsSecurityPermissionIdEnrollmentsGet(context.Background(), securityPermissionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionsAPIService ApiV2SecurityServicePermissionsSecurityPermissionIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityPermissionId string

		resp, httpRes, err := apiClient.PermissionsAPI.ApiV2SecurityServicePermissionsSecurityPermissionIdGet(context.Background(), securityPermissionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionsAPIService ApiV2SecurityServicePermissionsSecurityPermissionIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityPermissionId string

		resp, httpRes, err := apiClient.PermissionsAPI.ApiV2SecurityServicePermissionsSecurityPermissionIdPut(context.Background(), securityPermissionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionsAPIService ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityPermissionId string
		var securityRoleId string

		resp, httpRes, err := apiClient.PermissionsAPI.ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdDelete(context.Background(), securityPermissionId, securityRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PermissionsAPIService ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var securityPermissionId string
		var securityRoleId string

		resp, httpRes, err := apiClient.PermissionsAPI.ApiV2SecurityServicePermissionsSecurityPermissionIdRolesSecurityRoleIdPost(context.Background(), securityPermissionId, securityRoleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
