/*
SecurityService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RolesAPIService RolesAPI service
type RolesAPIService service

type ApiApiV2SecurityServiceRolesGetRequest struct {
	ctx context.Context
	ApiService *RolesAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServiceRolesGetRequest) TenantId(tenantId string) ApiApiV2SecurityServiceRolesGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServiceRolesGetRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServiceRolesGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesGetRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServiceRolesGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesGetRequest) Execute() (*SecurityRoleDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServiceRolesGetExecute(r)
}

/*
ApiV2SecurityServiceRolesGet Method for ApiV2SecurityServiceRolesGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SecurityServiceRolesGetRequest
*/
func (a *RolesAPIService) ApiV2SecurityServiceRolesGet(ctx context.Context) ApiApiV2SecurityServiceRolesGetRequest {
	return ApiApiV2SecurityServiceRolesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecurityRoleDtoListEnvelope
func (a *RolesAPIService) ApiV2SecurityServiceRolesGetExecute(r ApiApiV2SecurityServiceRolesGetRequest) (*SecurityRoleDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityRoleDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesAPIService.ApiV2SecurityServiceRolesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Roles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServiceRolesPostRequest struct {
	ctx context.Context
	ApiService *RolesAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
	securityRoleCreateDto *SecurityRoleCreateDto
}

func (r ApiApiV2SecurityServiceRolesPostRequest) TenantId(tenantId string) ApiApiV2SecurityServiceRolesPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServiceRolesPostRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServiceRolesPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesPostRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServiceRolesPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesPostRequest) SecurityRoleCreateDto(securityRoleCreateDto SecurityRoleCreateDto) ApiApiV2SecurityServiceRolesPostRequest {
	r.securityRoleCreateDto = &securityRoleCreateDto
	return r
}

func (r ApiApiV2SecurityServiceRolesPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServiceRolesPostExecute(r)
}

/*
ApiV2SecurityServiceRolesPost Method for ApiV2SecurityServiceRolesPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2SecurityServiceRolesPostRequest
*/
func (a *RolesAPIService) ApiV2SecurityServiceRolesPost(ctx context.Context) ApiApiV2SecurityServiceRolesPostRequest {
	return ApiApiV2SecurityServiceRolesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *RolesAPIService) ApiV2SecurityServiceRolesPostExecute(r ApiApiV2SecurityServiceRolesPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesAPIService.ApiV2SecurityServiceRolesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Roles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.securityRoleCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest struct {
	ctx context.Context
	ApiService *RolesAPIService
	tenantId *string
	securityRoleId string
	applicationId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest) TenantId(tenantId string) ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteExecute(r)
}

/*
ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete Method for ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityRoleId
 @param applicationId
 @return ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest
*/
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete(ctx context.Context, securityRoleId string, applicationId string) ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest {
	return ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		securityRoleId: securityRoleId,
		applicationId: applicationId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteExecute(r ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesAPIService.ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Roles/{securityRoleId}/Applications/{applicationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityRoleId"+"}", url.PathEscape(parameterValueToString(r.securityRoleId, "securityRoleId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest struct {
	ctx context.Context
	ApiService *RolesAPIService
	tenantId *string
	securityRoleId string
	applicationId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest) TenantId(tenantId string) ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostExecute(r)
}

/*
ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost Method for ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityRoleId
 @param applicationId
 @return ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest
*/
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost(ctx context.Context, securityRoleId string, applicationId string) ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest {
	return ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest{
		ApiService: a,
		ctx: ctx,
		securityRoleId: securityRoleId,
		applicationId: applicationId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostExecute(r ApiApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesAPIService.ApiV2SecurityServiceRolesSecurityRoleIdApplicationsApplicationIdPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Roles/{securityRoleId}/Applications/{applicationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityRoleId"+"}", url.PathEscape(parameterValueToString(r.securityRoleId, "securityRoleId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"applicationId"+"}", url.PathEscape(parameterValueToString(r.applicationId, "applicationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServiceRolesSecurityRoleIdDeleteRequest struct {
	ctx context.Context
	ApiService *RolesAPIService
	tenantId *string
	securityRoleId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdDeleteRequest) TenantId(tenantId string) ApiApiV2SecurityServiceRolesSecurityRoleIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServiceRolesSecurityRoleIdDeleteExecute(r)
}

/*
ApiV2SecurityServiceRolesSecurityRoleIdDelete Method for ApiV2SecurityServiceRolesSecurityRoleIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityRoleId
 @return ApiApiV2SecurityServiceRolesSecurityRoleIdDeleteRequest
*/
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdDelete(ctx context.Context, securityRoleId string) ApiApiV2SecurityServiceRolesSecurityRoleIdDeleteRequest {
	return ApiApiV2SecurityServiceRolesSecurityRoleIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		securityRoleId: securityRoleId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdDeleteExecute(r ApiApiV2SecurityServiceRolesSecurityRoleIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesAPIService.ApiV2SecurityServiceRolesSecurityRoleIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Roles/{securityRoleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityRoleId"+"}", url.PathEscape(parameterValueToString(r.securityRoleId, "securityRoleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest struct {
	ctx context.Context
	ApiService *RolesAPIService
	tenantId *string
	securityRoleId string
	enrollmentId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest) TenantId(tenantId string) ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteExecute(r)
}

/*
ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete Method for ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityRoleId
 @param enrollmentId
 @return ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest
*/
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete(ctx context.Context, securityRoleId string, enrollmentId string) ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest {
	return ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		securityRoleId: securityRoleId,
		enrollmentId: enrollmentId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteExecute(r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesAPIService.ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Roles/{securityRoleId}/Enrollments/{enrollmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityRoleId"+"}", url.PathEscape(parameterValueToString(r.securityRoleId, "securityRoleId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"enrollmentId"+"}", url.PathEscape(parameterValueToString(r.enrollmentId, "enrollmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest struct {
	ctx context.Context
	ApiService *RolesAPIService
	tenantId *string
	securityRoleId string
	enrollmentId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest) TenantId(tenantId string) ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostExecute(r)
}

/*
ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost Method for ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityRoleId
 @param enrollmentId
 @return ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest
*/
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost(ctx context.Context, securityRoleId string, enrollmentId string) ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest {
	return ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest{
		ApiService: a,
		ctx: ctx,
		securityRoleId: securityRoleId,
		enrollmentId: enrollmentId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostExecute(r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesAPIService.ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsEnrollmentIdPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Roles/{securityRoleId}/Enrollments/{enrollmentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityRoleId"+"}", url.PathEscape(parameterValueToString(r.securityRoleId, "securityRoleId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"enrollmentId"+"}", url.PathEscape(parameterValueToString(r.enrollmentId, "enrollmentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest struct {
	ctx context.Context
	ApiService *RolesAPIService
	tenantId *string
	securityRoleId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest) TenantId(tenantId string) ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest) Execute() (*TenantEnrolmentDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetExecute(r)
}

/*
ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet Method for ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityRoleId
 @return ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest
*/
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet(ctx context.Context, securityRoleId string) ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest {
	return ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest{
		ApiService: a,
		ctx: ctx,
		securityRoleId: securityRoleId,
	}
}

// Execute executes the request
//  @return TenantEnrolmentDtoListEnvelope
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetExecute(r ApiApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGetRequest) (*TenantEnrolmentDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TenantEnrolmentDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesAPIService.ApiV2SecurityServiceRolesSecurityRoleIdEnrollmentsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Roles/{securityRoleId}/Enrollments"
	localVarPath = strings.Replace(localVarPath, "{"+"securityRoleId"+"}", url.PathEscape(parameterValueToString(r.securityRoleId, "securityRoleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServiceRolesSecurityRoleIdGetRequest struct {
	ctx context.Context
	ApiService *RolesAPIService
	tenantId *string
	securityRoleId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdGetRequest) TenantId(tenantId string) ApiApiV2SecurityServiceRolesSecurityRoleIdGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdGetRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdGetRequest) Execute() (*SecurityRoleDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServiceRolesSecurityRoleIdGetExecute(r)
}

/*
ApiV2SecurityServiceRolesSecurityRoleIdGet Method for ApiV2SecurityServiceRolesSecurityRoleIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityRoleId
 @return ApiApiV2SecurityServiceRolesSecurityRoleIdGetRequest
*/
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdGet(ctx context.Context, securityRoleId string) ApiApiV2SecurityServiceRolesSecurityRoleIdGetRequest {
	return ApiApiV2SecurityServiceRolesSecurityRoleIdGetRequest{
		ApiService: a,
		ctx: ctx,
		securityRoleId: securityRoleId,
	}
}

// Execute executes the request
//  @return SecurityRoleDtoListEnvelope
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdGetExecute(r ApiApiV2SecurityServiceRolesSecurityRoleIdGetRequest) (*SecurityRoleDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityRoleDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesAPIService.ApiV2SecurityServiceRolesSecurityRoleIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Roles/{securityRoleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityRoleId"+"}", url.PathEscape(parameterValueToString(r.securityRoleId, "securityRoleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest struct {
	ctx context.Context
	ApiService *RolesAPIService
	tenantId *string
	securityRoleId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest) TenantId(tenantId string) ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest) Execute() (*SecurityPermissionDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetExecute(r)
}

/*
ApiV2SecurityServiceRolesSecurityRoleIdPermissionsGet Method for ApiV2SecurityServiceRolesSecurityRoleIdPermissionsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityRoleId
 @return ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest
*/
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdPermissionsGet(ctx context.Context, securityRoleId string) ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest {
	return ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest{
		ApiService: a,
		ctx: ctx,
		securityRoleId: securityRoleId,
	}
}

// Execute executes the request
//  @return SecurityPermissionDtoListEnvelope
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetExecute(r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsGetRequest) (*SecurityPermissionDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityPermissionDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesAPIService.ApiV2SecurityServiceRolesSecurityRoleIdPermissionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Roles/{securityRoleId}/Permissions"
	localVarPath = strings.Replace(localVarPath, "{"+"securityRoleId"+"}", url.PathEscape(parameterValueToString(r.securityRoleId, "securityRoleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest struct {
	ctx context.Context
	ApiService *RolesAPIService
	tenantId *string
	securityRoleId string
	securityPermissionId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest) TenantId(tenantId string) ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteExecute(r)
}

/*
ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete Method for ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityRoleId
 @param securityPermissionId
 @return ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest
*/
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete(ctx context.Context, securityRoleId string, securityPermissionId string) ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest {
	return ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		securityRoleId: securityRoleId,
		securityPermissionId: securityPermissionId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteExecute(r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDeleteRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesAPIService.ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Roles/{securityRoleId}/Permissions/{securityPermissionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityRoleId"+"}", url.PathEscape(parameterValueToString(r.securityRoleId, "securityRoleId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"securityPermissionId"+"}", url.PathEscape(parameterValueToString(r.securityPermissionId, "securityPermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest struct {
	ctx context.Context
	ApiService *RolesAPIService
	tenantId *string
	securityRoleId string
	securityPermissionId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest) TenantId(tenantId string) ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostExecute(r)
}

/*
ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost Method for ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityRoleId
 @param securityPermissionId
 @return ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest
*/
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost(ctx context.Context, securityRoleId string, securityPermissionId string) ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest {
	return ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest{
		ApiService: a,
		ctx: ctx,
		securityRoleId: securityRoleId,
		securityPermissionId: securityPermissionId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostExecute(r ApiApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPostRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesAPIService.ApiV2SecurityServiceRolesSecurityRoleIdPermissionsSecurityPermissionIdPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Roles/{securityRoleId}/Permissions/{securityPermissionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityRoleId"+"}", url.PathEscape(parameterValueToString(r.securityRoleId, "securityRoleId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"securityPermissionId"+"}", url.PathEscape(parameterValueToString(r.securityPermissionId, "securityPermissionId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest struct {
	ctx context.Context
	ApiService *RolesAPIService
	tenantId *string
	securityRoleId string
	apiVersion *string
	xApiVersion *string
	securityRoleUpdateDto *SecurityRoleUpdateDto
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest) TenantId(tenantId string) ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest) ApiVersion(apiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest) SecurityRoleUpdateDto(securityRoleUpdateDto SecurityRoleUpdateDto) ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest {
	r.securityRoleUpdateDto = &securityRoleUpdateDto
	return r
}

func (r ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest) Execute() (*EmptyEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2SecurityServiceRolesSecurityRoleIdPutExecute(r)
}

/*
ApiV2SecurityServiceRolesSecurityRoleIdPut Method for ApiV2SecurityServiceRolesSecurityRoleIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param securityRoleId
 @return ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest
*/
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdPut(ctx context.Context, securityRoleId string) ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest {
	return ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest{
		ApiService: a,
		ctx: ctx,
		securityRoleId: securityRoleId,
	}
}

// Execute executes the request
//  @return EmptyEnvelope
func (a *RolesAPIService) ApiV2SecurityServiceRolesSecurityRoleIdPutExecute(r ApiApiV2SecurityServiceRolesSecurityRoleIdPutRequest) (*EmptyEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmptyEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RolesAPIService.ApiV2SecurityServiceRolesSecurityRoleIdPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/SecurityService/Roles/{securityRoleId}"
	localVarPath = strings.Replace(localVarPath, "{"+"securityRoleId"+"}", url.PathEscape(parameterValueToString(r.securityRoleId, "securityRoleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.securityRoleUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
