/*
CrmService

Testing ContactsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ContactsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ContactsAPIService CreateContactAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.CreateContactAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService DeleteContactAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.DeleteContactAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetBusinessOwnedIndividualAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.GetBusinessOwnedIndividualAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetBusinessOwnedIndividualsAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.GetBusinessOwnedIndividualsAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetBusinessOwnedIndividualsCountAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.GetBusinessOwnedIndividualsCountAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetBusinessOwnedOrganizationAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.GetBusinessOwnedOrganizationAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetBusinessOwnedOrganizationsAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.GetBusinessOwnedOrganizationsAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetBusinessOwnedOrganizationsCountAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.GetBusinessOwnedOrganizationsCountAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetContactAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.GetContactAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetContactAvatarAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.GetContactAvatarAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetContactCartAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.GetContactCartAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetContactProfilesAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.GetContactProfilesAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetContactSocialProfileAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.GetContactSocialProfileAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetContactWalletAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.GetContactWalletAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetContactsAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.GetContactsAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetContactsCountAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.GetContactsCountAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetExtendedBusinessOwnedIndividualsAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.GetExtendedBusinessOwnedIndividualsAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetExtendedBusinessOwnedOrganizationsAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.GetExtendedBusinessOwnedOrganizationsAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetExtendedContactAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.GetExtendedContactAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetExtendedContactsAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.GetExtendedContactsAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetIndividualRelatedIndividualsAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.GetIndividualRelatedIndividualsAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetIndividualRelatedOrganizationsAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.GetIndividualRelatedOrganizationsAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetOrganizationRelatedIndividualsAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.GetOrganizationRelatedIndividualsAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService GetOrganizationRelatedOrganizationsAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.GetOrganizationRelatedOrganizationsAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService PatchContactAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.PatchContactAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService UpdateContactAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.UpdateContactAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService UpdateContactAvatarAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var contactId string

		resp, httpRes, err := apiClient.ContactsAPI.UpdateContactAvatarAsync(context.Background(), contactId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService UpsertTenantOntoAnotherTenantContactListAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.UpsertTenantOntoAnotherTenantContactListAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ContactsAPIService UpsertUserOntoAnotherTenantContactListAsync", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ContactsAPI.UpsertUserOntoAnotherTenantContactListAsync(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
