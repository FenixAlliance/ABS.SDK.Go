/*
TimeTrackerService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProjectTimeLogsAPIService ProjectTimeLogsAPI service
type ProjectTimeLogsAPIService service

type ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest struct {
	ctx context.Context
	ApiService *ProjectTimeLogsAPIService
	contactId *string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest) ContactId(contactId string) ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest {
	r.contactId = &contactId
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest) TenantId(tenantId string) ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest) ApiVersion(apiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest) XApiVersion(xApiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest) Execute() (*ProjectTimeLogDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetExecute(r)
}

/*
ApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGet Method for ApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest
*/
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGet(ctx context.Context) ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest {
	return ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProjectTimeLogDtoListEnvelope
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetExecute(r ApiApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGetRequest) (*ProjectTimeLogDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTimeLogDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTimeLogsAPIService.ApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/TimeTrackerService/ProjectTimeLogs/ByResponsibleContact"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contactId == nil {
		return localVarReturnValue, nil, reportError("contactId is required and must be specified")
	}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "contactId", r.contactId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest struct {
	ctx context.Context
	ApiService *ProjectTimeLogsAPIService
	contactId *string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest) ContactId(contactId string) ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest {
	r.contactId = &contactId
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest) TenantId(tenantId string) ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest) ApiVersion(apiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest) XApiVersion(xApiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest) Execute() (*ProjectTimeLogDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetExecute(r)
}

/*
ApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGet Method for ApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest
*/
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGet(ctx context.Context) ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest {
	return ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProjectTimeLogDtoListEnvelope
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetExecute(r ApiApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGetRequest) (*ProjectTimeLogDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTimeLogDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTimeLogsAPIService.ApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/TimeTrackerService/ProjectTimeLogs/CreatedByContact"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contactId == nil {
		return localVarReturnValue, nil, reportError("contactId is required and must be specified")
	}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "contactId", r.contactId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetRequest struct {
	ctx context.Context
	ApiService *ProjectTimeLogsAPIService
	projectId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetRequest) TenantId(tenantId string) ApiApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetRequest) ApiVersion(apiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetRequest) Execute() (*ProjectTimeLogDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetExecute(r)
}

/*
ApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGet Method for ApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId
 @return ApiApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetRequest
*/
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGet(ctx context.Context, projectId string) ApiApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetRequest {
	return ApiApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
//  @return ProjectTimeLogDtoListEnvelope
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetExecute(r ApiApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGetRequest) (*ProjectTimeLogDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTimeLogDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTimeLogsAPIService.ApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/TimeTrackerService/ProjectTimeLogs/ForProject/{projectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest struct {
	ctx context.Context
	ApiService *ProjectTimeLogsAPIService
	tenantId *string
	projectPeriodId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest) TenantId(tenantId string) ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest) ProjectPeriodId(projectPeriodId string) ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest {
	r.projectPeriodId = &projectPeriodId
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest) ApiVersion(apiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest) XApiVersion(xApiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest) Execute() (*ProjectTimeLogDtoListEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2TimeTrackerServiceProjectTimeLogsGetExecute(r)
}

/*
ApiV2TimeTrackerServiceProjectTimeLogsGet Method for ApiV2TimeTrackerServiceProjectTimeLogsGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest
*/
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsGet(ctx context.Context) ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest {
	return ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProjectTimeLogDtoListEnvelope
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsGetExecute(r ApiApiV2TimeTrackerServiceProjectTimeLogsGetRequest) (*ProjectTimeLogDtoListEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTimeLogDtoListEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTimeLogsAPIService.ApiV2TimeTrackerServiceProjectTimeLogsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/TimeTrackerService/ProjectTimeLogs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}
	if r.projectPeriodId == nil {
		return localVarReturnValue, nil, reportError("projectPeriodId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "projectPeriodId", r.projectPeriodId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest struct {
	ctx context.Context
	ApiService *ProjectTimeLogsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
	projectTimeLogCreateDto *ProjectTimeLogCreateDto
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest) TenantId(tenantId string) ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest) ApiVersion(apiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest) XApiVersion(xApiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest) ProjectTimeLogCreateDto(projectTimeLogCreateDto ProjectTimeLogCreateDto) ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest {
	r.projectTimeLogCreateDto = &projectTimeLogCreateDto
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV2TimeTrackerServiceProjectTimeLogsPostExecute(r)
}

/*
ApiV2TimeTrackerServiceProjectTimeLogsPost Method for ApiV2TimeTrackerServiceProjectTimeLogsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest
*/
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsPost(ctx context.Context) ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest {
	return ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsPostExecute(r ApiApiV2TimeTrackerServiceProjectTimeLogsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTimeLogsAPIService.ApiV2TimeTrackerServiceProjectTimeLogsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/TimeTrackerService/ProjectTimeLogs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.projectTimeLogCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteRequest struct {
	ctx context.Context
	ApiService *ProjectTimeLogsAPIService
	tenantId *string
	timeLogId string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteRequest) TenantId(tenantId string) ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteRequest) ApiVersion(apiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteRequest) XApiVersion(xApiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteExecute(r)
}

/*
ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDelete Method for ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDelete

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param timeLogId
 @return ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteRequest
*/
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDelete(ctx context.Context, timeLogId string) ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteRequest {
	return ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		timeLogId: timeLogId,
	}
}

// Execute executes the request
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteExecute(r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTimeLogsAPIService.ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/TimeTrackerService/ProjectTimeLogs/{timeLogId}"
	localVarPath = strings.Replace(localVarPath, "{"+"timeLogId"+"}", url.PathEscape(parameterValueToString(r.timeLogId, "timeLogId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetRequest struct {
	ctx context.Context
	ApiService *ProjectTimeLogsAPIService
	timeLogId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetRequest) TenantId(tenantId string) ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetRequest) ApiVersion(apiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetRequest) XApiVersion(xApiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetRequest) Execute() (*ProjectTimeLogDtoEnvelope, *http.Response, error) {
	return r.ApiService.ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetExecute(r)
}

/*
ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGet Method for ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGet

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param timeLogId
 @return ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetRequest
*/
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGet(ctx context.Context, timeLogId string) ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetRequest {
	return ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetRequest{
		ApiService: a,
		ctx: ctx,
		timeLogId: timeLogId,
	}
}

// Execute executes the request
//  @return ProjectTimeLogDtoEnvelope
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetExecute(r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGetRequest) (*ProjectTimeLogDtoEnvelope, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTimeLogDtoEnvelope
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTimeLogsAPIService.ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/TimeTrackerService/ProjectTimeLogs/{timeLogId}"
	localVarPath = strings.Replace(localVarPath, "{"+"timeLogId"+"}", url.PathEscape(parameterValueToString(r.timeLogId, "timeLogId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return localVarReturnValue, nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest struct {
	ctx context.Context
	ApiService *ProjectTimeLogsAPIService
	timeLogId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
	projectTimeLogUpdateDto *ProjectTimeLogUpdateDto
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest) TenantId(tenantId string) ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest) ApiVersion(apiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest) XApiVersion(xApiVersion string) ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest) ProjectTimeLogUpdateDto(projectTimeLogUpdateDto ProjectTimeLogUpdateDto) ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest {
	r.projectTimeLogUpdateDto = &projectTimeLogUpdateDto
	return r
}

func (r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutExecute(r)
}

/*
ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPut Method for ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param timeLogId
 @return ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest
*/
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPut(ctx context.Context, timeLogId string) ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest {
	return ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest{
		ApiService: a,
		ctx: ctx,
		timeLogId: timeLogId,
	}
}

// Execute executes the request
func (a *ProjectTimeLogsAPIService) ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutExecute(r ApiApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTimeLogsAPIService.ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/TimeTrackerService/ProjectTimeLogs/{timeLogId}"
	localVarPath = strings.Replace(localVarPath, "{"+"timeLogId"+"}", url.PathEscape(parameterValueToString(r.timeLogId, "timeLogId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.projectTimeLogUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
