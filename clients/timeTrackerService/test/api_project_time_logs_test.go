/*
TimeTrackerService

Testing ProjectTimeLogsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ProjectTimeLogsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProjectTimeLogsAPIService ApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectTimeLogsAPI.ApiV2TimeTrackerServiceProjectTimeLogsByResponsibleContactGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectTimeLogsAPIService ApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectTimeLogsAPI.ApiV2TimeTrackerServiceProjectTimeLogsCreatedByContactGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectTimeLogsAPIService ApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.ProjectTimeLogsAPI.ApiV2TimeTrackerServiceProjectTimeLogsForProjectProjectIdGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectTimeLogsAPIService ApiV2TimeTrackerServiceProjectTimeLogsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProjectTimeLogsAPI.ApiV2TimeTrackerServiceProjectTimeLogsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectTimeLogsAPIService ApiV2TimeTrackerServiceProjectTimeLogsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ProjectTimeLogsAPI.ApiV2TimeTrackerServiceProjectTimeLogsPost(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectTimeLogsAPIService ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var timeLogId string

		httpRes, err := apiClient.ProjectTimeLogsAPI.ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdDelete(context.Background(), timeLogId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectTimeLogsAPIService ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var timeLogId string

		resp, httpRes, err := apiClient.ProjectTimeLogsAPI.ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdGet(context.Background(), timeLogId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectTimeLogsAPIService ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var timeLogId string

		httpRes, err := apiClient.ProjectTimeLogsAPI.ApiV2TimeTrackerServiceProjectTimeLogsTimeLogIdPut(context.Background(), timeLogId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
