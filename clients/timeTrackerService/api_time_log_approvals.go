/*
TimeTrackerService

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.1.4089
Contact: support@fenix-alliance.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TimeLogApprovalsAPIService TimeLogApprovalsAPI service
type TimeLogApprovalsAPIService service

type ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest struct {
	ctx context.Context
	ApiService *TimeLogApprovalsAPIService
	approvalId string
	tenantId *string
	apiVersion *string
	xApiVersion *string
	projectHoursApprovalApproverUpdateDto *ProjectHoursApprovalApproverUpdateDto
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest) TenantId(tenantId string) ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest) ApiVersion(apiVersion string) ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest) XApiVersion(xApiVersion string) ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest) ProjectHoursApprovalApproverUpdateDto(projectHoursApprovalApproverUpdateDto ProjectHoursApprovalApproverUpdateDto) ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest {
	r.projectHoursApprovalApproverUpdateDto = &projectHoursApprovalApproverUpdateDto
	return r
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutExecute(r)
}

/*
ApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPut Method for ApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param approvalId
 @return ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest
*/
func (a *TimeLogApprovalsAPIService) ApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPut(ctx context.Context, approvalId string) ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest {
	return ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest{
		ApiService: a,
		ctx: ctx,
		approvalId: approvalId,
	}
}

// Execute executes the request
func (a *TimeLogApprovalsAPIService) ApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutExecute(r ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeLogApprovalsAPIService.ApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdApproverPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/TimeTrackerService/TimeLogApprovals/{approvalId}/Approver"
	localVarPath = strings.Replace(localVarPath, "{"+"approvalId"+"}", url.PathEscape(parameterValueToString(r.approvalId, "approvalId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.projectHoursApprovalApproverUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest struct {
	ctx context.Context
	ApiService *TimeLogApprovalsAPIService
	tenantId *string
	approvalId string
	apiVersion *string
	xApiVersion *string
	projectHoursApprovalStatusUpdateDto *ProjectHoursApprovalStatusUpdateDto
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest) TenantId(tenantId string) ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest) ApiVersion(apiVersion string) ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest) XApiVersion(xApiVersion string) ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest) ProjectHoursApprovalStatusUpdateDto(projectHoursApprovalStatusUpdateDto ProjectHoursApprovalStatusUpdateDto) ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest {
	r.projectHoursApprovalStatusUpdateDto = &projectHoursApprovalStatusUpdateDto
	return r
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutExecute(r)
}

/*
ApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPut Method for ApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPut

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param approvalId
 @return ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest
*/
func (a *TimeLogApprovalsAPIService) ApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPut(ctx context.Context, approvalId string) ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest {
	return ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest{
		ApiService: a,
		ctx: ctx,
		approvalId: approvalId,
	}
}

// Execute executes the request
func (a *TimeLogApprovalsAPIService) ApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutExecute(r ApiApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeLogApprovalsAPIService.ApiV2TimeTrackerServiceTimeLogApprovalsApprovalIdStatusPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/TimeTrackerService/TimeLogApprovals/{approvalId}/Status"
	localVarPath = strings.Replace(localVarPath, "{"+"approvalId"+"}", url.PathEscape(parameterValueToString(r.approvalId, "approvalId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.projectHoursApprovalStatusUpdateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest struct {
	ctx context.Context
	ApiService *TimeLogApprovalsAPIService
	tenantId *string
	apiVersion *string
	xApiVersion *string
	projectHoursApprovalCreateDto *ProjectHoursApprovalCreateDto
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest) TenantId(tenantId string) ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest) ApiVersion(apiVersion string) ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest {
	r.apiVersion = &apiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest) XApiVersion(xApiVersion string) ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest {
	r.xApiVersion = &xApiVersion
	return r
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest) ProjectHoursApprovalCreateDto(projectHoursApprovalCreateDto ProjectHoursApprovalCreateDto) ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest {
	r.projectHoursApprovalCreateDto = &projectHoursApprovalCreateDto
	return r
}

func (r ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.ApiV2TimeTrackerServiceTimeLogApprovalsPostExecute(r)
}

/*
ApiV2TimeTrackerServiceTimeLogApprovalsPost Method for ApiV2TimeTrackerServiceTimeLogApprovalsPost

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest
*/
func (a *TimeLogApprovalsAPIService) ApiV2TimeTrackerServiceTimeLogApprovalsPost(ctx context.Context) ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest {
	return ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *TimeLogApprovalsAPIService) ApiV2TimeTrackerServiceTimeLogApprovalsPostExecute(r ApiApiV2TimeTrackerServiceTimeLogApprovalsPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeLogApprovalsAPIService.ApiV2TimeTrackerServiceTimeLogApprovalsPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/TimeTrackerService/TimeLogApprovals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tenantId == nil {
		return nil, reportError("tenantId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "tenantId", r.tenantId, "form", "")
	if r.apiVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "api-version", r.apiVersion, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/xml"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xApiVersion != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "x-api-version", r.xApiVersion, "simple", "")
	}
	// body params
	localVarPostBody = r.projectHoursApprovalCreateDto
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorEnvelope
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
